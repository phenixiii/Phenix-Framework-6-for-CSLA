<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phenix.Core</name>
    </assembly>
    <members>
        <member name="T:Phenix.Core.AppConfig">
            <summary>
            应用系统配置信息
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.SYSTEM_NAME">
            <summary>
            系统名
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.CLIENT_LIBRARY_SUBDIRECTORY_NAME">
            <summary>
            客户端程序集子目录名称
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.ClientLibrarySubdirectory">
            <summary>
            客户端程序集子目录
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.CLIENT_LIBRARY_OWN_SUBDIRECTORY_NAME">
            <summary>
            私有客户端程序集子目录名称
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.ClientLibraryOwnSubdirectory">
            <summary>
            私有客户端程序集子目录
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.SERVICE_LIBRARY_SUBDIRECTORY_NAME">
            <summary>
            服务端程序集子目录名称
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.ServiceLibrarySubdirectory">
            <summary>
            服务端程序集子目录
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.BACKUP_SUBDIRECTORY">
            <summary>
            备份子目录
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.CR_LF">
            <summary>
            换行字串
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.SEPARATOR">
            <summary>
            分隔字串
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.BLOCK_SEPARATOR">
            <summary>
            块分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.FIELD_SEPARATOR">
            <summary>
            字段分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.ROW_SEPARATOR">
            <summary>
            行分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.PARAM_SEPARATOR">
            <summary>
            参数分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.VALUE_SEPARATOR">
            <summary>
            值分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.POINT_SEPARATOR">
            <summary>
            标点分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.EQUAL_SEPARATOR">
            <summary>
            隶属分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.UNKNOWN_VALUE">
            <summary>
            未知值
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.EnterpriseName">
            <summary>
            企业名
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.DesignPaths">
            <summary>
            设计器路径
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.DesignMode">
            <summary>
            处于设计模式
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.DesignDebugMode">
            <summary>
            处于设计调试模式
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.AutoMode">
            <summary>
            处于容器模式
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.Debugging">
            <summary>
            调试中?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.BaseDirectory">
            <summary>
            基础目录
            </summary>
        </member>
        <member name="F:Phenix.Core.AppConfig.ServicesLibraryName">
            <summary>
            ServicesLibrary名称
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.ServicesLibraryPath">
            <summary>
            ServicesLibrary路径
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.CacheDirectory">
            <summary>
            缓存目录
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.TempDirectory">
            <summary>
            临时目录
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.AutoStoreLayout">
            <summary>
            是否自动保存和恢复界面布局?
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.AppType">
            <summary>
            应用类型
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.YearMonthPattern">
            <summary>
            短日期值的格式模式
            该模式与“d”格式模式关联
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.ShortDatePattern">
            <summary>
            短日期值的格式模式
            该模式与“d”格式模式关联
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.FullDateTimePattern">
            <summary>
            短日期值的格式模式
            该模式与“d”格式模式关联
            </summary>
        </member>
        <member name="P:Phenix.Core.AppConfig.LongTimePattern">
            <summary>
            长时间值的格式模式
            该模式与“T”格式模式关联
            </summary>
        </member>
        <member name="T:Phenix.Core.AppSettingVersionAttribute">
            <summary>
            "应用系统配置版本"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.AppSettingVersionAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="versionNumber">版本号</param>
        </member>
        <member name="P:Phenix.Core.AppSettingVersionAttribute.VersionNumber">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.HistoryAttribute">
            <summary>
            "历史库"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.HistoryAttribute.FetchAll">
            <summary>
            构建自全部库
            true：主库+历史库
            false：历史库
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ValidationException">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.String)">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.ComponentModel.IDataErrorInfo)">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.ComponentModel.IDataErrorInfo,System.String)">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.ComponentModel.IDataErrorInfo,System.Exception)">
            <summary>
            有效性校验异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ValidationException.DataErrorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.MethodAction">
            <summary>
            方法动作
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.MethodAction.WriteProperty">
            <summary>
            写属性
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.MethodAction.ReadProperty">
            <summary>
            读属性
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.MethodAction.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.PropertyValue">
            <summary>
            属性值
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyValue.Set(Phenix.Core.Mapping.IPropertyInfo,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyValue.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IService">
            <summary>
            服务接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IService.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IService.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoExecute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoUploadFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            </summary>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoUploadFiles(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            </summary>
            <param name="fileByteses">待处理的文件字节串</param>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoUploadBigFile(Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            </summary>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoDownloadFile">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoDownloadFileBytes">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件字节串</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.IService.DoDownloadBigFile(System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            </summary>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="T:Phenix.Core.Mapping.IEntityCollectionPage">
            <summary>
            实体集合分页接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollectionPage.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollectionPage.MaxCount">
            <summary>
            最大项数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollectionPage.MaxPageNo">
            <summary>
            最大分页号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollectionPage.LocalPagesCount">
            <summary>
            本地分页数量
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollectionPage.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntityCollectionPage.FetchPage(System.Int32)">
            <summary>
            获取页
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntityCollectionPage.FetchPrevPage">
            <summary>
            获取上一页
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntityCollectionPage.FetchNextPage">
            <summary>
            获取下一页
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntityCollectionPage.FetchAllPage">
            <summary>
            获取全部页
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IEntityPage">
            <summary>
            实体分页接口
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.DeleteException">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(System.String)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(System.String,System.Exception)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntity)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntity,System.String,System.Exception)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntityCollection,System.Exception)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(Phenix.Core.Mapping.IEntityCollection,System.String,System.Exception)">
            <summary>
            删除数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.DeleteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.DeleteException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.DeleteException.EntityCollection">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CheckDirtyException">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(System.String)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(System.String,System.Exception)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(Phenix.Core.Mapping.IEntity)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(Phenix.Core.Mapping.IEntity,System.String,System.Exception)">
            <summary>
            校验记录或字段被更改过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckDirtyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CheckDirtyException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.InsertException">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(System.String)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(System.String,System.Exception)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(Phenix.Core.Mapping.IEntity)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(Phenix.Core.Mapping.IEntity,System.String,System.Exception)">
            <summary>
            新增数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.InsertException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.InsertException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ISupportUndo">
            <summary>
            支持编辑回滚
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ISupportUndo.BeginEdit">
            <summary>
            启动编辑
            开始记录编辑过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ISupportUndo.CancelEdit">
            <summary>
            取消编辑
            将当前状态恢复回原始状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ISupportUndo.ApplyEdit">
            <summary>
            提交编辑
            将原始状态更新到当前状态
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ReadOnlyAttribute">
            <summary>
            "只读"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ReadOnlyAttribute.IsValid">
            <summary>
            是否有效
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.UpdateException">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(System.String)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(Phenix.Core.Mapping.IEntity)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(Phenix.Core.Mapping.IEntity,System.String,System.Exception)">
            <summary>
            更新数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.UpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.UpdateException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.SelectSqlType">
            <summary>
            SelectSql类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.SelectSqlType.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.SelectSqlType.AllColumnBody">
            <summary>
            *
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.SelectSqlType.RecordCount">
            <summary>
            count(*)
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.AggregateSign">
            <summary>
            聚合符号
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.AggregateSign.Sum">
            <summary>
            合计
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.AggregateSign.Count">
            <summary>
            计数
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.AggregateSign.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.AggregateSign.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.AggregateSign.Avg">
            <summary>
            平均值
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ClassDetailMapInfo">
            <summary>
            数据映射类所属表的子表关联信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.ForeignTableName">
            <summary>
            外键表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.ForeignColumnName">
            <summary>
            外键字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.FullForeignColumnName">
            <summary>
            完整外键字段名(ForeignTableName.ForeignColumnName)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.ForeignName">
            <summary>
            外键名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.PrimaryTableName">
            <summary>
            主键表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.FriendlyName">
            <summary>
            指示该关联的友好名; 如果为空, 则认为从ForeignTableName获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.CascadingDelete">
            <summary>
            是否级联Delete?
            缺省为 false，即 Unlink
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailMapInfo.IsExplicit">
            <summary>
            是否显式声明
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ClassMapInfo">
            <summary>
            数据映射类信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.FieldMapInfos">
            <summary>
            数据映射字段信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.PropertyFieldMapInfos">
            <summary>
            数据映射字段信息枚举(PropertyName)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.PropertyMapInfos">
            <summary>
            数据映射属性信息枚举(PropertyName)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.PrimaryKeyFieldMapInfos">
            <summary>
            数据映射主键字段信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.ForeignKeyFieldMapInfos">
            <summary>
            关联数据映射字段信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.FieldUniqueMapInfos">
            <summary>
            数据映射唯一键信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.FieldAggregateMapInfos">
            <summary>
            关联聚合字段信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.MethodMapInfo">
            <summary>
            数据映射方法信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.DeletedAsDisabled">
            <summary>
            删除即禁用
            当包含禁用字段(FieldAttribute.IsDisabledColumn = true)且存在唯一键时为 true
            删除时, 仅将禁用字段置为CodingStandards.DefaultDisabledTrueValue
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.DisabledFieldMapInfo">
            <summary>
            禁用数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.ClassAttribute">
            <summary>
            类标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.IsReadOnly">
            <summary>
            是否只读(ReadOnlyAttribute != null 且 ReadOnlyAttribute.IsValid)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.TableName">
            <summary>
            指示该类是映射哪张(主)表
            如果关联了多个表，那么本属性指示的是主表，提交对象的增删改结果时将会针对主表进行持久化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.FriendlyName">
            <summary>
            指示该类的友好名
            用于提示信息中
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.DefaultCriteriaType">
            <summary>
            缺省条件类
            缺省为 同名后缀Criteria的类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.IsView">
            <summary>
            是否是视图
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.ViewName">
            <summary>
            视图名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.SourceName">
            <summary>
            数据源名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.PermanentExecuteAction">
            <summary>
            指示当处于哪种执行动作时本字段需要记录新旧值
            当包含 Phenix.Core.Mapping.ExecuteAction.Update 时需结合 FieldAttribute.PermanentExecuteModify 才有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.NeedPermanentRenovate">
            <summary>
            指示需要持久化动态刷新
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.SequenceFromServer">
            <summary>
            是否从服务器获取序号
            在New业务对象时为PrimaryKey字段赋服务器上的唯一值, 这在本地处于多进程环境里是更加稳妥的
            缺省为 false, 也就是从本地(一个进程有一个)序号生成器获取，性能高
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.AllowIgnoreCheckDirty">
            <summary>
            允许忽略校验数据库数据在下载到提交期间是否被更改过
            缺省为 false, 一旦发现将直接抛出异常: CheckSaveException, 即禁止关闭乐观锁验证机制
            设置为 true 时, 会抛出异常: CheckDirtyException, 客户端可依此提示用户是否强制保存，即再次Save()时，传入needCheckDirty参数=false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.HaveBusinessCodeColumn">
            <summary>
            存在业务码字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.HaveInputerColumn">
            <summary>
            存在输入人字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.OracleOptimizerMode">
            <summary>
            Oracle优化模式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.ClassDetails">
            <summary>
            子表关联信息(含级联)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.ExplicitClassDetails">
            <summary>
            显式子表关联信息(含级联)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.OrderByInfos">
            <summary>
            数据排列顺序队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassMapInfo.GroupNames">
            <summary>
            聚合名数组
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.IsCriteriaType(System.Type)">
            <summary>
            是条件类
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.CascadingDeleteOrUnlinkDetail(System.Data.Common.DbTransaction,System.Object)">
            <summary>
            级联删除或Unlink子表
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyCreate">
            <summary>
            是否拒绝Create
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyCreate(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Create
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyGet">
            <summary>
            是否拒绝Get
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyGet(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Get
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyEdit">
            <summary>
            是否拒绝Edit
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyEdit(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Edit
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyDelete">
            <summary>
            是否拒绝Delete
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMapInfo.DenyDelete(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Delete
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CodingStandards">
            <summary>
            代码规范
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultSequenceColumnName">
            <summary>
            缺省"序号"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultNewTimeColumnName">
            <summary>
            缺省"新增时间"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultBusinessCodeColumnName">
            <summary>
            缺省"业务码"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultOriginatorColumnName">
            <summary>
            缺省"制单人"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultOriginateTimeColumnName">
            <summary>
            缺省"制单时间"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultInputerColumnName">
            <summary>
            缺省"录入人"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDepartmentColumnName">
            <summary>
            缺省"录入人部门"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultPositionColumnName">
            <summary>
            缺省"录入人岗位"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultInputTimeColumnName">
            <summary>
            缺省"录入时间"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultInputerAddressColumnName">
            <summary>
            缺省"录入人地址"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDisabledColumnName">
            <summary>
            缺省"禁用"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDisabledFalseValue">
            <summary>
            缺省"禁用"的 true 值
            如果是字符串需前后加上"'"
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDisabledTrueValue">
            <summary>
            缺省"禁用"的 false 值
            如果是字符串需前后加上"'"
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultEnumTagColumnName">
            <summary>
            缺省"枚举/布尔标志"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultCodeColumnName">
            <summary>
            缺省"代码"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultNameColumnName">
            <summary>
            缺省"名称"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultChineseNameColumnName">
            <summary>
            缺省"中文名"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultEnglishNameColumnName">
            <summary>
            缺省"英文名"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDateNotContainTimeColumnName">
            <summary>
             缺省"日期(不包含时间部分)"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultDateIsYearMonthColumnName">
            <summary>
             缺省"年月(当月的头天零时)"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultImageColumnName">
            <summary>
            缺省"图片"的 ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CodingStandards.DefaultCriteriaClassName">
            <summary>
            缺省"条件"的类名
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsReservedColumn(System.String)">
            <summary>
            是否保留字段
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsInputerInfoColumn(System.String)">
            <summary>
            指示录入信息字段
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultSequenceColumnName(System.String)">
            <summary>
            是否缺省"序号"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultNewTimeColumnName(System.String)">
            <summary>
            是否缺省"新增时间"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultBusinessCodeColumnName(System.String)">
            <summary>
            是否缺省"业务码"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultOriginatorColumnName(System.String)">
            <summary>
            是否缺省"制单人"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultOriginateTimeColumnName(System.String)">
            <summary>
            是否缺省"制单时间"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultInputerColumnName(System.String)">
            <summary>
            是否缺省"录入人"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultDepartmentColumnName(System.String)">
            <summary>
            是否缺省"录入人部门"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultPositionColumnName(System.String)">
            <summary>
            是否缺省"录入人岗位"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultInputTimeColumnName(System.String)">
            <summary>
            是否缺省"录入时间"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultInputerAddressColumnName(System.String)">
            <summary>
            是否缺省"录入人地址"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultDisabledColumnName(System.String)">
            <summary>
            是否缺省"禁用"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultEnumTagColumnName(System.String)">
            <summary>
            是否缺省"枚举/布尔标志"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultCodeColumnName(System.String)">
            <summary>
            是否缺省"代码"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultNameColumnName(System.String)">
            <summary>
            是否缺省"名称"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultChineseNameColumnName(System.String)">
            <summary>
            是否缺省"中文名"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultEnglishNameColumnName(System.String)">
            <summary>
            是否缺省"英文名"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultDateNotContainTimeColumnName(System.String)">
            <summary>
            是否缺省"日期(不包含时间部分)"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultDateIsYearMonthColumnName(System.String)">
            <summary>
            是否缺省"年月(当月的头天零时)"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.IsDefaultImageColumnName(System.String)">
            <summary>
            是否缺省"图片"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.CheckFieldMapInfo(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            检查是否存在对应的数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.CheckFieldMapInfo(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            检查是否存在对应的数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.TrimTableName(System.String)">
            <summary>
            整理表名
            剔去前4个位的"_"
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetPascalCasingByTableName(System.String)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.TrimViewName(System.String)">
            <summary>
            整理视图名
            剔去前4个位的"_"、剔去倒数第2位的"_"
            </summary>
            <param name="viewName">视图名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetPascalCasingByViewName(System.String)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="viewName">视图名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.TrimColumnName(System.String)">
            <summary>
            整理字段名
            剔去前4个位的"_"、剔去倒数第3位的"_"
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetPascalCasingByColumnName(System.String)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetFieldNameByPropertyName(System.String)">
            <summary>
            取字段名
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetPropertyNameByFieldName(System.String)">
            <summary>
            取属性名
            </summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.GetParameterByFieldName(System.String)">
            <summary>
            取参数名
            </summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CodingStandards.TrimCriteriaClassName(System.String)">
            <summary>
            整理条件名
            剔去"条件标志"后缀
            </summary>
            <param name="criteriaClassName">条件类名</param>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaExpressionNode">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(System.Object)">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.OperationSign,System.Object,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.OperationSign,System.Object,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.OperationSign,System.Object,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(System.Object,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(System.Object,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(System.Object,Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.#ctor(Phenix.Core.Mapping.OperationSign,Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode[])">
            <summary>
            条件表达式节点
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Addition(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Add
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Subtract
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Subtraction(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Subtract
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_UnaryNegation(Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Subtract
            </summary>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Multiply(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Multiply
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Division(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Divide
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.ToLower">
            <summary>
            ToLower
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.ToUpper">
            <summary>
            ToUpper
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.TrimStart">
            <summary>
            TrimStart
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.TrimEnd">
            <summary>
            TrimEnd
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Trim">
            <summary>
            Trim
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Substring(System.Int32)">
            <summary>
            SubString
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Substring(System.Int32,System.Int32)">
            <summary>
            SubString
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
            <param name="length">截取字符数</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Equality(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Equal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThan(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Greater
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_GreaterThanOrEqual(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThan(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Lesser
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_LessThanOrEqual(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(Phenix.Core.Mapping.CriteriaExpressionNode,System.Object)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.op_Inequality(System.Object,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Unequal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Like(System.Object)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Like(System.Object,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.LikeIgnoreCase(System.Object)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Unlike(System.Object)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Unlike(System.Object,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.UnlikeIgnoreCase(System.Object)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Like(Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Like(Phenix.Core.Mapping.CriteriaExpressionNode,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.LikeIgnoreCase(Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Unlike(Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Unlike(Phenix.Core.Mapping.CriteriaExpressionNode,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.UnlikeIgnoreCase(Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.IsNull">
            <summary>
            IsNull
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.IsNotNull">
            <summary>
            IsNotNull
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.In(System.Object[])">
            <summary>
            In
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.NotIn(System.Object[])">
            <summary>
            NotIn
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.OwnerTypeAssemblyQualifiedName">
            <summary>
            所属类程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.PropertyTypeName">
            <summary>
            属性类型名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.FieldMapInfo">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.LeftNode">
            <summary>
            运算公式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.Sign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.RightNode">
            <summary>
            运算公式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionNode.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionNode.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaExpressionSub">
            <summary>
            子条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionSub.LinkExpression">
            <summary>
            关联条件
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpressionSub.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.Exists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            条件表达式: Exists
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.NotExists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            条件表达式: NotExists
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.Where(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            关联条件
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpressionSub.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaExpressionType">
            <summary>
            条件表达式类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaExpressionType.CriteriaOperate">
            <summary>
            操作
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaExpressionType.CriteriaLogical">
            <summary>
            组合
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaExpressionType.ExistsOrNotExists">
            <summary>
            子条件
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaExpressionType.Short">
            <summary>
            短路
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaLinkAttribute">
            <summary>
            "数据映射条件关联字段"标签
            用于子查询条件Phenix.Core.Mapping.CriteriaOperate.Exists/NotExists
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaLinkAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="tableName">关联表名</param>
            <param name="columnName">关联表列名</param>
            <param name="subTableName">关联子条件表名</param>
            <param name="subColumnName">关联子条件表列名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaLinkAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="expression">关联表列名</param>
            <param name="subExpression">关联子条件表列名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.TableName">
            <summary>
            关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.ColumnName">
            <summary>
            关联表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.FullTableColumnName">
            <summary>
            完整关联表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.Expression">
            <summary>
            指示该关联表字段对应的表达式; 如果为空, 则认为从FullTableColumnName获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.SubTableName">
            <summary>
            关联子条件表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.SubColumnName">
            <summary>
            关联子条件表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.SubFullTableColumnName">
            <summary>
            完整关联子条件表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaLinkAttribute.SubExpression">
            <summary>
            指示该关联子条件表字段对应的表达式; 如果为空, 则认为从SubFullTableColumnName获取
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaHelper">
            <summary>
            条件对象助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.ToCriteriaExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            转换条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.ToCriteriaExpression``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            转换条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.SaveCriteriaInfo(System.String,System.Object,System.Type)">
            <summary>
            保存条件信息
            </summary>
            <param name="key">键</param>
            <param name="criteria">条件对象</param>
            <param name="userType">使用类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.RestoreCriteriaInfo(System.String,System.Object,System.Type)">
            <summary>
            恢复条件信息
            </summary>
            <param name="key">键</param>
            <param name="criteria">条件对象</param>
            <param name="userType">使用类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.CompareCriteria(System.Object,System.Object,System.Type)">
            <summary>
            比较条件对象
            </summary>
            <param name="criteriaA">条件对象A</param>
            <param name="criteriaB">条件对象B</param>
            <param name="userType">使用类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.GetHashCode(System.Object,System.Type)">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
            <param name="criteria">条件对象</param>
            <param name="userType">使用类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.JsonSerialize(System.Object)">
            <summary>
            打包条件数据为JSON格式
            </summary>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.JsonDeserialize``1(System.String)">
            <summary>
            解包JSON格式为条件对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaHelper.JsonDeserialize(System.Type,System.String)">
            <summary>
            解包JSON格式为条件对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ClassMemberHelper">
            <summary>
            类成员助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetClassMapInfo(System.Type)">
            <summary>
            取类的ClassAttribute标注的类信息
            沿层次结构向上搜索全部字段
            队列类型可搜索到项类型
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetClassMapInfo(System.Type,System.Boolean,System.Boolean)">
            <summary>
            取类的ClassAttribute标注的类信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="objectType">类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <param name="throwIfIsReadOnly">如果为 true, 则当 ClassMapInfo.IsReadOnly == true 时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetDetails(System.Type)">
            <summary>
            取类的子表关联数组
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetDataSourceKey(System.Type)">
            <summary>
            沿层次结构向上搜索最近的标签上的数据源键
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetTableName(System.Type)">
            <summary>
            沿层次结构向上搜索最近的标签上的表名
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFriendlyName(System.Type)">
            <summary>
            沿层次结构向上搜索最近的标签上的友好名
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetViewName(System.Type)">
            <summary>
            沿层次结构向上搜索最近的标签上的视图名
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetGroupNames(System.Type)">
            <summary>
            沿层次结构向上搜索最近的标签上的聚合名数组
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.EqualGroupNames(System.Type,System.Type)">
            <summary>
            存在相同聚合名
            </summary>
            <param name="objectTypeA">类A</param>
            <param name="objectTypeB">类B</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetDetailMasterFieldMapInfos(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            取关联类关联字段信息
            </summary>
            <param name="detailType">从类</param>
            <param name="masterType">主类</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfos(System.Type)">
            <summary>
            取类的Phenix.Core.Mapping.FieldAttribute标注的字段映射信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfos(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            取类的Phenix.Core.Mapping.FieldAttribute标注的字段映射信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="objectType">类</param>
            <param name="checkIsPrimaryKey">指示该字段是主键</param>
            <param name="checkNeedUpdate">指示该字段需要提交更新</param>
            <param name="compareTableName">比对表名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfo(System.Type,System.String)">
            <summary>
            取类的Phenix.Core.Mapping.FieldAttribute标注的字段映射信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfo(System.Type,System.String,System.Boolean)">
            <summary>
            取类的Phenix.Core.Mapping.FieldAttribute标注的字段映射信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
            <param name="checkBridging">检查桥接</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetMasterFieldMapInfo(Phenix.Core.Mapping.IFieldMapInfo,System.Type)">
            <summary>
            取关联类关联字段信息
            </summary>
            <param name="detailFieldMapInfo">子类数据映射字段信息</param>
            <param name="masterType">主类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetTableColumn(Phenix.Core.Mapping.IFieldMapInfo)">
            <summary>
            取表字段
            </summary>
            <param name="fieldMapInfo">数据映射字段</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetCriteriaFieldMapInfos(System.Type,System.Type)">
            <summary>
            取类的Phenix.Core.Mapping.CriteriaFieldAttribute标注的条件类字段映射信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="criteriaType">条件类</param>
            <param name="userType">使用类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetCriteriaFieldMapInfo(System.Type,System.Type,System.String)">
            <summary>
            取类的Phenix.Core.Mapping.CriteriaFieldAttribute标注的条件类字段映射信息
            </summary>
            <param name="criteriaType">条件类</param>
            <param name="userType">使用类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetCriteriaFieldMapInfo(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            取类的Phenix.Core.Mapping.CriteriaFieldAttribute标注的条件类字段映射信息
            </summary>
            <param name="criteriaType">条件类</param>
            <param name="userType">使用类</param>
            <param name="propertyName">属性名</param>
            <param name="checkBridging">检查桥接</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldUniqueMapInfos(System.Type)">
            <summary>
            取类的Phenix.Core.Mapping.FieldUniqueAttribute标注的唯一建映射信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldAggregateMapInfos(System.Type,System.Boolean)">
            <summary>
            取类的Phenix.Core.Mapping.FieldAggregateAttribute标注的关联聚合字段信息
            沿层次结构向上搜索全部字段
            </summary>
            <param name="objectType">类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetPropertyMapInfos(System.Type)">
            <summary>
            取类的Phenix.Core.Mapping.PropertyAttribute标注的属性映射信息
            沿层次结构向上搜索全部属性
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetPropertyMapInfo(System.Type,System.String)">
            <summary>
            取类的Phenix.Core.Mapping.PropertyAttribute标注的属性映射信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetMethodMapInfos(System.Type,System.Boolean)">
            <summary>
            取类的方法映射信息
            沿层次结构向上搜索全部方法
            </summary>
            <param name="objectType">类</param>
            <param name="allPublic">忽略MethodAttribute标注</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetMethodMapInfo(System.Type,System.String)">
            <summary>
            取指定类的方法映射信息
            沿层次结构向上搜索全部方法
            allPublic = true
            </summary>
            <param name="objectType">类</param>
            <param name="methodName">方法名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldInfos(System.Type,System.Data.IDataRecord)">
            <summary>
            取被映射的类字段信息
            沿层次结构向上搜索与数据记录字段名一致的字段，字段名可以采用'_'前缀，或者用MapperFieldAttribute.ColumnName标注
            </summary>
            <param name="objectType">类</param>
            <param name="dataRecord">数据记录</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfos(System.Type,System.Data.IDataRecord)">
            <summary>
            取被映射的类字段信息
            沿层次结构向上搜索与数据记录字段名一致的字段，字段名可以采用'_'前缀，或者用MapperFieldAttribute.ColumnName标注
            </summary>
            <param name="objectType">类</param>
            <param name="dataRecord">数据记录</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldInfos(System.Type,System.Data.DataTable)">
            <summary>
            取被映射的类字段信息
            沿层次结构向上搜索与数据记录字段名一致的字段，字段名可以采用'_'前缀，或者用MapperFieldAttribute.ColumnName标注
            </summary>
            <param name="objectType">类</param>
            <param name="dataTable">数据记录</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfos(System.Type,System.Data.DataTable)">
            <summary>
            取被映射的类字段信息
            沿层次结构向上搜索与数据记录字段名一致的字段，字段名可以采用'_'前缀，或者用MapperFieldAttribute.ColumnName标注
            </summary>
            <param name="objectType">类</param>
            <param name="dataTable">数据记录</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldMapInfos(System.Type,System.Type,System.Boolean)">
            <summary>
            取被映射的类字段信息
            </summary>
            <param name="objectType">类</param>
            <param name="fieldUnderlyingType">需匹配的字段基础类型</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetPropertyInfos(System.Type)">
            <summary>
            取检索属性信息
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            取检索属性信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldConfineType(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取字段约束类型
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetFieldConfineType(System.Type,System.String)">
            <summary>
            取字段约束类型
            </summary>
            <param name="entityType">实体类型</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetMethodInfos(System.Type)">
            <summary>
            取类方法信息
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.GetMethodInfo(System.Type,System.String)">
            <summary>
            取类方法信息
            </summary>
            <param name="objectType">类</param>
            <param name="methodName">方法名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.ExistLink(System.Type,System.Type,System.String)">
            <summary>
            存在关联关系
            </summary>
            <param name="detailType">从类</param>
            <param name="masterType">主类</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.ExecuteRules(Phenix.Core.Mapping.IFieldMapInfo,System.Object,System.Object)">
            <summary>
            为目标对象执行业务规则
            </summary>
            <param name="fieldMapInfo">数据映射字段</param>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassMemberHelper.CheckRules(Phenix.Core.Mapping.IFieldMapInfo,System.Object,System.Object,System.Boolean)">
            <summary>
            为目标对象检查业务规则
            </summary>
            <param name="fieldMapInfo">数据映射字段</param>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="T:Phenix.Core.Mapping.EntityLinkHelper">
            <summary>
            实体关联助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.CreateMasterInstance``1(System.Object,System.String)">
            <summary>
            构建主对象, 为主对象主键字段附上从对象数据源中FieldLinkAttribute标注的外键字段值
            </summary>
            <param name="detail">从对象数据源</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.CreateMasterInstance(System.Object,System.Type,System.String)">
            <summary>
            构建主对象, 为主对象主键字段附上从对象数据源中FieldLinkAttribute标注的外键字段值
            </summary>
            <param name="detail">从对象数据源</param>
            <param name="masterType">主类</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.IsBrother``1(``0,``0,System.Type,System.String)">
            <summary>
            判断是否兄弟对象
            </summary>
            <param name="detail1">从对象1</param>
            <param name="detail2">从对象2</param>
            <param name="masterType">主类</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.IsLink(System.Object,System.Object,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            判断是否关联对象
            </summary>
            <param name="detail">从对象</param>
            <param name="master">主对象</param>
            <param name="foreignKeyFieldMapInfo">外键数据映射字段信息</param>
            <returns>如果类之间无关联关系则返回null</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.IsLink(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            判断是否关联对象
            </summary>
            <param name="detail">从对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.LinkTo(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            关联, 为FieldLinkAttribute标注的外键字段赋上对映的主对象主键字段值
            </summary>
            <param name="detail">从对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityLinkHelper.Unlink(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            解除关联, 为FieldLinkAttribute标注的外键字段赋上对映的主对象主键字段的null值
            </summary>
            <param name="detail">从对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="T:Phenix.Core.Mapping.EntityListHelper">
            <summary>
            实体集合对象助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.FindItem(System.Collections.IEnumerable,System.Object,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            检索第一个属性值相等的对象
            </summary>
            <param name="objectList">对象集合</param>
            <param name="criteria">条件对象</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonSerialize(System.Collections.IList)">
            <summary>
            打包数据为JSON格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonSerializeChangedValues(System.Collections.IList)">
            <summary>
            打包数据为JSON格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonDeserialize``1(System.String)">
            <summary>
            构建对象(实体)集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonDeserialize(System.Type,System.String)">
            <summary>
            构建对象(实体)集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonDeserializeNameValues(System.String)">
            <summary>
            解包JSON格式为PropertyName-Value集合的队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityListHelper.JsonDeserializeValues(System.String)">
            <summary>
            解包JSON格式为PropertyName-Value集合的队列
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ExecuteModify">
            <summary>
            执行变更
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.None">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.NulltoNonnull">
            <summary>
            从空到非空
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.NonnullToNull">
            <summary>
            从非空到空 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.NonnullToNonnull">
            <summary>
            从非空到非空
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.NulltoNonnullOrNonnullToNull">
            <summary>
            从空到非空+从非空到空
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteModify.All">
            <summary>
            从空到非空+从非空到空+从非空到非空
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldAggregateAttribute">
            <summary>
            "关联聚合字段"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="tableName">关联表的表名</param>
            <param name="columnName">关联表的表列名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateAttribute.TableName">
            <summary>
            关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateAttribute.ColumnName">
            <summary>
            关联表的聚合表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateAttribute.GroupName">
            <summary>
            分组名
            用于区分存在多组外键关联表的情况
            如果不赋值, 当检索时指定分组名的话则匹配字段对应的属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateAttribute.ToDo">
            <summary>
            要做...
            缺省为 Sum
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateAttribute.ToDoOnUpdate">
            <summary>
            指示该字段在Update时要为主表做...
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldAggregateMapInfo">
            <summary>
            关联聚合字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateMapInfo.Owner">
            <summary>
            所属字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateMapInfo.FieldAggregateAttribute">
            <summary>
            关联聚合字段标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAggregateMapInfo.FullTableColumnName">
            <summary>
            完整表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateMapInfo.Compute(System.Object,System.Object,System.Object)">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateMapInfo.Compute(System.Collections.Generic.IList{System.Object},System.Object)">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldAggregateMapInfo.Compute(System.Data.Common.DbTransaction,System.Object,System.Boolean)">
            <summary>
            计算
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldUniqueMapInfo">
            <summary>
            数据映射唯一键信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldUniqueMapInfo.Owner">
            <summary>
            所属字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldUniqueMapInfo.FieldUniqueAttribute">
            <summary>
            唯一键标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldUniqueMapInfo.FriendlyName">
            <summary>
            指示该唯一键的友好名
            如果为空, 则认为从字段的友好名获取
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.GetObjectCaption(System.Object)">
            <summary>
            获取对象的唯一标签
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.GetCaption(System.Object)">
            <summary>
            获取对象的唯一标签
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.IsRepeated(System.Data.Common.DbConnection,System.Object)">
            <summary>
            是否重复记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.FetchRepeated(System.Object)">
            <summary>
            取重复记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueMapInfo.FetchRepeated(System.Data.Common.DbConnection,System.Object)">
            <summary>
            取重复记录
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ICriteria">
            <summary>
            条件接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriteria.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ICriteria.CheckRule(System.String)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.ICriteria.CheckRule(System.String,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.ICriteria.CheckRules(System.Boolean)">
            <summary>
            校验本对象是否有效
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:Phenix.Core.Mapping.ICriterions">
            <summary>
             条件集接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.ResultType">
            <summary>
            返回对象类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.ResultCoreType">
            <summary>
            返回对象核心类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.ResultIsArray">
            <summary>
            返回对象是数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.Criteria">
            <summary>
            条件对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.Master">
            <summary>
            主对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.GroupName">
            <summary>
            分组名
            用于区分子表中存在多组外键关联主表的情况
            null代表全部
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.SectionNames">
            <summary>
            切片名
            null代表不存在切片
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.IncludeDisabled">
            <summary>
            是否包含禁用记录
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.Itself">
            <summary>
            自对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.NeedPage">
            <summary>
            需要分页
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ICriterions.OrderByInfos">
            <summary>
            数据排列顺序信息
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntity.FetchSelf(System.Data.IDataRecord,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.OldFieldValues">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.DeletedAsDisabled">
            <summary>
            删除即禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.IsDisabled">
            <summary>
            是否已禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.NeedCheckDirty">
            <summary>
            校验数据库数据在下载到提交期间是否被更改过
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntity.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntity.MarkFetched">
            <summary>
            标为 SelfFetched = true 且 IsNew = false 且 IsSelfDeleted = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntity.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            ignoreCompare = false
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntity.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="ignoreCompare">忽略比较新旧值(仅判断是否被赋值过)</param>
        </member>
        <member name="M:Phenix.Core.Mapping.IEntity.GetOldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取最原始的属性值
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IEntityCollection">
            <summary>
            实体集合接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.ItemValueType">
            <summary>
            项值类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.SelfFetching">
            <summary>
            正在检索中
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IEntityCollection.RaiseListChangedEvents">
            <summary>
            指示在列表中添加或移除项时是否会引发 ListChanged 事件
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IMemberInfo">
            <summary>
            类成员信息接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMemberInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMemberInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMemberInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IMethodInfo">
            <summary>
            方法信息接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMethodInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMethodInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMethodInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMethodInfo.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IMethodInfo.MethodMapInfo">
            <summary>
            数据映射方法信息
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodInfo.Name">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodInfo.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodInfo.MethodMapInfo">
            <summary>
            数据映射方法信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Phenix.Core.Mapping.OrderByInfo">
            <summary>
            数据排列顺序信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.Ascending(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            升序
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.Descending(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            降序
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="P:Phenix.Core.Mapping.OrderByInfo.OwnerTypeFullName">
            <summary>
            所属类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.OrderByInfo.OwnerTypeAssemblyQualifiedName">
            <summary>
            所属类程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.OrderByInfo.PropertyTypeName">
            <summary>
            属性类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.OrderByInfo.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.OrderByInfo.OrderBy">
            <summary>
            数据排列顺序
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.GetFieldMapInfo">
            <summary>
            取数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.GetFieldMapInfo(System.Type)">
            <summary>
            取数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.Execute``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            执行
            </summary>
            <param name="source">数据源</param>
            <returns>结果</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.Execute``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``1})">
            <summary>
            执行
            </summary>
            <param name="source">数据源</param>
            <param name="comparer">比较方法</param>
            <returns>结果</returns>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.Compare(Phenix.Core.Mapping.IEntity,Phenix.Core.Mapping.IEntity)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.FindStartIndex``1(``0,System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            定位到第一个索引号
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.FindEndIndex``1(``0,System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            定位到最后一个索引号
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.RectifyIndex``1(System.Int32,``0,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{Phenix.Core.Mapping.OrderByInfo})">
            <summary>
            矫正索引号
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.OrderByInfo.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.PropertyInfo`1">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Addition(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Addition(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Addition(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Add
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Subtraction(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Subtraction(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Subtract
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Subtraction(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Subtract
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_UnaryNegation(Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Subtract
            </summary>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Multiply(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Multiply(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Multiply(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Multiply
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Division(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Division(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Division(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Divide
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo`1.Length">
            <summary>
            ToLower
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.ToLower">
            <summary>
            ToLower
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.ToUpper">
            <summary>
            ToUpper
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.TrimStart">
            <summary>
            TrimStart
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.TrimEnd">
            <summary>
            TrimEnd
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Trim">
            <summary>
            Trim
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Substring(System.Int32)">
            <summary>
            Substring
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Substring(System.Int32,System.Int32)">
            <summary>
            Substring
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
            <param name="length">截取字符数</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Equality(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Equality(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Equality(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Equal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThan(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThan(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThan(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Greater
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThanOrEqual(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThanOrEqual(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_GreaterThanOrEqual(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThan(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThan(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThan(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Lesser
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThanOrEqual(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThanOrEqual(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_LessThanOrEqual(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            LesserOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Inequality(Phenix.Core.Mapping.PropertyInfo{`0},Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">运条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Inequality(Phenix.Core.Mapping.PropertyInfo{`0},`0)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.op_Inequality(`0,Phenix.Core.Mapping.PropertyInfo{`0})">
            <summary>
            Unequal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Like(`0)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Like(`0,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.LikeIgnoreCase(`0)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Unlike(`0)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Unlike(`0,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.UnlikeIgnoreCase(`0)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Like(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Like(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.LikeIgnoreCase(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Unlike(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Unlike(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.UnlikeIgnoreCase(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo`1.IsNull">
            <summary>
            IsNull
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo`1.IsNotNull">
            <summary>
            IsNotNull
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.In(`0[])">
            <summary>
            In
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.NotIn(`0[])">
            <summary>
            NotIn
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo`1.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo`1.SetValue(`0)">
            <summary>
            SetValue
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Phenix.Core.Mapping.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.DefaultValueFunc">
            <summary>
            缺省值函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.FieldMapInfo">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyInfo.Selectable">
            <summary>
            可勾选
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldConfineType">
            <summary>
            字段约束类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.FieldConfineType.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.FieldConfineType.Unconfined">
            <summary>
            无约束
            标记时优先级低于Selectable
            使用时优先级高于Selectable
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.FieldConfineType.Selectable">
            <summary>
            可勾选
            标记时优先级高于Unconfined
            使用时优先级低于Unconfined
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IPropertyInfo">
            <summary>
            属性信息接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.DefaultValueFunc">
            <summary>
            缺省值函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.FieldMapInfo">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IPropertyInfo.Selectable">
            <summary>
            可勾选
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.PropertyAttribute">
            <summary>
            "数据映射属性"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyAttribute.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            初始化
            </summary>
            <param name="bridgingPropertyName">指示该属性桥接的属性名</param>
            <param name="bridgingType">指示该属性桥接嵌套的类</param>
            <param name="bridgingTypePropertyName">指示该属性桥接嵌套的类属性名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.EnFriendlyName">
            <summary>
            指示该属性对应的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.FriendlyName">
            <summary>
            指示该属性对应的友好名; 如果为空, 则认为从属性名获取
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnFriendlyName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.HaveBridging">
            <summary>
            存在桥接
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.BridgingPropertyName">
            <summary>
            指示该属性桥接的属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.BridgingType">
            <summary>
            指示该属性桥接嵌套的类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.BridgingTypePropertyName">
            <summary>
            指示该属性桥接嵌套的类属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyAttribute.Serializable">
            <summary>
            是否序列化
            缺省为 false
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.PropertyMapInfo">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.Property">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.PropertyAttribute">
            <summary>
            属性标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.FriendlyName">
            <summary>
            属性对应的友好名
            未标注时从属性名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.IndexNumber">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.PropertyMapInfo.SetValue">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.PropertyMapInfo.Set(System.Object,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="target">目的对象</param>
            <param name="value">值</param>
        </member>
        <member name="T:Phenix.Core.Mapping.CheckOccupiedException">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor(System.String)">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor(System.String,System.Exception)">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor(Phenix.Core.Mapping.IEntity,Phenix.Core.Mapping.ClassDetailMapInfo,System.Exception)">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor(Phenix.Core.Mapping.IEntity,Phenix.Core.Mapping.ClassDetailMapInfo,System.String,System.Exception)">
            <summary>
            校验已被占用记录(存在子表记录)时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckOccupiedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CheckOccupiedException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CheckRepeatedException">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor(System.String)">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor(System.String,System.Exception)">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor(Phenix.Core.Mapping.IEntity,Phenix.Core.Mapping.FieldUniqueMapInfo,System.Exception)">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor(Phenix.Core.Mapping.IEntity,Phenix.Core.Mapping.FieldUniqueMapInfo,System.String,System.Exception)">
            <summary>
            校验存在重复记录时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CheckRepeatedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CheckRepeatedException.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ClassDetailAttribute">
            <summary>
            "数据映射类所属表的子表外键"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassDetailAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="foreignTableName">外键表名</param>
            <param name="foreignColumnName">外键字段</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassDetailAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="foreignTableName">外键表名</param>
            <param name="foreignColumnName">外键字段</param>
            <param name="foreignName">外键名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassDetailAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="foreignTableName">外键表名</param>
            <param name="foreignColumnName">外键字段</param>
            <param name="foreignName">外键名</param>
            <param name="primaryTableName">主键表名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.ForeignTableName">
            <summary>
            外键表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.ForeignColumnName">
            <summary>
            外键字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.ForeignName">
            <summary>
            外键名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.FullForeignColumnName">
            <summary>
            完整外键字段名(ForeignTableName.ForeignColumnName)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.PrimaryTableName">
            <summary>
            主键表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.EnFriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.FriendlyName">
            <summary>
            友好名
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnCaption
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassDetailAttribute.CascadingDelete">
            <summary>
            是否级联Delete?
            缺省为 false，即 Unlink
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(System.String,Phenix.Core.Mapping.CriteriaExpressionType,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.CriteriaLogical,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.CriteriaExpressionNode,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.CriteriaLogical,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.CriteriaExpressionNode)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate,System.Boolean,System.Object)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.CriteriaExpressionNode,Phenix.Core.Mapping.CriteriaOperate)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.CriteriaOperate)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(Phenix.Core.Mapping.FieldMapInfo,Phenix.Core.Mapping.CriteriaOperate)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.#ctor(System.Boolean)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.True">
            <summary>
            条件表达式: True
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.False">
            <summary>
            条件表达式: False
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseAnd(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseAnd(Phenix.Core.Mapping.CriteriaExpression,System.Boolean)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseAnd(System.Boolean,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseOr(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseOr(Phenix.Core.Mapping.CriteriaExpression,System.Boolean)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_BitwiseOr(System.Boolean,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.op_LogicalNot(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            Not
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Link(System.Type,System.Type)">
            <summary>
            Link
            groupName = null
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Link(System.Type,System.Type,System.String)">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.DataSourceKey">
            <summary>
            数据源键
            缺省为 OwnerType 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.OwnerType">
            <summary>
            所属类
            指主体类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.CriteriaExpressionType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Left">
            <summary>
            条件表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Logical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Right">
            <summary>
            条件表达式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.LeftNode">
            <summary>
            条件操作表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Operate">
            <summary>
            条件操作
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.OperateIgnoreCase">
            <summary>
            条件操作忽略大小写
            仅针对字符串类型的字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.RightNode">
            <summary>
            条件操作表达式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.ShortValue">
            <summary>
            短路值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaExpression.Trimmed">
            <summary>
            整理过
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Reset(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Find(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            查找
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.FindAll(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            查找
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Trim(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            整理
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaExpression.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaFieldAttribute">
            <summary>
            "数据映射条件字段"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.SourceName">
            <summary>
            指示该条件字段对应的数据源名
            未标注时取所属类最近的标签ClassAttribute.FetchScript(首选)、或者取使用类最近的标签ClassAttribute.FetchScript(次选)、或者取TableName(次选)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.Alias">
            <summary>
            指示该条件字段对应的别名; 如果为空, 则认为从属性名获取
            当 ClassAttribute.FetchScript 中存在字段别名时, 应该与之对应
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.TableName">
            <summary>
            指示该条件字段对应的哪张表; 如果为空, 则认为表名=所属类的ClassAttribute.TableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.ColumnName">
            <summary>
            指示该条件字段对应的表列名; 如果为空, 则认为表列名从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.ColumnNameIsRegex">
            <summary>
            ColumnName是正则表达式
            缺省为 false
            当为 true 时，将在被Fetch的类中匹配所有字段的FieldAttribute.ColumnName、FieldLinkAttribute.ColumnName，匹配到的字段将被构建到条件表达式中
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.Expression">
            <summary>
            指示该条件字段对应的条件表达式; 如果为空, 则认为从表列名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.PropertyName">
            <summary>
            指示该条件字段对应的属性名
            未标注时从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉, 如果是IsLower字符则被ToUpper
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.EnFriendlyName">
            <summary>
            指示该条件字段对应的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.FriendlyName">
            <summary>
            指示该条件字段对应的友好名
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnFriendlyName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.Logical">
            <summary>
            指示该条件字段的逻辑
            缺省为 CriteriaLogical.And
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.Operate">
            <summary>
            指示该条件字段的操作
            缺省为 CriteriaOperate.Equal
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.OperateIgnoreCase">
            <summary>
            条件操作忽略大小写
            仅针对字符串类型的字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.AutoStore">
            <summary>
            指示该条件字段可自动保存和恢复
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.IgnoreValue">
            <summary>
            指示忽略加入条件项的值
            缺省为 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.AllowReservedColumn">
            <summary>
            是否允许作为保留字段使用
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.IsDisabledColumn">
            <summary>
            指示该字段是禁用字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultDisabledColumnName 时必定是禁用字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.IsPromptCodeValue">
            <summary>
            指示该字段是提示码值
            配合UI设计期构建下拉框及其配置
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.InValidation">
            <summary>
            用于校验
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldAttribute.InTableFilter">
            <summary>
            用于表过滤器
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaFieldMapInfo">
            <summary>
            数据映射条件字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.UserType">
            <summary>
            使用类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FieldUnderlyingType">
            <summary>
            字段基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FieldCoreUnderlyingType">
            <summary>
            字段核心基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.TableColumn">
            <summary>
            表字段资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.CriteriaFieldAttribute">
            <summary>
            字段标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FieldLinkAttribute">
            <summary>
            字段关联标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.CriteriaLinkAttributes">
            <summary>
            关联字段标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.PropertyName">
            <summary>
            字段对应的属性名
            缺省从字段名获取并转换为PascalCasing格式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.Property">
            <summary>
            字段对应的属性
            如果为空，说明不存在字段对应的属性
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.PropertyMapInfo">
            <summary>
            字段对应的属性
            如果为空，说明不存在字段对应的属性
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.InValidation">
            <summary>
            用于校验
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FieldRuleAttribute">
            <summary>
            业务规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.ValidationAttributes">
            <summary>
            校验规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.DataSourceKey">
            <summary>
            数据源键
            用于分数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.SourceName">
            <summary>
            条件字段对应的数据源名
            未标注时取所属类最近的标签ClassAttribute.FetchScript(首选)、或者取使用类最近的标签ClassAttribute.FetchScript(次选)、或者取TableName(次选)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.Alias">
            <summary>
            条件字段对应的别名
            未标注时从属性名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.TableName">
            <summary>
            条件字段对应的表名
            未标注时取所属类最近的标签ClassAttribute.TableName(首选)、或者取使用类最近的标签ClassAttribute.TableName(次选)、所属类名(次选)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.ColumnName">
            <summary>
            条件字段对应的表列名
            未标注时从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.ShortColumnName">
            <summary>
            短字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FullTableColumnName">
            <summary>
            完整表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.LinkTableName">
            <summary>
            映射关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.LinkColumnName">
            <summary>
            映射关联表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.LinkFullTableColumnName">
            <summary>
            完整关联表字段名 = 关联表表名.关联表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.LinkGroupName">
            <summary>
            关联表分组名
            如果FieldLinkAttribute.GroupName不赋值, 当检索时指定分组名的话则匹配LinkFullTableColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.Expression">
            <summary>
            条件字段对应的条件表达式
            未标注时从表列名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.FriendlyName">
            <summary>
            字段对应的友好名
            未标注时从属性名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.IndexNumber">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.IsRequired">
            <summary>
            是否必输
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.MaximumLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.MinimumLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.IsDisabledColumn">
            <summary>
            指示该字段是禁用字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.IsPromptCodeValue">
            <summary>
            指示该字段是提示码值
            配合UI设计期构建下拉框及其配置
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.PromptCodeName">
            <summary>
            提示码名称
            配合UI设计期构建下拉框及其配置
            当IsPromptCodeValue=true时有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.CriteriaFieldMapInfo.SetValue">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.Set(System.Object,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="target">目的对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.IncludeDisabled(System.Type,System.Object)">
            <summary>
            是否包含禁用记录
            </summary>
            <param name="userType">使用类</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.ExecuteRules(System.Object)">
            <summary>
            为目标对象执行业务规则
            fieldValue = 当前值
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.ExecuteRules(System.Object,System.Object)">
            <summary>
            为目标对象执行业务规则
            </summary>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.CheckRules(System.Object,System.Boolean)">
            <summary>
            为目标对象检查业务规则
            fieldValue = 当前值
            </summary>
            <param name="target">目标对象</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="M:Phenix.Core.Mapping.CriteriaFieldMapInfo.CheckRules(System.Object,System.Object,System.Boolean)">
            <summary>
            为目标对象检查业务规则
            </summary>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaLogical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaLogical.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaLogical.Or">
            <summary>
            or
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaLogical.Not">
            <summary>
            not
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.CriteriaOperate">
            <summary>
            条件操作符
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.None">
            <summary>
            无
            不参与SQL的拼装但参与参数定义和赋值
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Embed">
            <summary>
            嵌入  
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Equal">
            <summary>
            等于  
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Lesser">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.LesserOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Unequal">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Like">
            <summary>
            像
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Unlike">
            <summary>
            不像
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.IsNull">
            <summary>
            是空值
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.IsNotNull">
            <summary>
            非空值
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.In">
            <summary>
            包含(支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.NotIn">
            <summary>
            不包含(支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.Exists">
            <summary>
            存在于(适用于关联关系)
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.CriteriaOperate.NotExists">
            <summary>
            不存在于(适用于关联关系)
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ExecuteAction">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.Insert">
            <summary>
            新增 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.Update">
            <summary>
            更新 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.Fetch">
            <summary>
            获取 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.UpdateAndInsert">
            <summary>
            更新+新增
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.UpdateAndDelete">
            <summary>
            更新+删除
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.InsertAndDelete">
            <summary>
            新增+删除
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.ExecuteAction.All">
            <summary>
            更新+新增+删除
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldOrderByAttribute">
            <summary>
            "数据映射字段排序"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldOrderByAttribute.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldOrderByAttribute.#ctor(Phenix.Core.Mapping.OrderBy)">
            <summary>
            初始化
            </summary>
            <param name="orderBy">排序方式</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldOrderByAttribute.#ctor(System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="priority">优先次序</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldOrderByAttribute.#ctor(Phenix.Core.Mapping.OrderBy,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="orderBy">排序方式</param>
            <param name="priority">优先次序</param>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldOrderByAttribute.OrderBy">
            <summary>
            指示该字段参与排序的方式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldOrderByAttribute.Priority">
            <summary>
            指示该字段参与排序的次序
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldRuleAttribute">
            <summary>
            "数据映射字段业务规则"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.IsRequired">
            <summary>
            是否必输
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.MaximumLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.MinimumLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringTrim">
            <summary>
            指示该字段内容将被移除所有前导空白字符和尾部空白字符
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringTrimHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringUpperCase">
            <summary>
            指示该字段内容是否强制转换大小写(true 为 CharacterCasing.Upper, false 为 CharacterCasing.Lower, 不赋值的情况下为 CharacterCasing.Normal) 
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringUpperCaseHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringOnImeMode">
            <summary>
            指示该字段内容是否可以输入中文(true 为 ImeMode.On, false 为 ImeMode.Off, 不赋值的情况下为 ImeMode.Inherit)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.StringOnImeModeHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.PinyinCodeProperty">
            <summary>
            根据本字段自动转换成拼音码的属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateNotContainTime">
            <summary>
            指示该字段内容不包含时间部分
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateNotContainTimeHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateIsYearMonth">
            <summary>
            指示该字段内容仅为当月的头天零时
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateIsYearMonthHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStartSpan">
            <summary>
            允许时间范围起始值(相对当前时间, 小于当前时间为负数)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStartSpanHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStartSpanOfDays">
            <summary>
            允许时间范围起始值(相对当前时间, 小于当前时间为负数), 指定天数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStartSpanOfHours">
            <summary>
            允许时间范围起始值(相对当前时间, 小于当前时间为负数), 指定小时数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStartSpanOfMinutes">
            <summary>
            允许时间范围起始值(相对当前时间, 小于当前时间为负数), 指定分钟数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStopSpan">
            <summary>
            允许时间范围结束值(相对当前时间, 小于当前时间为负数)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStopSpanHasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStopSpanOfDays">
            <summary>
            允许时间范围结束值(相对当前时间, 小于当前时间为负数), 指定天数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStopSpanOfHours">
            <summary>
            允许时间范围结束值(相对当前时间, 小于当前时间为负数), 指定小时数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldRuleAttribute.DateTimeStopSpanOfMinutes">
            <summary>
            允许时间范围结束值(相对当前时间, 小于当前时间为负数), 指定分钟数
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.IFieldMapInfo">
            <summary>
            数据映射字段接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.TableColumn">
            <summary>
            表字段资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FieldLinkAttribute">
            <summary>
            字段关联标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.InValidation">
            <summary>
            用于校验
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FieldRuleAttribute">
            <summary>
            业务规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.ValidationAttributes">
            <summary>
            校验规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.DataSourceKey">
            <summary>
            数据源键
            用于分数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.TableName">
            <summary>
            指示该条件字段对应的哪张表; 如果为空, 则认为表名=所属类的ClassAttribute.TableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.ColumnName">
            <summary>
            指示该条件字段对应的表列名; 如果为空, 则认为表列名从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FullTableColumnName">
            <summary>
            完整表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FieldUnderlyingType">
            <summary>
            字段基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FieldCoreUnderlyingType">
            <summary>
            字段核心基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.PropertyName">
            <summary>
            字段对应的属性名
            未标注时从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉, 如果是IsLower字符则被ToUpper
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.IsPromptCodeValue">
            <summary>
            指示该字段是提示码值
            配合UI设计期构建下拉框及其配置
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.PromptCodeName">
            <summary>
            提示码名称
            配合UI设计期构建下拉框及其配置
            当IsPromptCodeValue=true时有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.LinkFullTableColumnName">
            <summary>
            完整关联表字段名 = 关联表表名.关联表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.FriendlyName">
            <summary>
            字段对应的友好名
            未标注时从属性名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.IsRequired">
            <summary>
            是否必输
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.MaximumLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.MinimumLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.IFieldMapInfo.SetValue">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.EntityHelper">
            <summary>
            实体助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.Fetch(System.Data.IDataRecord,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            构建对象
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="targetFieldMapInfos">对映关系</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.CheckOccupied(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            检查是否存在子表记录
            </summary>
            <param name="entity">实体</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.CheckRepeated(Phenix.Core.Mapping.IEntity,System.Exception)">
            <summary>
            检查是否存在重复记录
            </summary>
            <param name="entity">实体</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues``1(``0,``0,System.Boolean,System.Boolean,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            填充对象字段值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="needFillPrimaryKey">必须填充FieldAttribute.IsPrimaryKey标注的字段</param>
            <param name="reset">重新设定</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues(System.Data.IDataRecord,System.Object,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
            <summary>
            填充对象字段值
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="targetFieldInfos">对映关系</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues(System.Data.IDataRecord,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            填充对象字段值
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="targetFieldMapInfos">对映关系</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues(System.Object[],System.Object,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
            <summary>
            填充对象字段值
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="targetFieldInfos">对映关系</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues(System.Object[],System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            填充对象字段值
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="targetFieldMapInfos">对映关系</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValues(System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Object,System.Boolean)">
            <summary>
            填充对象字段值
            </summary>
            <param name="sourceFieldValues">数据源字段值</param>
            <param name="target">目标对象</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValue(System.Object,Phenix.Core.Mapping.FieldMapInfo,System.Object,System.Boolean,System.Boolean)">
            <summary>
            填充对象字段值
            </summary>
            <param name="target">目标对象</param>
            <param name="fieldMapInfo">数据映射字段信息</param>
            <param name="value">值</param>
            <param name="reset">重新设定</param>
            <param name="throwIfException">如果为 true, 则会在截获异常时抛出; 如果为 false, 则在处理完异常后返回 false</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.EqualsPrimaryKeyFieldValues``1(``0,``0)">
            <summary>
            比较主键是否相等
            </summary>
            <param name="entityA">实体A</param>
            <param name="entityB">实体B</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.GetPrimaryKeyFieldValue(System.Object)">
            <summary>
            取FieldAttribute.IsPrimaryKey标注的字段值
            </summary>
            <param name="source">源对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillPrimaryKeyFieldValue``1(System.Object,``0)">
            <summary>
            为FieldAttribute.IsPrimaryKey标注的字段赋值
            </summary>
            <param name="target">目标对象</param>
            <param name="value">主键值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillPrimaryKeyFieldValues(System.Object,System.Boolean)">
            <summary>
            为FieldAttribute.IsPrimaryKey标注的long类型字段赋上Sequence值
            </summary>
            <param name="target">目标对象</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.ClearPrimaryKeyFieldValues(System.Object,System.Boolean)">
            <summary>
            为FieldAttribute.IsPrimaryKey标注的long类型字段赋上null值
            </summary>
            <param name="target">目标对象</param>
            <param name="compareTableName">比对表名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillIdenticalFieldValuesByTargetProperty(System.Object,System.Object,System.Boolean,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            填充相同字段值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="needFillPrimaryKey">必须填充FieldAttribute.IsPrimaryKey标注的字段</param>
            <param name="targetPropertyInfos">需匹配目标对象的属性信息, 当为null、空队列时匹配全部属性, 映射的表字段需一致或FieldAttribute.IsRedundanceColumn = true</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillIdenticalFieldValuesBySourceProperty(System.Object,System.Object,System.Boolean,System.String[])">
            <summary>
            填充相同字段值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="needFillPrimaryKey">必须填充FieldAttribute.IsPrimaryKey标注的字段</param>
            <param name="sourcePropertyNames">需匹配数据源的属性名, 当为null、空队列时匹配全部属性, 映射的表字段需一致或FieldAttribute.IsRedundanceColumn = true</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillBusinessCodeFieldValues(System.Object,Phenix.Core.Mapping.FieldMapInfo,System.Collections.Generic.Dictionary{Phenix.Core.Mapping.FieldMapInfo,System.String}@,System.Boolean)">
            <summary>
            填充业务码字段值
            </summary>
            <param name="target">目标对象</param>
            <param name="criteriaPropertyFieldMapInfo">业务码条件属性数据映射字段信息, null代表忽略不计</param>
            <param name="semisBusinessCodes">半成品业务码集合</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillBusinessCodeFieldValues(System.Object,Phenix.Core.Mapping.FieldMapInfo,System.Collections.Generic.Dictionary{Phenix.Core.Mapping.FieldMapInfo,System.String})">
            <summary>
            填充业务码字段值
            </summary>
            <param name="target">目标对象</param>
            <param name="placeholderPropertyFieldMapInfo">占位符属性数据映射字段信息, null代表忽略不计</param>
            <param name="semisBusinessCodes">半成品业务码集合</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillBusinessCodeFieldValues(System.Object,System.Boolean)">
            <summary>
            填充业务码字段值
            </summary>
            <param name="target">目标对象</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillRequiredFieldValues(System.Object,System.Boolean)">
            <summary>
            填充必输项字段
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
            <param name="target">目标对象</param>
            <param name="isNew">是否新建</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillRequiredFieldValues(System.Object,Phenix.Core.Security.UserIdentity,System.Boolean)">
            <summary>
            填充必输项字段
            </summary>
            <param name="target">目标对象</param>
            <param name="identity">用户身份</param>
            <param name="isNew">是否新建</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillDisabledFieldValues(System.Object,System.Boolean)">
            <summary>
            填充禁用字段值
            </summary>
            <param name="target">目标对象</param>
            <param name="disabled">禁用</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillFieldValuesToDefault(System.Object,System.Boolean,System.Boolean)">
            <summary>
            填充字段缺省值
            </summary>
            <param name="target">目标对象</param>
            <param name="isNew">是否新建</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillOrdinaryPropertyValuesByTargetProperty(System.Object,System.Object,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            填充普通属性(IsOrdinaryColumn = true)的属性值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="targetPropertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性, 映射的表字段需一致或FieldAttribute.IsRedundanceColumn = true</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.FillOrdinaryPropertyValues``1(``0,``0,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            填充普通属性(IsOrdinaryColumn = true)的属性值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.GetFieldValues(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            提取源对象的字段内容
            </summary>
            <param name="source">源对象</param>
            <param name="checkIsPrimaryKey">指示该字段是主键</param>
            <param name="checkNeedUpdate">指示该字段需要提交更新</param>
            <param name="compareTableName">比对表名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.GetFieldValues(System.Object)">
            <summary>
            提取需要提交更新源对象的字段内容
            </summary>
            <param name="source">源对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonSerialize(System.Object)">
            <summary>
            打包数据为JSON格式
            </summary>
            <param name="source">实体</param>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonSerializeChangedValues(System.Object)">
            <summary>
            打包数据为JSON格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonDeserialize``1(System.String)">
            <summary>
            解包JSON格式为实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonDeserialize(System.Type,System.String)">
            <summary>
            解包JSON格式为实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonDeserializeNameValues(System.String)">
            <summary>
            解包JSON格式为PropertyName-Value集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.EntityHelper.JsonDeserializeValues(System.String)">
            <summary>
            解包JSON格式为PropertyName-Value集合
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldMapInfo">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.ClassMapInfo">
            <summary>
            数据映射类信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldUnderlyingType">
            <summary>
            字段基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldCoreUnderlyingType">
            <summary>
            字段核心基础类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.TableColumn">
            <summary>
            表字段资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldAttribute">
            <summary>
            字段标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldLinkAttribute">
            <summary>
            字段关联标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldOrderByAttribute">
            <summary>
            字段排序标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldUniqueMapInfos">
            <summary>
            唯一键信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldAggregateMapInfos">
            <summary>
            关联聚合字段信息数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InValidation">
            <summary>
            用于校验
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FieldRuleAttribute">
            <summary>
            业务规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.ValidationAttributes">
            <summary>
            校验规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.DataSourceKey">
            <summary>
            数据源键
            用于分数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.TableName">
            <summary>
            字段对应的表名
            未标注时从字段名获取(首选)、OwnerTableName(次选)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.ColumnName">
            <summary>
            字段对应的表列名
            未标注时从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.ShortColumnName">
            <summary>
            短字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FullTableColumnName">
            <summary>
            完整表字段名 = 表名.表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.Alias">
            <summary>
            字段对应的别名
            未标注时从PropertyName获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.ShortAlias">
            <summary>
            短别名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.LinkTableName">
            <summary>
            映射关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.LinkColumnName">
            <summary>
            映射关联表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.LinkFullTableColumnName">
            <summary>
            完整关联表字段名 = 关联表表名.关联表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.LinkParameterName">
            <summary>
            关联表参数名 = 关联表表名_关联表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.LinkGroupName">
            <summary>
            关联表分组名
            如果FieldLinkAttribute.GroupName不赋值, 当检索时指定分组名的话则匹配LinkFullTableColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PropertyName">
            <summary>
            字段对应的属性名
            未标注时从字段名获取并转换为PascalCasing格式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PropertyInfo">
            <summary>
            字段对应的属性信息
            如果为空，说明不存在字段对应的属性
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.Property">
            <summary>
            字段对应的属性
            如果为空，说明不存在字段对应的属性
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PropertyMapInfo">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.Expression">
            <summary>
            字段对应的表达式
            未标注时从Alias获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FriendlyName">
            <summary>
            字段对应的友好名
            未标注时从属性名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InCommand">
            <summary>
            是否用于指令
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.NeedUpdate">
            <summary>
            是否需要提交更新(FieldAttribute.NeedUpdate || IsWatermarkColumn)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.NeedSave">
            <summary>
            是否需要提交保存(InCommand 且 NeedUpdate)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InArchive">
            <summary>
            是否用于归档
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsWatermarkColumn">
            <summary>
            是否水印字段，即仅在insert时被提交更新(FieldAttribute.IsWatermarkColumn || FieldAttribute.IsPrimaryKey || FieldAttribute.IsNewTimeColumn)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.OverwritingOnUpdate">
            <summary>
            指示该字段在Update时做覆盖重写(FieldAttribute.OverwritingOnUpdate || IsInputerInfoColumn || IsDisabledColumn)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsNewTimeColumn">
            <summary>
            指示该字段是"新增时间"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsBusinessCodeColumn">
            <summary>
            指示该字段是"业务码"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.BusinessCodeName">
            <summary>
            业务码名称(当IsBusinessCodeColumn=true时有效)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.BusinessCodeDefaultFormat">
            <summary>
            业务码缺省格式(当IsBusinessCodeColumn=true时有效)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.BusinessCodeCriteriaPropertyName">
            <summary>
            业务码条件属性名称(当IsBusinessCodeColumn=true时有效)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsBusinessCodeCriteriaProperty">
            <summary>
            指示该字段是业务码条件属性名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.FullFriendlyName">
            <summary>
            完整友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsReservedColumn">
            <summary>
            指示该字段是保留字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsOrdinaryColumn">
            <summary>
            是否普通字段(!IsWatermarkColumn 且 !IsInputerInfoColumn 且 !IsDisabledColumn 且 !IsBusinessCodeColumn 且 !IsFillSysdateColumn)
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsOriginatorColumn">
            <summary>
            指示该字段是"制单人"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsOriginateTimeColumn">
            <summary>
            指示该字段是"制单时间"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsInputerColumn">
            <summary>
            指示该字段是"录入人"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsDepartmentColumn">
            <summary>
            指示该字段是"录入人部门"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsPositionColumn">
            <summary>
            指示该字段是"录入人岗位"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsInputTimeColumn">
            <summary>
            指示该字段是"录入时间"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsInputerAddressColumn">
            <summary>
            指示该字段是"录入人地址"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsInputerInfoColumn">
            <summary>
            指示该字段是录入信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsDisabledColumn">
            <summary>
            指示该字段是"禁用"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsCodeColumn">
            <summary>
            指示该字段是"代码"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsNameColumn">
            <summary>
            指示该字段是"名称"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsChineseNameColumn">
            <summary>
            指示该字段是"中文名"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsEnglishNameColumn">
            <summary>
            指示该字段是"英文名"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsFillSysdateColumn">
            <summary>
            指示该字段内容应自动填充自系统时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsDateNotContainTimeColumn">
            <summary>
            指示该字段是"日期(不包含时间部分)"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsDateIsYearMonthColumn">
            <summary>
            指示该字段是"年月(当月的头天零时)"字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsPromptCodeValue">
            <summary>
            指示该字段是提示码值
            配合UI设计期构建下拉框及其配置
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PromptCodeName">
            <summary>
            提示码名称
            配合UI设计期构建下拉框及其配置
            当IsPromptCodeValue=true时有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PermanentExecuteModify">
            <summary>
            指示当处于哪种执行变更时本字段需要记录新旧值
            当 ClassAttribute.PermanentExecuteAction = Phenix.Core.Mapping.ExecuteAction.Update 时才有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InLookUpColumn">
            <summary>
            用于LookUp列
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InLookUpColumnSelect">
            <summary>
            用于LookUp选择列
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.InLookUpColumnDisplay">
            <summary>
            用于LookUp显示列
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IndexNumber">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsRequired">
            <summary>
            是否必输
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.MaximumLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.MinimumLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.TableFilterInfo">
            <summary>
            表过滤器资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PropertyCanPublicRead">
            <summary>
            Property的GetMethod是Public
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.PropertyCanPublicWrite">
            <summary>
            Property的SetMethod是Public
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldMapInfo.SetValue">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.Compare``1(``0,``0)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.Set(System.Object,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="target">目的对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.GetDisplayValue(System.Object)">
            <summary>
            获取显示值
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.IsMaster(Phenix.Core.Mapping.IFieldMapInfo)">
            <summary>
            是否主类数据映射字段信息
            </summary>
            <param name="detailFieldMapInfo">子类数据映射字段信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.IdenticalTableColumn(Phenix.Core.Mapping.IFieldMapInfo)">
            <summary>
            是否拥有相同表字段
            </summary>
            <param name="fieldMapInfo">数据映射字段信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.IdenticalPropertyName(Phenix.Core.Mapping.IFieldMapInfo)">
            <summary>
            是否拥有相同属性名
            </summary>
            <param name="fieldMapInfo">数据映射字段信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.IdenticalMaster(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            是否拥有相同主表
            </summary>
            <param name="linkFieldMapInfo">关联数据映射字段信息</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.CanWrite(System.Boolean)">
            <summary>
            是否允许写
            </summary>
            <param name="isNew">是否新建</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.ExecuteRules(System.Object)">
            <summary>
            为目标对象执行业务规则
            fieldValue = 当前值
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.ExecuteRules(System.Object,System.Object)">
            <summary>
            为目标对象执行业务规则
            </summary>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.CheckRules(System.Object,System.Boolean)">
            <summary>
            为目标对象检查业务规则
            fieldValue = 当前值
            </summary>
            <param name="target">目标对象</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.CheckRules(System.Object,System.Object,System.Boolean)">
            <summary>
            为目标对象检查业务规则
            </summary>
            <param name="target">目标对象</param>
            <param name="fieldValue">字段值</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.DenyRead">
            <summary>
            是否拒绝Read
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.DenyRead(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Read
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.DenyWrite(System.Boolean)">
            <summary>
            是否拒绝Write
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldMapInfo.DenyWrite(System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Write
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldLinkAttribute">
            <summary>
            "数据映射字段关联表信息"标签
            指示该字段是外键及其所关联表的表名、表列名
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldLinkAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="autoLinkType">自动关联类</param>
            <param name="tableName">关联表的表名</param>
            <param name="columnName">关联表的表列名</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldLinkAttribute.#ctor(System.Type)">
            <summary>
            初始化
            </summary>
            <param name="autoLinkType">自动关联类</param>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldLinkAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="tableName">关联表的表名</param>
            <param name="columnName">关联表的表列名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldLinkAttribute.AutoLinkType">
            <summary>
            自动关联类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldLinkAttribute.TableName">
            <summary>
            关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldLinkAttribute.ColumnName">
            <summary>
            关联表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldLinkAttribute.GroupName">
            <summary>
            分组名
            用于区分存在多组外键关联表的情况
            如果不赋值, 当检索时指定分组名的话则匹配字段对应的属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldLinkAttribute.IsValid">
            <summary>
            是否有效
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldUniqueAttribute">
            <summary>
            "数据映射字段唯一键"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldUniqueAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="indexName">索引名</param>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldUniqueAttribute.IndexName">
            <summary>
            索引名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldUniqueAttribute.IsValid">
            <summary>
            是否有效
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.MethodAttribute">
            <summary>
            "数据映射方法"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodAttribute.EnFriendlyName">
            <summary>
            指示该方法对应的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodAttribute.FriendlyName">
            <summary>
            指示该方法对应的友好名; 如果为空, 则认为从方法名获取
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnFriendlyName
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodAttribute.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodAttribute.InAuthorization">
            <summary>
            用于授权
            缺省为 false
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.MethodMapInfo">
            <summary>
            数据映射方法信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.ClassMapInfo">
            <summary>
            数据映射类信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.Method">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.MethodAttribute">
            <summary>
            方法标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.FriendlyName">
            <summary>
            方法对应的友好名
            未标注时从方法名获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.MethodName">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.MethodInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.MethodMapInfo.Execute">
            <summary>
            动态执行函数的委托函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodMapInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodMapInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodMapInfo.DenyExecute">
            <summary>
            是否拒绝执行
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.MethodMapInfo.DenyExecute(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝执行
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.OperationSign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Length">
            <summary>
            字符数
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.ToLower">
            <summary>
            转换为小写形式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.ToUpper">
            <summary>
            转换为大写形式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.TrimStart">
            <summary>
            去除字符串左边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.TrimEnd">
            <summary>
            去除字符串右边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Trim">
            <summary>
            去除字符串左右两边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OperationSign.Substring">
            <summary>
            截取字符串
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.OracleOptimizerMode">
            <summary>
            Oracle优化模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OracleOptimizerMode.Default">
            <summary>
            缺省方式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OracleOptimizerMode.Rule">
            <summary>
            基于规则的方式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OracleOptimizerMode.Choose">
            <summary>
            当一个表或或索引有统计信息，则走CBO的方式，如果表或索引没统计信息，表又不是特别的小，而且相应的列有索引时，那么就走索引，走RBO的方式
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OracleOptimizerMode.FirstRows">
            <summary>
            当一个表有统计信息时，它将是以最快的方式返回查询的最先的几行，从总体上减少了响应时间
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OracleOptimizerMode.AllRows">
            <summary>
            当一个表有统计信息时，它将以最快的方式返回表的所有的行，从总体上提高查询的吞吐量。没有统计信息则走RBO的方式
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.OrderBy">
            <summary>
            数据排列顺序
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OrderBy.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Phenix.Core.Mapping.OrderBy.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.ClassAttribute">
            <summary>
            "数据映射类"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.ClassAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="tableName">指示该类是映射哪张表</param>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.DataSourceKey">
            <summary>
            数据源键
            用于分数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.TableName">
            <summary>
            指示该类是映射哪张(主)表
            如果关联了多个表，那么本属性指示的是主表，提交对象的增删改结果时将会针对主表进行持久化
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.EnFriendlyName">
            <summary>
            指示该类的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.FriendlyName">
            <summary>
            指示该类的友好名
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnCaption
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.FetchScript">
            <summary>
            为自动构建业务对象集合提供select语句, 语句中字段别名在类字段上用 FieldAttribute.Alias 标注
            也可以直接提供视图名, 视图语句中字段别名在类字段上用 FieldAttribute.Alias 标注, 而实际映射的表字段名用 FieldAttribute.ColumnName 标注
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.DefaultCriteriaType">
            <summary>
            缺省条件类
            缺省为 同名后缀Criteria的类
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.PermanentExecuteAction">
            <summary>
            指示当处于哪种执行动作时本字段需要记录新旧值
            缺省为 Phenix.Core.Mapping.ExecuteAction.None
            当包含 Phenix.Core.Mapping.ExecuteAction.Update 时需结合 FieldAttribute.PermanentExecuteModify 才有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.NeedPermanentRenovate">
            <summary>
            指示需要持久化动态刷新
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.SequenceFromServer">
            <summary>
            是否从服务器获取序号
            在New业务对象时为PrimaryKey字段赋服务器上的唯一值, 这在本地处于多进程环境里是更加稳妥的
            缺省为 false, 也就是从本地(一个进程有一个)序号生成器获取，性能高
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.AllowIgnoreCheckDirty">
            <summary>
            允许忽略校验数据库数据在下载到提交期间是否被更改过
            缺省为 false, 一旦发现将直接抛出异常: CheckSaveException, 即禁止关闭乐观锁验证机制
            设置为 true 时, 会抛出异常: CheckDirtyException, 客户端可依此提示用户是否强制保存，即再次Save()时，传入needCheckDirty参数=false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.OracleOptimizerMode">
            <summary>
            Oracle优化模式
            缺省为 Phenix.Core.Mapping.OracleOptimizerMode.Default
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.ClassAttribute.OnAnonymity">
            <summary>
            是否允许匿名
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.Mapper">
            <summary>
            数据映射
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.AssembleSelectSql(System.Type)">
            <summary>
            拼装select语句
            仅拼装非只读select语句
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetSelectCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ICriterions)">
            <summary>
            设置select指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetSelectCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.SelectSqlType)">
            <summary>
            设置select指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetInsertCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            拼装insert语句
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetInsertCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ClassMapInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            拼装insert语句
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetInsertArchiveCommand(System.Data.Common.DbCommand,System.Object)">
            <summary>
            拼装insert归档语句
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.IEntity,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置update指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置update指令
            oldFieldValues = null
            needCheckDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置update指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置update指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ClassMapInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置update指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetUpdateArchiveCommand(System.Data.Common.DbCommand,System.Object)">
            <summary>
            设置update归档指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ICriterions)">
            <summary>
            设置delete指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.IEntity,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置delete指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置delete指令
            oldFieldValues = null
            needCheckDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置delete指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ClassMapInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置delete指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDisableCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.IEntity,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions},System.Boolean)">
            <summary>
            设置delete指令
            needCheckDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDisableCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions},System.Boolean)">
            <summary>
            设置disable指令
            oldFieldValues = null
            needCheckDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDisableCommand(System.Data.Common.DbCommand,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions},System.Boolean)">
            <summary>
            设置disable指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDisableCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ClassMapInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            设置disable指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.Mapper.SetDeleteDetailCommand(System.Data.Common.DbCommand,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IList{Phenix.Core.Mapping.ICriterions})">
            <summary>
            设置delete指令
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldAttribute">
            <summary>
            "数据映射字段"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.NoMapping">
            <summary>
            指示该字段不参与映射关系
            主要用于区分在名称相同的情况下的非数据库映射字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.TableName">
            <summary>
            指示该字段对应的表名; 如果为空, 则认为从ClassAttribute.TableName获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.ColumnName">
            <summary>
            指示该字段对应的表列名; 如果为空, 则认为从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.Alias">
            <summary>
            指示该字段对应的别名; 如果为空, 则认为从PropertyName获取
            当 ClassAttribute.FetchScript 中存在字段别名时, 应该与之对应
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.Expression">
            <summary>
            指示该字段对应的表达式; 如果为空, 则认为从Alias获取
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.PropertyName">
            <summary>
            指示该字段对应的属性名; 如果为空, 则认为从字段名获取，获取方法为：字段名第一个字符如果为'_'将被裁剪掉, 如果是IsLower字符则被ToUpper
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.EnFriendlyName">
            <summary>
            指示该字段的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.FriendlyName">
            <summary>
            指示该字段的友好名
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnCaption
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsPrimaryKey">
            <summary>
            指示该字段是主键
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsNewTimeColumn">
            <summary>
            指示该字段是"新增时间"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultNewTimeColumnName 时必定是新增时间, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsWatermarkColumn">
            <summary>
            是否水印字段，即仅在insert时被提交更新(当所属类表名和字段表名一致时有效)
            缺省为 false
            IsPrimaryKey、IsNewTimeColumn的字段必定是水印字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.NeedUpdate">
            <summary>
            指示该字段需要提交更新(当所属类表名和字段表名一致时有效)
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.OverwritingOnUpdate">
            <summary>
            指示该字段在Update时做覆盖重写(当非水印字段且所属类表名和字段表名一致时有效)
            缺省为 false, 仅当(对象内)新旧值存在差异时才更新
            IsInputerInfoColumn、IsDisabledColumn的字段必定做覆盖重写
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.AllowReservedColumn">
            <summary>
            是否允许作为保留字段使用
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsBusinessCodeColumn">
            <summary>
            指示该字段是业务码
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultBusinessCodeColumnName 时必定是业务码, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.BusinessCodeName">
            <summary>
            业务码名称
            缺省为所属类名.字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.BusinessCodeDefaultFormat">
            <summary>
            业务码缺省格式
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.BusinessCodeCriteriaPropertyName">
            <summary>
            业务码条件属性名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsRedundanceColumn">
            <summary>
            指示该字段是冗余字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsOriginatorColumn">
            <summary>
            指示该字段是"制单人"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultOriginatorColumnName 时必定是制单人, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsOriginateTimeColumn">
            <summary>
            指示该字段是"制单时间"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultOriginateTimeColumnName 时必定是制单时间, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsInputerColumn">
            <summary>
            指示该字段是"输入人"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultInputerColumnName 时必定是输入人, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsDepartmentColumn">
            <summary>
            指示该字段是"部门"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultDepartmentColumnName 时必定是部门, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsPositionColumn">
            <summary>
            指示该字段是"岗位"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultPositionColumnName 时必定是岗位, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsInputTimeColumn">
            <summary>
            指示该字段是"输入时间"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultInputTimeColumnName 时必定是输入时间, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsInputerAddressColumn">
            <summary>
            指示该字段是"输入人地址"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultInputerAddressColumnName 时必定是输入人地址, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsDisabledColumn">
            <summary>
            指示该字段是禁用字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultDisabledColumnName 时必定是禁用字段, 除非AllowReservedColumn = false
            删除对象时, 仅将禁用字段置为Phenix.Core.Mapping.CodingStandards.DefaultDisabledTrueValue
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsCodeColumn">
            <summary>
            指示该字段是"代码"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultCodeColumnName 时必定是代码, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsNameColumn">
            <summary>
            指示该字段是"名称"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultNameColumnName 时必定是名称, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsChineseNameColumn">
            <summary>
            指示该字段是"中文名"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultChineseNameColumnName 时必定是中文名, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsEnglishNameColumn">
            <summary>
            指示该字段是"英文名"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultEnglishNameColumnName 时必定是英文名, 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsFillSysdateColumn">
            <summary>
            指示该字段内容应自动填充自系统时间
            缺省为 false
            IsInputTimeColumn且!CheckDirtyOnSaving、IsNewTimeColumn的字段必定是自动填充自系统时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsDateNotContainTimeColumn">
            <summary>
            指示该字段是"日期(不包含时间部分)"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultDateNotContainTimeColumnName 时必定是日期(不包含时间部分), 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsDateIsYearMonthColumn">
            <summary>
            指示该字段是"年月(当月的头天零时)"字段
            当 ColumnName 包含 Phenix.Core.Mapping.CodingStandards.DefaultDateIsYearMonthColumnName 时必定是年月(当月的头天零时), 除非AllowReservedColumn = false
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.IsPromptCodeValue">
            <summary>
            指示该字段是提示码值
            配合UI设计期构建下拉框及其配置
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.CheckDirtyOnSaving">
            <summary>
            指示该字段在提交保存时校验数据库数据在下载到保存期间是否被更改过, 一旦发现将报错: CheckDirtyException
            缺省为 false
            当为 true 时用于乐观锁验证机制
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.PermanentExecuteModify">
            <summary>
            指示当处于哪种执行变更时本字段需要记录新旧值
            缺省为 Phenix.Core.Mapping.ExecuteModify.All
            当 ClassAttribute.PermanentExecuteAction = Phenix.Core.Mapping.ExecuteAction.Update 时才有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.FieldConfineType">
            <summary>
            字段约束类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InAuthorization">
            <summary>
            用于授权
            缺省为 false
            当 FieldConfineType = FieldConfineType.Normal 时才有效
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InValidation">
            <summary>
            用于校验
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InTableFilter">
            <summary>
            用于表过滤器
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InLookUpColumn">
            <summary>
            用于LookUp列
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InLookUpColumnSelect">
            <summary>
            用于LookUp选择列
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldAttribute.InLookUpColumnDisplay">
            <summary>
            用于LookUp显示列
            缺省为 false
            </summary>
        </member>
        <member name="T:Phenix.Core.Mapping.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldValue.#ctor(Phenix.Core.Mapping.FieldMapInfo,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="fieldMapInfo">数据映射字段信息</param>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldValue.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Mapping.FieldValue.IsDirty">
            <summary>
            是否脏属性?
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldValue.GetFieldMapInfo">
            <summary>
            取数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldValue.GetFieldMapInfo(System.Type)">
            <summary>
            取数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Mapping.FieldValue.EqualProperty(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            是否关联相同的属性
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7">
            <summary>
            Rijndael加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.Byte[])">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.IO.Stream)">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.String,System.String,System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider7.Decrypt(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7">
            <summary>
            RSA加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.CreateKeyPair">
            <summary>
            生成公钥私钥对
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.CreateKeyPair(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            生成公钥私钥对
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="publicKey">公钥</param>
            <param name="sourceText">原文</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.Encrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="publicKey">公钥</param>
            <param name="sourceText">原文</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="privateKey">私钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider7.Decrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="privateKey">私钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.KeyPair">
            <summary>
            公钥密钥对
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Cryptography.KeyPair.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Cryptography.KeyPair.PrivateKey">
            <summary>
            密钥
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.MD5CryptoTextProvider">
            <summary>
            MD5加密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.MD5CryptoTextProvider.ComputeHash(System.String)">
            <summary>
            取Hash字符串
            toUpper = true
            </summary>
            <param name="value">需加密的字符串</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.MD5CryptoTextProvider.ComputeHash(System.String,System.Boolean)">
            <summary>
            取Hash字符串
            </summary>
            <param name="value">需加密的字符串</param>
            <param name="toUpper">返回大写字符串</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider">
            <summary>
            Rijndael加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需解密的字节数组</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="value">需解密的字节串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="value">需解密的字节串</param>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RSACryptoTextProvider">
            <summary>
            RSA加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair">
            <summary>
            生成公钥密钥对
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair(System.Int32)">
            <summary>
            生成公钥密钥对
            </summary>
            <param name="dwKeySize">密钥尺寸</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair(System.Security.Cryptography.CspParameters)">
            <summary>
            生成公钥密钥对
            </summary>
            <param name="parameters">服务参数</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair(System.Int32,System.Security.Cryptography.CspParameters)">
            <summary>
            生成公钥密钥对
            </summary>
            <param name="dwKeySize">密钥尺寸</param>
            <param name="parameters">服务参数</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            生成公钥密钥对
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="publicKey">公钥</param>
            <param name="value">需加密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Encrypt(System.Security.Cryptography.CspParameters,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="parameters">服务参数</param>
            <param name="value">需加密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Encrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="publicKey">公钥</param>
            <param name="value">需加密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="privateKey">密钥</param>
            <param name="value">需加密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Decrypt(System.Security.Cryptography.CspParameters,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="parameters">服务参数</param>
            <param name="value">需加密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Decrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="privateKey">密钥</param>
            <param name="value">需解密的字符串</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.AesCryptoTextProvider">
            <summary>
            AES加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需解密的字节数组</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="value">需解密的字节串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="value">需解密的字节串</param>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.DesCryptoTextProvider">
            <summary>
            DES加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需加密的字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="value">需解密的字节数组</param>
        </member>
        <member name="T:Phenix.Core.Security.UserPasswordComplexityException">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor(System.String)">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor(System.String,System.Exception)">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor(System.Int32,System.Int32)">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor(Phenix.Core.Security.UserIdentity,System.Int32,System.Int32)">
            <summary>
            用户口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPasswordComplexityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserPasswordComplexityException.Identity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.UserLockedException">
            <summary>
            账户锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserLockedException.#ctor">
            <summary>
            账户锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserLockedException.#ctor(System.String)">
            <summary>
            账户锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserLockedException.#ctor(System.String,System.Exception)">
            <summary>
            账户锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserLockedException.#ctor(System.String,System.String)">
            <summary>
            账户锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Exception.UserNotFoundException">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Exception.UserNotFoundException.#ctor">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Exception.UserNotFoundException.#ctor(System.String)">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Exception.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Exception.UserNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.UserPrincipal">
            <summary>
            用户对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPrincipal.#ctor(Phenix.Core.Security.UserIdentity)">
            <summary>
            初始化
            </summary>
            <param name="identity">用户身份</param>
        </member>
        <member name="M:Phenix.Core.Security.UserPrincipal.CreateTester">
            <summary>
            构建测试用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserPrincipal.Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserPrincipal.Phenix#Core#Security#IPrincipal#Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserPrincipal.System#Security#Principal#IPrincipal#Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserPrincipal.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserPrincipal.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
        </member>
        <member name="T:Phenix.Core.Security.Windows.RolesSelectDialog">
            <summary>
            选择角色对话框
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RolesSelectDialog.Execute(Phenix.Core.Security.IIdentity)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RolesSelectDialog.Execute(System.String,Phenix.Core.Security.IIdentity)">
            <summary>
            执行
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Windows.RolesSelectDialog.ROLE_SEPARATOR">
            <summary>
            值分隔符
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.RolesSelectDialog.SelectedRoles">
            <summary>
            被选择的角色清单
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Windows.RolesSelectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RolesSelectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RolesSelectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Windows.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.RoleSelect">
            <summary>
              查找类似 role select 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.RolesSelect">
            <summary>
              查找类似 roles select 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.SelectedRoles">
            <summary>
              查找类似 selected roles 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.Resources.UnselectedRoles">
            <summary>
              查找类似 unselect roles 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Windows.RoleSelectDialog">
            <summary>
            选择角色对话框
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RoleSelectDialog.Execute(System.String)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RoleSelectDialog.Execute(System.String,Phenix.Core.Security.IIdentity)">
            <summary>
            执行
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Windows.RoleSelectDialog.SelectedRole">
            <summary>
            被选择的角色
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Windows.RoleSelectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RoleSelectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Security.Windows.RoleSelectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.DataSecurityContext">
            <summary>
            数据安全上下文
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityContext.#ctor(Phenix.Core.Security.UserIdentity)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityContext.#ctor(Phenix.Core.Security.UserIdentity,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityContext.#ctor(Phenix.Core.Security.UserIdentity,System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityContext.InternalAuthenticationType">
            <summary>
            内部身份验证类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityContext.Identity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityContext.SystemDate">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityContext.Hosts">
            <summary>
            可登陆的服务器IP地址(由AppSettings.Separator分隔)集合
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityContext.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.DataSecurityHub">
            <summary>
            数据安全中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityHub.AllowUserMultipleAddressLogin">
            <summary>
            允许用户多IP登录
            不控制Guest用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityHub.SessionExpiresMinutes">
            <summary>
            会话过期时间(分钟)
            小于等于0不限制
            不控制Guest用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityHub.EmptyRolesIsDeny">
            <summary>
            未配置角色代表授权规则为禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DataSecurityHub.EasyAuthorization">
            <summary>
            宽松的授权
            true: 只要用户拥有的角色之一不在禁用角色队列里，就不被禁用
            false: 只要用户拥有的角色之一在禁用角色队列里，就被禁用
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetRoleInfos">
            <summary>
            取角色资料队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetRoleInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取角色资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetGrantRoleInfos">
            <summary>
            取可授权角色资料队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetGrantRoleInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取可授权角色资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetSectionInfos">
            <summary>
            取切片资料队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetSectionInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取切片资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetIdentities(Phenix.Core.Security.DepartmentInfo,System.Collections.Generic.IList{Phenix.Core.Security.PositionInfo})">
            <summary>
            取部门岗位的用户身份
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetIdentities(Phenix.Core.Security.DepartmentInfo,System.Collections.Generic.IList{Phenix.Core.Security.PositionInfo},Phenix.Core.Security.UserIdentity)">
            <summary>
            取部门岗位的用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetIdentities(System.Int64,System.Collections.Generic.IList{System.Int64},Phenix.Core.Security.UserIdentity)">
            <summary>
            取部门岗位的用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.CheckIn(System.Type,Phenix.Core.Mapping.ExecuteAction,System.Security.Principal.IPrincipal)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.CheckIn(System.Type,Phenix.Core.Mapping.ExecuteAction,Phenix.Core.Security.UserIdentity)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.CheckIn(Phenix.Core.Security.UserIdentity,System.Boolean)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.CheckIn(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.LogOnVerify(System.String,System.String)">
            <summary>
            登录核实
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.LogOff(Phenix.Core.Security.UserIdentity)">
            <summary>
            登出
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.ChangePassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            修改登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.ChangePassword(System.String,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            修改登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.UnlockPassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            解锁登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.ResetPassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            重置登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.SetProcessLockInfo(System.String,System.String,System.Boolean,System.TimeSpan,System.String)">
            <summary>
            设置过程锁资料
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.SetProcessLockInfo(System.String,System.String,System.Boolean,System.TimeSpan,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            设置过程锁资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetProcessLockInfo(System.String)">
            <summary>
            取过程锁资料
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.GetProcessLockInfo(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            取过程锁资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.AddUser(System.Data.Common.DbTransaction,System.String,System.String,System.String)">
            <summary>
            添加用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.AddUser(System.Data.Common.DbTransaction,System.Int64,System.String,System.String,System.String)">
            <summary>
            添加用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DataSecurityHub.ChangePassword(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            重置登录口令
            </summary>
            <returns>找到登录工号并重置成功</returns>
        </member>
        <member name="T:Phenix.Core.Security.DepartmentInfo">
            <summary>
            部门资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.DepartmentInfo.#ctor(System.Int64,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.Superior">
            <summary>
            上级(一级)部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.RootSuperior">
            <summary>
            顶级部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.AllSuperior">
            <summary>
            上级(全部)部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.Subordinates">
            <summary>
            下级(一级)部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.AllSubordinates">
            <summary>
            下级(全部)部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.PositionTree">
            <summary>
            岗位树
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.AllPositions">
            <summary>
            全部岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.DepartmentInfo.InHeadquarters">
            <summary>
            是否属于总部
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.IDataSecurity">
            <summary>
            数据安全接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IDataSecurity.AllowUserMultipleAddressLogin">
            <summary>
            允许用户多IP登录
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IDataSecurity.SessionExpiresMinutes">
            <summary>
            会话过期时间(分钟)
            小于等于0不限制
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IDataSecurity.EmptyRolesIsDeny">
            <summary>
            未配置角色代表授权规则为禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IDataSecurity.EasyAuthorization">
            <summary>
            宽松的授权
            true: 只要用户拥有的角色之一不在禁用角色队列里，就不被禁用
            false: 只要用户拥有的角色之一在禁用角色队列里，就被禁用
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.GetRoleInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取角色资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.GetGrantRoleInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取可授权角色资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.GetSectionInfos(Phenix.Core.Security.UserIdentity)">
            <summary>
            取切片资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.GetIdentities(System.Int64,System.Collections.Generic.IList{System.Int64},Phenix.Core.Security.UserIdentity)">
            <summary>
            取部门岗位的用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.CheckIn(Phenix.Core.Security.UserIdentity,System.Boolean)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.CheckIn(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.LogOnVerify(System.String,System.String)">
            <summary>
            登录核实
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.LogOff(Phenix.Core.Security.UserIdentity)">
            <summary>
            登出
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.ChangePassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            修改登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.UnlockPassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            解锁登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.ResetPassword(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            重置登录口令
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.SetProcessLockInfo(System.String,System.String,System.Boolean,System.TimeSpan,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            设置过程锁资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.GetProcessLockInfo(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            提取过程锁资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.AddUser(System.Data.Common.DbTransaction,System.Int64,System.String,System.String,System.String)">
            <summary>
            添加用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IDataSecurity.ChangePassword(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            重置登录口令
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.IIdentity">
            <summary>
            用户身份接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.IsGuest">
            <summary>
            是否匿名用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.IsAdmin">
            <summary>
            是否管理员
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.HaveAdminRole">
            <summary>
            拥有管理员角色?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Enterprise">
            <summary>
            所属企业
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.DepartmentId">
            <summary>
            所属部门ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Department">
            <summary>
            所属部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.PositionId">
            <summary>
            担任岗位ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Position">
            <summary>
            担任岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Superiors">
            <summary>
            上级(一级)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.AllSuperiors">
            <summary>
            上级(全部)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Workmates">
            <summary>
            工友
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Subordinates">
            <summary>
            下级(一级)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.AllSubordinates">
            <summary>
            下级(全部)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Roles">
            <summary>
            角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.GrantRoles">
            <summary>
            可授权角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IIdentity.Sections">
            <summary>
            切片资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.HaveSuperior(System.String)">
            <summary>
            是上级
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.HaveSubordinate(System.String)">
            <summary>
            是下属
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.GetSectionNames(System.Type)">
            <summary>
            取本用户可操作的类所关联切片
            null代表不存在切片
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.GetSectionNames(System.Type,System.Type)">
            <summary>
            取本用户可操作的类及其条件类所关联切片
            null代表不存在切片
            </summary>
            <param name="objectType">类</param>
            <param name="criteriaType">条件类</param>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.AllowSet(Phenix.Core.Security.ISecurityInfo)">
            <summary>
            是否允许设置数据
            只读则为false
            </summary>
            <param name="info">数据</param>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.AllowSet(System.Object)">
            <summary>
            是否允许设置数据
            只读则为false
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
        </member>
        <member name="M:Phenix.Core.Security.IIdentity.IsByDeny(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            确定是否被拒绝
            </summary>
            <param name="allowRoles">可用角色队列</param>
            <param name="denyRoles">禁用角色队列</param>
        </member>
        <member name="T:Phenix.Core.Security.ISecurityInfo">
            <summary>
            安全数据接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ISecurityInfo.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.UserVerifyException">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserVerifyException.#ctor">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserVerifyException.#ctor(System.String)">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserVerifyException.#ctor(System.Exception)">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserVerifyException.#ctor(System.String,System.Exception)">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserVerifyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.IPrincipal">
            <summary>
            用户接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.IPrincipal.Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.PositionInfo">
            <summary>
            岗位资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.PositionInfo.#ctor(System.Int64,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.Superior">
            <summary>
            上级(一级)岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.AllSuperior">
            <summary>
            上级(全部)岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.Subordinates">
            <summary>
            下级(一级)岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.PositionInfo.AllSubordinates">
            <summary>
            下级(全部)岗位
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.ProcessLockException">
            <summary>
            过程锁异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.#ctor">
            <summary>
            过程锁异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.#ctor(System.String)">
            <summary>
            过程锁异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.#ctor(System.String,System.Exception)">
            <summary>
            过程锁异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.#ctor(Phenix.Core.Security.ProcessLockInfo)">
            <summary>
            过程锁异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockException.Info">
            <summary>
            过程锁资料
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.ProcessLockInfo">
            <summary>
            过程锁资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockInfo.#ctor(System.String,System.String,System.Boolean,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            过程锁资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.ProcessName">
            <summary>
            过程名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.Locking">
            <summary>
            锁住?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.ExpiryTime">
            <summary>
            限期
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.ProcessLockInfo.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.ProcessLockInfo.AllowSet(Phenix.Core.Security.IIdentity)">
            <summary>
            是否允许操作
            </summary>
            <param name="identity">用户身份</param>
        </member>
        <member name="T:Phenix.Core.Security.UserIdentity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.CreateTester">
            <summary>
            构建测试用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.CreateUnauthenticated(System.Int64,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            构建未验证用户
            </summary>
            <param name="userId">用户ID</param>
            <param name="userName">用户名称</param>
            <param name="userNumber">登录工号</param>
            <param name="departmentId">部门ID</param>
            <param name="positionId">岗位ID</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.CreateAuthenticated(System.Int64,System.String,System.String,System.String,System.String,System.Int64,System.String,System.String,System.DateTime,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            构建验证用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.CreateGuest">
            <summary>
            构建匿名用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.GuestId">
            <summary>
            匿名用户ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.GuestUserName">
            <summary>
            匿名用户名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.GuestUserNumber">
            <summary>
            匿名用户登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.IsGuest">
            <summary>
            是否匿名用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AdminId">
            <summary>
            管理员ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AdminUserName">
            <summary>
            管理员名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AdminUserNumber">
            <summary>
            管理员登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AdminRoleName">
            <summary>
            管理员角色名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.IsAdmin">
            <summary>
            是否管理员
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.HaveAdminRole">
            <summary>
            是否拥有管理员角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AuthenticationType">
            <summary>
            身份验证类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.IsAuthenticated">
            <summary>
            已验证?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AuthenticatedMessage">
            <summary>
            验证消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Password">
            <summary>
            登录口令
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.DynamicPassword">
            <summary>
            登录口令
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.ServerVersion">
            <summary>
            服务器版本
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.LocalAddress">
            <summary>
            本地IP地址
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.ServicesAddress">
            <summary>
            服务IP地址
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Enterprise">
            <summary>
            所属企业
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.DepartmentId">
            <summary>
            所属部门ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Department">
            <summary>
            所属部门
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.PositionId">
            <summary>
            担任岗位ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Position">
            <summary>
            担任岗位
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Superiors">
            <summary>
            上级(一级)
            (本部门的)上级岗位的用户、(本部门根岗位用户的)上级部门根岗位的用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AllSuperiors">
            <summary>
            上级(全部)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Workmates">
            <summary>
            工友
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Subordinates">
            <summary>
            下级(一级)
            (本部门的)下级岗位的用户、(本部门根岗位用户的)下级部门根岗位的用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AllSubordinates">
            <summary>
            下级(全部)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Roles">
            <summary>
            角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.GrantRoles">
            <summary>
            可授权角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Sections">
            <summary>
            切片资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.CultureName">
            <summary>
            区域性名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.Signature">
            <summary>
            签名
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.LastOperationTime">
            <summary>
            最后活动时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.AllowUserMultipleAddressLogin">
            <summary>
            允许用户多IP登录
            不控制Guest用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.SessionExpiresMinutes">
            <summary>
            会话过期时间(分钟)
            小于等于0不限制
            不控制Guest用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.EmptyRolesIsDeny">
            <summary>
            (用户/功能)未配置角色代表授权规则为禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.EasyAuthorization">
            <summary>
            宽松的授权
            缺省为 false
            true: 只要用户拥有的角色之一不在禁用角色队列里，就不被禁用
            false: 只要用户拥有的角色之一在禁用角色队列里，就被禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.UserIdentity.CurrentIdentity">
            <summary>
            当前用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.HaveSuperior(System.String)">
            <summary>
            拥有上级
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.HaveSubordinate(System.String)">
            <summary>
            拥有下属
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.LockProcess(System.String,System.String,System.String)">
            <summary>
            过程加锁
            expiryTime = TimeSpan.Zero代表不自动失效
            </summary>
            <param name="processName">过程名</param>
            <param name="caption">标签</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.LockProcess(System.String,System.String,System.TimeSpan,System.String)">
            <summary>
            过程加锁
            </summary>
            <param name="processName">过程名</param>
            <param name="caption">标签</param>
            <param name="expiryTime">限期, TimeSpan.Zero代表不自动失效</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.UnlockProcess(System.String)">
            <summary>
            过程解锁
            remark = null
            </summary>
            <param name="processName">过程名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.UnlockProcess(System.String,System.String)">
            <summary>
            过程解锁
            </summary>
            <param name="processName">过程名</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetProcessLockInfo(System.String)">
            <summary>
            取过程锁资料
            </summary>
            <param name="processName">过程名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.AllowSetProcessLockInfo(System.String)">
            <summary>
            是否允许操作过程锁
            </summary>
            <param name="processName">过程名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.AllowSetProcessLockInfo(Phenix.Core.Security.ProcessLockInfo)">
            <summary>
            是否允许操作过程锁
            </summary>
            <param name="info">过程锁资料</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.SetFieldDefaultValue(System.String,System.Object)">
            <summary>
            设置正则表达式字段缺省值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <param name="value">缺省值</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.RemoveFieldDefaultValue(System.String)">
            <summary>
            删除正则表达式字段缺省值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <returns>是否删除</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetFieldDefaultValue(System.String)">
            <summary>
            获取正则表达式字段缺省值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <returns>字段缺省值</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetFieldDefaultValue(Phenix.Core.Mapping.FieldMapInfo)">
            <summary>
            获取字段缺省值
            </summary>
            <param name="fieldMapInfo">数据映射字段</param>
            <returns>字段缺省值</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.FindFilterFieldValues(Phenix.Core.Mapping.IFieldMapInfo)">
            <summary>
            获取过滤字段值队列
            </summary>
            <param name="fieldMapInfo">数据映射字段</param>
            <returns>字段值队列</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.RegisterFilterFieldValue(System.String,System.Object[])">
            <summary>
            注册正则表达式过滤字段值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <param name="fieldValues">字段值</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.HaveRegisteredFilterFieldValue(System.String,System.Object)">
            <summary>
            存在注册的正则表达式过滤字段值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.UnregisterFilterFieldValue(System.String,System.Object[])">
            <summary>
            注销正则表达式过滤字段值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <param name="fieldValues">字段值</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetRegisteredFilterFieldValues(System.String)">
            <summary>
            获取注册的正则表达式过滤字段值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.SetSingleFilterFieldValue(System.String,System.Object)">
            <summary>
            设置单一的正则表达式过滤字段值
            设置后将禁用RegisterFilterFieldValue注册内容
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.RemoveSingleFilterFieldValue(System.String)">
            <summary>
            删除单一的正则表达式过滤字段值
            删除后将恢复RegisterFilterFieldValue注册内容
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetSingleFilterFieldValue(System.String)">
            <summary>
            获取单一的正则表达式过滤字段值
            </summary>
            <param name="regexColumnName">正则表达式字段名</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetSectionNames(System.Type)">
            <summary>
            取本用户可操作的类所关联切片
            null代表不存在切片
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.GetSectionNames(System.Type,System.Type)">
            <summary>
            取本用户可操作的类及其条件类所关联切片
            null代表不存在切片
            </summary>
            <param name="objectType">类</param>
            <param name="criteriaType">条件类</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.AllowSet(Phenix.Core.Security.ISecurityInfo)">
            <summary>
            是否允许设置数据
            只读则为false
            </summary>
            <param name="info">数据</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.AllowSet(System.Object)">
            <summary>
            是否允许设置数据
            只读则为false
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsByDeny(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            确定是否被拒绝
            </summary>
            <param name="allowRoles">可用角色队列</param>
            <param name="denyRoles">禁用角色队列</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsByDeny(Phenix.Core.Security.UserIdentity,System.Type,System.String,System.Boolean)">
            <summary>
            确定是否被拒绝
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsByDeny(Phenix.Core.Security.UserIdentity,System.Object,Phenix.Core.Mapping.MethodAction,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            确定是否被拒绝
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsByDeny(Phenix.Core.Security.UserIdentity,System.Type,Phenix.Core.Mapping.ExecuteAction,System.Boolean)">
            <summary>
            确定是否被拒绝
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsByDeny(Phenix.Core.Security.UserIdentity,Phenix.Core.Mapping.ClassMapInfo,Phenix.Core.Mapping.ExecuteAction,System.Boolean)">
            <summary>
            确定是否被拒绝
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsInDepartments(System.Collections.Generic.IList{System.Int64})">
            <summary>
            确定是否属于指定的部门
            </summary>
            <param name="departmentIds">部门ID</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.IsGuestUserNumber(System.String)">
            <summary>
            是Guest工号
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.CheckIn(Phenix.Core.Security.UserIdentity,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            CheckIn
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.LogOff">
            <summary>
            登出
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.ChangePassword(System.String)">
            <summary>
            修改登录口令
            </summary>
            <param name="newPassword">新登录口令</param>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.UnlockPassword(System.String)">
            <summary>
            解锁登录口令
            </summary>
            <returns>找到登录工号并解锁成功</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.ResetPassword(System.String)">
            <summary>
            重置登录口令
            </summary>
            <returns>找到登录工号并重置成功</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.ResetPassword(System.Data.Common.DbTransaction,System.String)">
            <summary>
            重置登录口令
            </summary>
            <returns>找到登录工号并重置成功</returns>
        </member>
        <member name="M:Phenix.Core.Security.UserIdentity.ChangePassword(System.Data.Common.DbTransaction,System.String,System.String)">
            <summary>
            重置登录口令
            </summary>
            <returns>找到登录工号并重置成功</returns>
        </member>
        <member name="T:Phenix.Core.Web.AppHub">
            <summary>
            应用中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.AppHub.SecurityProxy">
            <summary>
            安全代理
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.AppHub.DataProxy">
            <summary>
            数据代理
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.AppHub.MessageProxy">
            <summary>
            消息代理
            </summary>
        </member>
        <member name="T:Phenix.Core.Web.IDataProxy">
            <summary>
            数据代理接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.IDataProxy.HttpClient">
            <summary>
            HttpClient
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchSequenceValueAsync">
            <summary>
            获取64位序号
            </summary>
            <returns>64位序号</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchSequenceValue">
            <summary>
            获取64位序号
            </summary>
            <returns>64位序号</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanFetchAsync``1">
            <summary>
            是否允许Fetch
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanFetchAsync``1(System.String)">
            <summary>
            是否允许Fetch
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanFetch``1">
            <summary>
            是否允许Fetch
            </summary>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanFetch``1(System.String)">
            <summary>
            是否允许Fetch
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanCreateAsync``1">
            <summary>
            是否允许Create
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanCreateAsync``1(System.String)">
            <summary>
            是否允许Create
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanCreate``1">
            <summary>
            是否允许Create
            </summary>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanCreate``1(System.String)">
            <summary>
            是否允许Create
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanEditAsync``1">
            <summary>
            是否允许Edit
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanEditAsync``1(System.String)">
            <summary>
            是否允许Edit
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanEdit``1">
            <summary>
            是否允许Edit
            </summary>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanEdit``1(System.String)">
            <summary>
            是否允许Edit
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanDeleteAsync``1">
            <summary>
            是否允许Delete
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanDeleteAsync``1(System.String)">
            <summary>
            是否允许Delete
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanDelete``1">
            <summary>
            是否允许Delete
            </summary>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanDelete``1(System.String)">
            <summary>
            是否允许Delete
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体/实体集合类全名(需实现IEntity/IEntityCollection接口)</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanExecuteAsync``1">
            <summary>
            是否允许Execute
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanExecuteAsync``1(System.String)">
            <summary>
            是否允许Execute
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanExecute``1">
            <summary>
            是否允许Execute
            </summary>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.CanExecute``1(System.String)">
            <summary>
            是否允许Execute
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchAsync``1(System.Int64)">
            <summary>
            获取实体
            </summary>
            <param name="id">主键值</param>
            <returns>实体</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchAsync``1(System.String,System.Int64)">
            <summary>
            获取实体
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="id">主键值</param>
            <returns>实体</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Fetch``1(System.Int64)">
            <summary>
            获取实体
            </summary>
            <param name="id">主键值</param>
            <returns>实体</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Fetch``1(System.String,System.Int64)">
            <summary>
            获取实体
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="id">主键值</param>
            <returns>实体</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1">
            <summary>
            获取实体集合
            </summary>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(System.Int32,System.Int32)">
            <summary>
            获取实体集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(System.String,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1">
            <summary>
            获取实体集合
            </summary>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(System.Int32,System.Int32)">
            <summary>
            获取实体集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(System.String,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            获取实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.IEntity,System.String,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchListAsync``1(System.String,System.String,System.Object,System.String,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="masterName">主对象名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="master">主对象(也可以是主键ID), 在服务端将被反序列化为masterName指定实体类的对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            获取实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.IEntity,System.String,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32)">
            <summary>
            获取实体集合
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.FetchList``1(System.String,System.String,System.Object,System.String,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="masterName">主对象名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="master">主对象(也可以是主键ID), 在服务端将被反序列化为masterName指定实体类的对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号, 从1起始</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1">
            <summary>
            获取记录数量
            </summary>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1(System.String,System.String,System.Object)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1">
            <summary>
            获取记录数量
            </summary>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="criteria">条件对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1(System.String,System.String,System.Object)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCountAsync``1(System.String,System.String,System.Object,System.String,System.String,System.Object)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="masterName">主对象名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="master">主对象(也可以是主键ID), 在服务端将被反序列化为masterName指定实体类的对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1(Phenix.Core.Mapping.IEntity,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1(Phenix.Core.Mapping.IEntity,System.String,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            如果服务端未定义criteria对象的类则要求服务端的实体类上申明了(ClassAttribute.DefaultCriteriaType)缺省条件类或者实体类程序集里定义有带同名Criteria后缀的条件类(需实现ICriteria接口)
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteria">条件对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.GetRecordCount``1(System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntityCollection接口)</param>
            <param name="masterName">主对象名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="master">主对象(也可以是主键ID), 在服务端将被反序列化为masterName指定实体类的对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="criteriaName">条件名, 在服务端定义的条件类全名(需实现ICriteria接口)</param>
            <param name="criteria">JSON格式条件对象, 在服务端将被反序列化为criteriaName指定条件类的对象</param>
            <returns>记录数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.SaveAsync(Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
            <param name="entity">实体</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.SaveAsync(System.String,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="entity">实体</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Save(Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
            <param name="entity">实体</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Save(System.String,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体类全名(需实现IEntity接口)</param>
            <param name="entity">实体</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.SaveAsync(Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
            <param name="entityCollection">实体集合</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.SaveAsync(System.String,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类/实体类全名(需实现IEntityCollection/IEntity接口)</param>
            <param name="entityCollection">实体集合</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Save(Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
            <param name="entityCollection">实体集合</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Save(System.String,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类/实体类全名(需实现IEntityCollection/IEntity接口)</param>
            <param name="entityCollection">实体集合</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.SaveAsync(System.String,System.Object)">
            <summary>
            提交对象
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类/实体类全名(需实现IEntityCollection/IEntity接口)</param>
            <param name="obj">对象, 将被序列化传到服务端, 需包含IsNew、IsSelfDeleted、IsSelfDirty属性以指明对象状态</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Save(System.String,System.Object)">
            <summary>
            提交对象
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类/实体类全名(需实现IEntityCollection/IEntity接口)</param>
            <param name="obj">对象, 将被序列化传到服务端, 需包含IsNew、IsSelfDeleted、IsSelfDirty属性以指明对象状态</param>
            <returns>成功数量</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.ExecuteAsync``1(``0)">
            <summary>
            执行服务
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.ExecuteAsync(System.String,System.Object)">
            <summary>
            执行服务
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Execute``1(``0)">
            <summary>
            执行服务
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.Execute(System.String,System.Object)">
            <summary>
            执行服务
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFilesAsync``1(``0,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFilesAsync(System.String,System.Object,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFiles``1(``0,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFiles(System.String,System.Object,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFilesAsync``1(``0,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            上传文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileStreams">待上传的文件流</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFilesAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileStreams">待上传的文件流</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFiles``1(``0,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            上传文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileStreams">待上传的文件流</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadFiles(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileStreams">待上传的文件流</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync``1(``0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync(System.String,System.Object,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile``1(``0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile(System.String,System.Object,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync``1(``0,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件名</param>
            <param name="fileStream">待上传的文件流</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync(System.String,System.Object,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileName">待上传的文件名</param>
            <param name="fileStream">待上传的文件流</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile``1(``0,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件名</param>
            <param name="fileStream">待上传的文件流</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile(System.String,System.Object,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileName">待上传的文件名</param>
            <param name="fileStream">待上传的文件流</param>
            <param name="doProgress">执行进度干预</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync``1(``0,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFileAsync(System.String,System.Object,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            上传大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile``1(``0,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            上传大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.UploadBigFile(System.String,System.Object,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            上传文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
            <returns>服务结果</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFileAsync``1(``0,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFileAsync(System.String,System.Object,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFile``1(``0,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFile(System.String,System.Object,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFileAsync``1(``0)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <returns>已下载的文件流</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFileAsync(System.String,System.Object)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <returns>已下载的文件流</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFile``1(``0)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <returns>已下载的文件流</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadFile(System.String,System.Object)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <returns>已下载的文件流</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync``1(``0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync(System.String,System.Object,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile``1(``0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile(System.String,System.Object,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync``1(``0,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileStream">待保存的文件流</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync(System.String,System.Object,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileStream">待保存的文件流</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile``1(``0,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="fileStream">待保存的文件流</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile(System.String,System.Object,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="fileStream">待保存的文件流</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync``1(``0,System.Int32)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFileAsync(System.String,System.Object,System.Int32)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">JSON格式对象, 将被传到服务端</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile``1(``0,System.Int32)">
            <summary>
            下载文件
            </summary>
            <param name="service">服务对象, 将被序列化传到服务端</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.IDataProxy.DownloadBigFile(System.String,System.Object,System.Int32)">
            <summary>
            下载文件
            </summary>
            <param name="serviceName">服务名, 在服务端注册的服务类全名(需实现IService接口)</param>
            <param name="obj">对象, 将被序列化传到服务端</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="T:Phenix.Core.Web.ISecurityProxy">
            <summary>
            安全代理接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.ISecurityProxy.HttpClient">
            <summary>
            HttpClient
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDenyAsync``1(Phenix.Core.Mapping.ExecuteAction)">
            <summary>
            是否允许操作
            </summary>
            <param name="action">执行动作</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDenyAsync``1(System.String,Phenix.Core.Mapping.ExecuteAction)">
            <summary>
            是否允许操作
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntity/IEntityCollection/IService接口)</param>
            <param name="action">执行动作</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDeny``1(Phenix.Core.Mapping.ExecuteAction)">
            <summary>
            是否允许操作
            </summary>
            <param name="action">执行动作</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDeny``1(System.String,Phenix.Core.Mapping.ExecuteAction)">
            <summary>
            是否允许操作
            </summary>
            <param name="dataName">数据名, 在服务端注册的实体集合类全名(需实现IEntity/IEntityCollection/IService接口)</param>
            <param name="action">执行动作</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDenyAsync(System.String,System.String)">
            <summary>
            是否允许操作
            </summary>
            <param name="controllerName">标识服务端ApiController名称</param>
            <param name="actionName">标识服务端ApiController函数名</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.IsByDeny(System.String,System.String)">
            <summary>
            是否允许操作
            </summary>
            <param name="controllerName">标识服务端ApiController名称</param>
            <param name="actionName">标识服务端ApiController函数名</param>
            <returns>是否被拒绝</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.LogOnAsync">
            <summary>
            登录验证
            </summary>
            <returns>成功否</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.LogOn">
            <summary>
            登录验证
            </summary>
            <returns>成功否</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.TryLogOnAsync">
            <summary>
            登录验证
            </summary>
            <returns>返回HttpResponseMessage的Content.ReadAsStringAsync()可获取提示信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.TryLogOn">
            <summary>
            登录验证
            </summary>
            <returns>返回HttpResponseMessage的Content.ReadAsStringAsync()可获取提示信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.LogOnVerifyAsync(System.String)">
            <summary>
            登录核实
            </summary>
            <param name="tag">标签</param>
            <returns>成功否</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.LogOnVerify(System.String)">
            <summary>
            登录核实
            </summary>
            <param name="tag">标签</param>
            <returns>成功否</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.TryLogOnVerifyAsync(System.String)">
            <summary>
            登录核实
            </summary>
            <param name="tag">标签</param>
            <returns>返回HttpResponseMessage的Content.ReadAsStringAsync()可获取提示信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.TryLogOnVerify(System.String)">
            <summary>
            登录核实
            </summary>
            <returns>返回HttpResponseMessage的Content.ReadAsStringAsync()可获取提示信息</returns>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.ChangePasswordAsync(System.String)">
            <summary>
            修改登录口令
            </summary>
            <param name="newPassword">新登录口令</param>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.ChangePassword(System.String)">
            <summary>
            修改登录口令
            </summary>
            <param name="newPassword">新登录口令</param>
        </member>
        <member name="M:Phenix.Core.Web.ISecurityProxy.LogOffAsync">
            <summary>
            登出
            </summary>
        </member>
        <member name="T:Phenix.Core.Web.IMessageProxy">
            <summary>
            消息代理接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.IMessageProxy.HttpClient">
            <summary>
            HttpClient
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.SendAsync(System.String,System.String)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.Send(System.String,System.String)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.ReceiveAsync">
            <summary>
            收取消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.Receive">
            <summary>
            收取消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.AffirmReceivedAsync(System.Int64)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.AffirmReceivedAsync(System.Int64,System.Boolean)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.AffirmReceived(System.Int64)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.AffirmReceived(System.Int64,System.Boolean)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.SubscribeAsync(System.Action{Phenix.Core.Web.IMessageProxy,System.Collections.Generic.IDictionary{System.Int64,System.String}},System.Action{Phenix.Core.Web.IMessageProxy,System.String})">
            <summary>
            订阅消息
            port = DEFAULT_SUBSCRIBE_PORT
            </summary>
            <param name="onReceived">处理收到消息</param>
            <param name="onError">处理收到错误消息</param>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.SubscribeAsync(System.Int32,System.Action{Phenix.Core.Web.IMessageProxy,System.Collections.Generic.IDictionary{System.Int64,System.String}},System.Action{Phenix.Core.Web.IMessageProxy,System.String})">
            <summary>
            订阅消息
            </summary>
            <param name="port">端口号</param>
            <param name="onReceived">处理收到消息</param>
            <param name="onError">处理收到错误消息</param>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.Subscribe(System.Action{Phenix.Core.Web.IMessageProxy,System.Collections.Generic.IDictionary{System.Int64,System.String}},System.Action{Phenix.Core.Web.IMessageProxy,System.String})">
            <summary>
            订阅消息
            port = DEFAULT_SUBSCRIBE_PORT
            </summary>
            <param name="onReceived">处理收到消息</param>
            <param name="onError">处理收到错误消息</param>
        </member>
        <member name="M:Phenix.Core.Web.IMessageProxy.Subscribe(System.Int32,System.Action{Phenix.Core.Web.IMessageProxy,System.Collections.Generic.IDictionary{System.Int64,System.String}},System.Action{Phenix.Core.Web.IMessageProxy,System.String})">
            <summary>
            订阅消息
            </summary>
            <param name="port">端口号</param>
            <param name="onReceived">处理收到消息</param>
            <param name="onError">处理收到错误消息</param>
        </member>
        <member name="T:Phenix.Core.Web.ApiController`1">
            <summary>
            API controller
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.ApiController`1.CurrentIdentity">
            <summary>
            当前用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>
            Executes asynchronously a single HTTP operation.
            </summary>
            <param name="controllerContext">The controller context for a single HTTP operation.</param>
            <param name="cancellationToken">The cancellation token assigned for the HTTP operation.</param>
            <returns>The newly started task.</returns>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.UnpackRequest``1">
            <summary>
            解包请求消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.UnpackRequest(System.Type)">
            <summary>
            解包请求消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.PackResponse(System.Object)">
            <summary>
            打包响应消息
            </summary>
            <param name="content">响应内容</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.PackErrorResponse(System.Exception)">
            <summary>
            打包错误消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象内容
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象内容
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch(System.Object)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建对象内容
            </summary>
            <param name="itself">带主键/唯一键值的对象</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象内容
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象内容
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象内容
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Fetch``1(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.FetchList``1(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合内容
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Save``1">
            <summary>
            保存对象内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.SaveList``1">
            <summary>
            保存对象集合内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.ExecuteService``1">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.ExecuteService(System.Type)">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``1(System.Func{``0})">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``2(System.Func{``0,``1},``0)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute(System.Action)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``1(System.Action{``0},``0)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``2(System.Action{``0,``1},``0,``1)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Web.ApiController`1.Execute``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行操作
            </summary>
            <param name="doExecute">执行操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="T:Phenix.Core.Web.Utilities">
            <summary>
            工具集
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.UnpackContent``1(System.Net.Http.HttpContent)">
            <summary>
            解包消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.UnpackContent(System.Net.Http.HttpContent,System.Type)">
            <summary>
            解包消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.PackResponse(System.Net.Http.HttpRequestMessage,System.Object)">
            <summary>
            打包响应消息
            </summary>
            <param name="request">请求消息</param>
            <param name="content">响应内容</param>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.PackErrorResponse(System.Net.Http.HttpRequestMessage,System.Exception)">
            <summary>
            打包错误消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.ExecuteService``1(System.Net.Http.HttpRequestMessage)">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Web.Utilities.ExecuteService(System.Net.Http.HttpRequestMessage,System.Type)">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="T:Phenix.Core.Web.WebConfig">
            <summary>
            Web配置信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Web.WebConfig.METHOD_OVERRIDE_HEADER_NAME">
            <summary>
            X-HTTP-Method-Override
            </summary>
        </member>
        <member name="F:Phenix.Core.Web.WebConfig.AUTHORIZATION_HEADER_NAME">
            <summary>
            Phenix-Authorization
            </summary>
        </member>
        <member name="F:Phenix.Core.Web.WebConfig.SECURITY_URI">
            <summary>
            /api/Security
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.WebConfig.WebApiPort">
            <summary>
            WebAPI端口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.WebConfig.WebApiSslPort">
            <summary>
            WebAPI+SSL端口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.WebConfig.WebSocketPort">
            <summary>
            WebSocket端口
            </summary>
        </member>
        <member name="P:Phenix.Core.Web.WebConfig.WebSocketSslPort">
            <summary>
            WebSocket+SSL端口
            </summary>
        </member>
        <member name="T:Phenix.Core.AppSettings">
            <summary>
            应用系统配置工具
            </summary>
        </member>
        <member name="P:Phenix.Core.AppSettings.AllowSave">
            <summary>
            允许保存状态信息?
            </summary>
        </member>
        <member name="P:Phenix.Core.AppSettings.DefaultKey">
            <summary>
            缺省ID
            </summary>
        </member>
        <member name="P:Phenix.Core.AppSettings.DefaultConfigFilename">
            <summary>
            缺省配置文件名(含路径)
            Application.ExecutablePath + ".config"
            </summary>
        </member>
        <member name="P:Phenix.Core.AppSettings.ConfigFilename">
            <summary>
            配置文件名(含路径)
            缺省为 DefaultConfigFilename
            </summary>
        </member>
        <member name="M:Phenix.Core.AppSettings.SaveValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            保存信息
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="inEncrypt">是否加密</param>
            <param name="defaultKeyDisabled">禁用缺省ID?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SaveValue(System.String,System.String)">
            <summary>
            保存信息
            inEncrypt = false
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SaveValue(System.String,System.Reflection.FieldInfo,System.Object)">
            <summary>
            保存信息
            inEncrypt = false
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
            <param name="fieldInfo">类字段属性的信息</param>
            <param name="fieldValue">类字段属性的值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.RemoveValue(System.String,System.Boolean)">
            <summary>
            移除信息
            </summary>
            <param name="key">键</param>
            <param name="defaultKeyDisabled">禁用缺省ID?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.RemoveValue(System.String)">
            <summary>
            移除信息
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.RemoveValue(System.String,System.Reflection.FieldInfo)">
            <summary>
            移除信息
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
            <param name="fieldInfo">类字段属性的信息</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.ReadValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            读取信息
            </summary>
            <param name="key">键</param>
            <param name="inEncrypt">是否加密</param>
            <param name="defaultKeyDisabled">禁用缺省ID?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.ReadValue(System.String)">
            <summary>
            读取信息
            inEncrypt = false
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.ReadValue(System.String,System.Reflection.FieldInfo)">
            <summary>
            读取信息
            inEncrypt = false
            defaultKeyDisabled = false
            </summary>
            <param name="key">键</param>
            <param name="fieldInfo">类字段属性的信息</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(``0@,``1)">
            <summary>
            设置属性值
            key = null
            allowSave = true
            inEncrypt = false
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(``0@,``1,System.Boolean)">
            <summary>
            设置属性值
            key = null
            inEncrypt = false
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值
            key = null
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(System.String,``0@,``1)">
            <summary>
            设置属性值
            allowSave = true
            inEncrypt = false
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(System.String,``0@,``1,System.Boolean)">
            <summary>
            设置属性值
            inEncrypt = false
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(``0@,``1)">
            <summary>
            获取属性值
            key = null
            allowSave = true
            inEncrypt = false
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(``0@,``1,System.Boolean)">
            <summary>
            获取属性值
            key = null
            inEncrypt = false
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值
            key = null
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(System.String,``0@,``1)">
            <summary>
            获取属性值
            allowSave = true
            inEncrypt = false
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(System.String,``0@,``1,System.Boolean)">
            <summary>
            获取属性值
            inEncrypt = false
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="T:Phenix.Core.AppType">
            <summary>
            应用类型 
            </summary>
        </member>
        <member name="F:Phenix.Core.AppType.Unknown">
            <summary>
            Unknown 
            </summary>
        </member>
        <member name="F:Phenix.Core.AppType.Winform">
            <summary>
            Winform 
            </summary>
        </member>
        <member name="F:Phenix.Core.AppType.Webform">
            <summary>
            Webform
            </summary>
        </member>
        <member name="T:Phenix.Core.AppUtilities">
            <summary>
            应用系统工具集
            </summary>
        </member>
        <member name="M:Phenix.Core.AppUtilities.GetFirstCustomAttribute``1(System.Type)">
            <summary>
            获取成员信息的标签
            </summary>
            <typeparam name="T">Attribute</typeparam>
            <param name="objectType">类</param>
            <returns>标签</returns>
        </member>
        <member name="M:Phenix.Core.AppUtilities.FindException``1(System.Exception)">
            <summary>
            检索错误类型
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.GetErrorMessage(System.Exception)">
            <summary>
            取错误信息
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.GetErrorHint(System.Exception,System.Collections.Generic.IList{System.Type})">
            <summary>
            取错误提示
            </summary>
            <param name="error">错误</param>
            <param name="ignoreErrorTypes">忽略错误类型</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.GetErrorHint(System.Exception,System.Type[])">
            <summary>
            取错误提示
            </summary>
            <param name="error">错误</param>
            <param name="ignoreErrorTypes">忽略错误类型</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.IsFatal(System.Exception)">
            <summary>
            是否致命的错误
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.ProcessCount(System.String)">
            <summary>
            进程数量
            </summary>
            <param name="processName">进程名</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.Register(System.Type)">
            <summary>
            注册程序集类
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.AppUtilities.IsNotApplicationAssembly(System.Reflection.Assembly)">
            <summary>
            非应用系统类
            </summary>
        </member>
        <member name="M:Phenix.Core.AppUtilities.IsNotApplicationType(System.Type)">
            <summary>
            非应用系统类
            </summary>
        </member>
        <member name="M:Phenix.Core.AppUtilities.ClearTempDirectory">
            <summary>
            清理临时目录
            </summary>
        </member>
        <member name="T:Phenix.Core.Cache.IObjectCacheKey">
            <summary>
            对象缓存键值
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.IObjectCacheKey.CacheEnabled">
            <summary>
            可以缓存对象?
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.IObjectCacheKey.ExtremelyCacheEnabled">
            <summary>
            可以极端方式缓存对象?
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.IObjectCacheKey.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Cache.IObjectCacheSynchro">
            <summary>
            对象缓存同步器接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.IObjectCacheSynchro.GetActionTime(System.String)">
            <summary>
            获取活动时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.IObjectCacheSynchro.ClearAll">
            <summary>
            清除全部缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.IObjectCacheSynchro.Clear(System.Collections.Generic.IList{System.String})">
            <summary>
            清除某类的缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.IObjectCacheSynchro.RecordHasChanged(System.String)">
            <summary>
            声明某表记录发生更改
            </summary>
        </member>
        <member name="T:Phenix.Core.Cache.ObjectCacheAttribute">
            <summary>
            "缓存"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCacheAttribute.UpdateInterval">
            <summary>
            更新间隔频率(秒)
            缺省为 3
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCacheAttribute.MaxCount">
            <summary>
            缓存对象数量
            缺省为 10
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCacheAttribute.IsValid">
            <summary>
            是否有效
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Core.Cache.ClearedEventHandler">
            <summary>
            申明清除后事件处理函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Cache.ObjectCache">
            <summary>
            对象缓存
            不支持IDisposable对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCache.Worker">
            <summary>
            同步器
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCache.Extremely">
            <summary>
            极端方式: 将缓存保存到本地
            缺省为 !AppConfig.AutoMode
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCache.ExtremelyThresholdMin">
            <summary>
            极端方式最小阈值: 缓存流长度
            缺省为 1024 * 1024 / 2
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCache.ExtremelyThresholdMax">
            <summary>
            极端方式最大阈值: 缓存流长度
            缺省为 1024 * 1024 * 4
            </summary>
        </member>
        <member name="P:Phenix.Core.Cache.ObjectCache.LocalCacheDirectory">
            <summary>
            本地缓存目录
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Register(System.Type,Phenix.Core.Cache.ClearedEventHandler)">
            <summary>
            注册ClearedEventHandler
            </summary>
            <param name="type">类</param>
            <param name="eventHandler">事件</param>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Unregister(System.Type,Phenix.Core.Cache.ClearedEventHandler)">
            <summary>
            注销ClearedEventHandler
            </summary>
            <param name="type">类</param>
            <param name="eventHandler">事件</param>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.ClearCache">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.ClearAll">
            <summary>
            清除全部缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Clear``1">
            <summary>
            清除某类的缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Clear(System.Type)">
            <summary>
            清除某类的缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Clear(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            清除某类的缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Clear(System.Collections.Generic.IList{System.String})">
            <summary>
            清除某类的缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.RecordHasChanged(System.String)">
            <summary>
            声明某表记录发生更改
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.GetActionTime``1">
            <summary>
            获取活动时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.GetActionTime(System.Type)">
            <summary>
            获取活动时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.GetActionTime(System.String)">
            <summary>
            获取活动时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Find``1(System.Object,System.Nullable{System.DateTime}@)">
            <summary>
            查找
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Find(System.Type,System.Object,System.Nullable{System.DateTime}@)">
            <summary>
            查找
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Add(System.Object,System.Object,System.DateTime)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Remove``1(System.Object)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:Phenix.Core.Cache.ObjectCache.Remove(System.Type,System.Object)">
            <summary>
            移除
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.CriteriaBase">
            <summary>
            条件基类 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.CriteriaBase.CheckRule(System.String,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.CriteriaBase.CheckRules(System.Boolean)">
            <summary>
            校验本对象是否有效
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:Phenix.Core.Data.DataBase">
            <summary>
            可通知属性更改 
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataBase.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataBase.Error">
            <summary>
            错误数据
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataBase.Item(System.String)">
            <summary>
            错误数据
            </summary>
        </member>
        <member name="E:Phenix.Core.Data.DataBase.PropertyChanging">
            <summary>
            属性更改中
            </summary>
        </member>
        <member name="E:Phenix.Core.Data.DataBase.PropertyChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.OnPropertyChanging(System.String)">
            <summary>
            属性发生更改时
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.PropertyHasChanging">
            <summary>
            属性更改中
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.OnPropertyChanged(System.String)">
            <summary>
            属性发生更改后
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.PropertyHasChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.CheckRule(System.String)">
            <summary>
            校验数据是否有效
            throwIfException = false
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.CheckRule(System.String,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.CheckRules">
            <summary>
            校验本对象是否有效
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.DataBase.CheckRules(System.Boolean)">
            <summary>
            校验本对象是否有效
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:Phenix.Core.Data.ParamValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ParamValue.Input(System.String,System.Object)">
            <summary>
            输入参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.ParamValue.Output(System.String,System.Type)">
            <summary>
            输出参数
            </summary>
            <param name="name">名称</param>
            <param name="valueType">数据类型</param>
        </member>
        <member name="M:Phenix.Core.Data.ParamValue.InputOutput(System.String,System.Object)">
            <summary>
            输入输出参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.ParamValue.InputOutput(System.String,System.Object,System.Type)">
            <summary>
            输入输出参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="valueType">数据类型</param>
        </member>
        <member name="M:Phenix.Core.Data.ParamValue.ReturnValue(System.String,System.Type)">
            <summary>
            返回值
            </summary>
            <param name="name">名称</param>
            <param name="valueType">数据类型</param>
        </member>
        <member name="P:Phenix.Core.Data.ParamValue.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ParamValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ParamValue.ValueType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ParamValue.Direction">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.ServiceBase`1">
            <summary>
            服务基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DynamicCreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.DataSourceKey">
            <summary>
            数据源键
            缺省为 T 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.Caption">
            <summary>
            标签
            缺省为 T 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.PrimaryKey">
            <summary>
            主键值
            缺省为 Caption
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.ExecuteResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.AskProgressInterval">
            <summary>
            询问进度间隔(秒)
            缺省为 3
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ServiceBase`1.InAsync">
            <summary>
            是否处于异步状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.ReplaceFrom(`0)">
            <summary>
            置换为与source相同内容的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.ExecuteAsync(System.Action{Phenix.Core.ShallEventArgs})">
            <summary>
            异步执行指令
            </summary>
            <param name="doProgressAsked">进度问讯到事件</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.ExecuteAsync(System.Action{Phenix.Core.ShallEventArgs},System.Int32)">
            <summary>
            异步执行指令
            </summary>
            <param name="doProgressAsked">进度问讯到事件</param>
            <param name="askProgressInterval">询问进度间隔(秒)</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.ExecuteAsync(System.Action{Phenix.Core.StopEventArgs},System.Action{Phenix.Core.ShallEventArgs})">
            <summary>
            异步执行指令
            </summary>
            <param name="doProgressAsking">进度问讯前事件</param>
            <param name="doProgressAsked">进度问讯到事件</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.ExecuteAsync(System.Action{Phenix.Core.StopEventArgs},System.Action{Phenix.Core.ShallEventArgs},System.Int32)">
            <summary>
            异步执行指令
            </summary>
            <param name="doProgressAsking">进度问讯前事件</param>
            <param name="doProgressAsked">进度问讯到事件</param>
            <param name="askProgressInterval">询问进度间隔(秒)</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.StopAsync">
            <summary>
            中止异步指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute">
            <summary>
            执行指令
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute(`0)">
            <summary>
            执行指令
            </summary>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.UploadFiles(System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="fileNames">待上传的文件路径</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.UploadFiles(`0,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.UploadBigFile(System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.UploadBigFile(`0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DownloadFile(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DownloadFile(`0,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DownloadBigFile(System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DownloadBigFile(`0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute(System.Data.Common.DbConnection)">
            <summary>
            执行指令
            </summary>
            <param name="connection">数据库连接</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute(System.Data.Common.DbConnection,`0)">
            <summary>
            执行指令
            </summary>
            <param name="connection">数据库连接</param>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute(System.Data.Common.DbTransaction)">
            <summary>
            执行指令
            </summary>
            <param name="transaction">数据库事务</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.Execute(System.Data.Common.DbTransaction,`0)">
            <summary>
            执行指令
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoExecute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoExecute(System.Data.Common.DbConnection)">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoExecute()且未调用base.DoExecute()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoExecute(System.Data.Common.DbTransaction)">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoExecute()且未调用base.DoExecute()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            </summary>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadFiles(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadFiles()且未调用base.DoUploadFiles()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadFiles(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadFiles()且未调用base.DoUploadFiles()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadBigFile(Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            </summary>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadBigFile(System.Data.Common.DbConnection,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadBigFile()且未调用base.DoUploadBigFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoUploadBigFile(System.Data.Common.DbTransaction,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadBigFile()且未调用base.DoUploadBigFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadFile">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件字节串</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadFileBytes">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件字节串</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadFile(System.Data.Common.DbConnection)">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadFile()且未调用base.DoDownloadFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadFile(System.Data.Common.DbTransaction)">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadFile()且未调用base.DoDownloadFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadBigFile(System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            </summary>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadBigFile(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadBigFile()且未调用base.DoDownloadBigFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.DoDownloadBigFile(System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadBigFile()且未调用base.DoDownloadBigFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.CheckRule(System.String,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.ServiceBase`1.CheckRules(System.Boolean)">
            <summary>
            校验本对象是否有效
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:Phenix.Core.Data.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            master = null
            groupName = null
            cacheEnabled = true
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            master = null
            groupName = null
            cacheEnabled = true
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Object)">
            <summary>
            初始化
            criteria = null
            master = null
            groupName = null
            cacheEnabled = itselfBusiness == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="itself">自对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            master = null
            groupName = null
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="cacheEnabled">需要缓存对象?</param>
            <param name="includeDisabled">是否包含禁用记录?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Boolean,System.Boolean,System.Object)">
            <summary>
            初始化
            criteria = null
            master = null
            groupName = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="cacheEnabled">需要缓存对象?</param>
            <param name="includeDisabled">是否包含禁用记录?</param>
            <param name="itself">自对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            cacheEnabled = criteria == null
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            cacheEnabled = criteria == null
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,System.Boolean,System.Object)">
            <summary>
            初始化
            master = null
            groupName = null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="itself">自对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            cacheEnabled = master == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cacheEnabled = criteria == null 且 master == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itself = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            cacheEnabled = criteriaExpression == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            cacheEnabled = criteriaExpression == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            master = null
            groupName = null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cacheEnabled = criteriaExpression == null 且 master == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,System.Boolean,System.Object)">
            <summary>
            初始化
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="itself">自对象</param>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.ResultTypeAssemblyQualifiedName">
            <summary>
            返回对象类型程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.ResultType">
            <summary>
            返回对象类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.ResultCoreType">
            <summary>
            返回对象核心类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.ResultIsArray">
            <summary>
            返回对象是数组
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.Criteria">
            <summary>
            条件对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.Master">
            <summary>
            主对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.GroupName">
            <summary>
            分组名
            用于区分子表中存在多组外键关联主表的情况
            null代表全部
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.CacheEnabled">
            <summary>
            可以缓存对象?
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.ExtremelyCacheEnabled">
            <summary>
            可以极端缓存对象?
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.SectionNames">
            <summary>
            切片名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.IncludeDisabled">
            <summary>
            是否包含禁用记录
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.Itself">
            <summary>
            自对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.NeedPage">
            <summary>
            需要分页
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.PageSize">
            <summary>
            分页大小
            缺省为 1000
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Criterions.OrderByInfos">
            <summary>
            数据排列顺序队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.CheckRules(System.Boolean)">
            <summary>
            为Criteria检查业务规则
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.CompareTo(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.CompareTo(Phenix.Core.Data.Criterions)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.Compare(Phenix.Core.Data.Criterions,Phenix.Core.Data.Criterions)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.op_Equality(Phenix.Core.Data.Criterions,Phenix.Core.Data.Criterions)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.op_Inequality(Phenix.Core.Data.Criterions,Phenix.Core.Data.Criterions)">
            <summary>
            不等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.op_LessThan(Phenix.Core.Data.Criterions,Phenix.Core.Data.Criterions)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.op_GreaterThan(Phenix.Core.Data.Criterions,Phenix.Core.Data.Criterions)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Criterions.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.EntityListPageBase`2">
            <summary>
            实体集合分页基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Data.Criterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Data.Criterions,System.Int32)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(Phenix.Core.Data.Criterions,System.Int32,System.Int32)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Data.Criterions)">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Data.Criterions,System.Int32)">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Data.Criterions,System.Int32,System.Int32)">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Data.Criterions)">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Data.Criterions,System.Int32)">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Data.Criterions,System.Int32,System.Int32)">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.DefaultPageSize">
            <summary>
            缺省分页大小
            缺省为 1000
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.PageSize">
            <summary>
            分页大小
            缺省为 DefaultPageSize
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.MaxCount">
            <summary>
            最大项数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.MaxPageNo">
            <summary>
            最大分页号
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.LocalPagesCount">
            <summary>
            本地分页数量
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListPageBase`2.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.FetchPage(System.Int32)">
            <summary>
            获取页
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.FetchPrevPage">
            <summary>
            获取上一页
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.FetchNextPage">
            <summary>
            获取下一页
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListPageBase`2.FetchAllPage">
            <summary>
            获取全部页
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.EntityPageBase`1">
            <summary>
            实体分页基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityPageBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityPageBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.EntityBase`1">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DynamicCreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.NewPure">
            <summary>
            新增纯净对象
            仅填充主键PrimaryKeyField字段
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.New">
            <summary>
            新增对象
            填充缺省值、主键PrimaryKeyField字段
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.New(`0)">
            <summary>
            新增对象
            主键PrimaryKeyField字段重新生成
            </summary>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchSelf(System.Data.IDataRecord,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建对象
            </summary>
            <param name="itself">带主键/唯一键值的对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(Phenix.Core.Data.Criterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="itself">带主键/唯一键值的对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="itself">带主键/唯一键值的对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建对象集合
            </summary>
            <param name="transaction">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Refresh">
            <summary>
            刷新本地
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.DataSourceKey">
            <summary>
            数据源键
            缺省为 Criterions.DataSourceKey
            缺省为 T 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.FriendlyName">
            <summary>
            友好名
            缺省为 T 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.Caption">
            <summary>
            标签
            缺省为唯一键值 
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.IdValue">
            <summary>
            对象ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.PrimaryKey">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.OldFieldValues">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.DeletedAsDisabled">
            <summary>
            删除即禁用
            当包含禁用字段(FieldAttribute.IsDisabledColumn = true)且存在唯一键时为 true
            删除时, 仅将禁用字段置为CodingStandards.DefaultDisabledTrueValue
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.IsDisabled">
            <summary>
            是否已禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.MustCheckDirty">
            <summary>
            必须校验数据库数据在下载到提交期间是否被更改过
            与ClassAttribute.AllowIgnoreCheckDirty值取反
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.NeedCheckDirty">
            <summary>
            需要校验数据库数据在下载到提交期间是否被更改过
            缺省为ClassAttribute.AllowIgnoreCheckDirty(缺省为 false；如果为 true, 一旦发现将报错: CheckDirtyException)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityBase`1.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetFieldMapInfo(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            获取数据映射字段信息
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetFieldMapInfo(System.String)">
            <summary>
            获取数据映射字段信息
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Clone(System.Boolean)">
            <summary>
            克隆
            </summary>
            <param name="isNew">全新的</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.ReplaceFrom(`0)">
            <summary>
            置换为与source相同内容的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.OnInitializeNew">
            <summary>
            当新增初始化之后
            本函数仅通过业务类工厂函数New()或将新增业务对象添加到业务集合时才被调用
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkFetched">
            <summary>
            标为 IsNew = false 且 IsSelfDeleted = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkNew">
            <summary>
            标为 IsNew = true 且 IsSelfDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkDirty">
            <summary>
            标为 IsSelfDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkDeleted">
            <summary>
            标为 IsSelfDeleted = true 且 IsSelfDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkOld">
            <summary>
            标为 IsNew = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.MarkClean">
            <summary>
            标为 IsSelfDeleted = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RestoreDeleted">
            <summary>
            撤销删除
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.InitOldFieldValues">
            <summary>
            初始化旧值
            must = false
            reset = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.InitOldFieldValues(System.Boolean,System.Boolean)">
            <summary>
            初始化旧值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetOldFieldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取旧值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetOldFieldValue(System.String)">
            <summary>
            取旧值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FillFieldValuesToDefault">
            <summary>
            填充字段值到缺省值
            reset = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.FillFieldValuesToDefault(System.Boolean)">
            <summary>
            填充字段值到缺省值
            </summary>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetDefaultValue(Phenix.Core.Mapping.IPropertyInfo,System.Object)">
            <summary>
            设置缺省值
            allowReplace = false
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetDefaultValue(Phenix.Core.Mapping.IPropertyInfo,System.Object,System.Boolean)">
            <summary>
            设置缺省值
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="value">值</param>
            <param name="allowReplace">如果为 true, 则当属性被赋值时允许赋值的内容覆盖本缺省值</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetDefaultValue(Phenix.Core.Mapping.IPropertyInfo,System.Func{`0,System.Object})">
            <summary>
            设置缺省值
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="valueFunc">值函数</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RemoveDefaultValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            移除缺省值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetDefaultValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            获取缺省值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetDefaultValue(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            获取缺省值
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="onlyDynamic">如果为 true, 则仅返回通过SetDefaultValue()设置的缺省值; 否则返回完整版</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.OnPropertyChanging(System.String)">
            <summary>
            属性发生更改时
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.OnPropertyChanging(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            属性发生更改时
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.OnPropertyChanged(System.String)">
            <summary>
            属性发生更改后
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.OnPropertyChanged(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.PropertyHasChanged(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetDirtyProperty(System.String)">
            <summary>
            设置脏属性
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            设置脏属性
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            ignoreCompare = false
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="ignoreCompare">忽略比较新旧值(仅判断是否被赋值过)</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetCurrentValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取当前的属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetOldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取最原始的属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.BeginEdit">
            <summary>
            启动编辑
            开始记录编辑过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CancelEdit">
            <summary>
            取消编辑
            将当前状态恢复回原始状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.ApplyEdit">
            <summary>
            接受编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{System.Object},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterMethod(System.Type,System.String,System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="objectType">方法所属类</param>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetProperty``1(Phenix.Core.Mapping.PropertyInfo{``0},``0)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetPropertyConvert``2(Phenix.Core.Mapping.PropertyInfo{``0},``1)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetProperty``1(Phenix.Core.Mapping.PropertyInfo{``0},``0@,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.SetPropertyConvert``2(Phenix.Core.Mapping.PropertyInfo{``0},``1@,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.ExecuteRules``1(Phenix.Core.Mapping.FieldMapInfo,``0@,``0)">
            <summary>
            执行业务规则
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save">
            <summary>
            提交对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save(System.Boolean)">
            <summary>
            提交对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save(System.Data.Common.DbConnection)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save(System.Data.Common.DbTransaction)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Save(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoInsert">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoInsert(System.Data.Common.DbConnection)">
            <summary>
            提交新增对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoInsert(System.Data.Common.DbTransaction)">
            <summary>
            提交新增对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate(System.Boolean)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate(System.Data.Common.DbConnection)">
            <summary>
            提交更新对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            提交更新对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate(System.Data.Common.DbTransaction)">
            <summary>
            提交更新对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoUpdate(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            提交更新对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete(System.Boolean)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete(System.Data.Common.DbConnection)">
            <summary>
            提交删除对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            提交删除对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete(System.Data.Common.DbTransaction)">
            <summary>
            提交删除对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.DoDelete(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            提交删除对象(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CheckRule(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            校验数据是否有效
            throwIfException = false
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CheckRule(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CheckRule(System.String,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CheckRules(System.Boolean)">
            <summary>
            校验本对象是否有效
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.CheckRepeated">
            <summary>
            校验是否存在重复数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.GetHashCode">
            <summary>
            取哈希值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityBase`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.EntityListBase`2">
            <summary>
            实体集合基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.CreateInstance">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DynamicCreateInstance">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.New">
            <summary>
            新增实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            构建实体集合
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(Phenix.Core.Data.Criterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建实体集合
            </summary>
            <param name="transaction">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criterions">条件集</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(Phenix.Core.Mapping.ICriteria,System.Object,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Object,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Object,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Exists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            存在于
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.ICriteria,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.CriteriaExpression,System.Object,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="master">主对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.NotExists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            不存在于
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.DataSourceKey">
            <summary>
            数据源键
            缺省为 Criterions.DataSourceKey
            缺省为 T、TEntity 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.OrderByInfos">
            <summary>
            数据排列顺序队列
            缺省为查询时带入的OrderByInfo及字段上的FieldOrderByAttribute标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.FriendlyName">
            <summary>
            友好名
            缺省为 TEntity 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.Caption">
            <summary>
            标签
            缺省为 TEntity 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.ItemValueType">
            <summary>
            实体类
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.SelfFetching">
            <summary>
            正在检索中
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EntityListBase`2.DeletedList">
            <summary>
            所有被删除的实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.AddNew(System.Int32)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.AddNewCore">
            <summary>
            新增到集合末尾
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.InsertItem(System.Int32,`1)">
            <summary>
            添加项
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Remove(System.Predicate{`1})">
            <summary>
            按照条件移除业务对象
            </summary>
            <param name="match">定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.FillRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            批量添加item（非新增实体）
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.BeginEdit">
            <summary>
            启动编辑
            开始记录编辑过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.CancelEdit">
            <summary>
            取消编辑
            将当前状态恢复回原始状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.ApplyEdit">
            <summary>
            提交编辑
            将原始状态更新到当前状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Save(System.Data.Common.DbConnection)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.Save(System.Data.Common.DbTransaction)">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.CheckRepeated">
            <summary>
            校验是否存在重复数据
            </summary>
            <returns>重复的对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.EntityListBase`2.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.IDataInvalidInfo">
            <summary>
            数据失效信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.IDataInvalidInfo.ErrorCount">
            <summary>
            错误数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.IDataInvalidInfo.WarningCount">
            <summary>
            警告数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.IDataInvalidInfo.InformationCount">
            <summary>
            消息数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstErrorMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取错误信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstErrorMessage(System.String)">
            <summary>
            取错误信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstWarningMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取警告信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstWarningMessage(System.String)">
            <summary>
            取警告信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstInformationMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取消息信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.IDataInvalidInfo.GetFirstInformationMessage(System.String)">
            <summary>
            取消息信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="T:Phenix.Core.Data.DataHub">
            <summary>
            数据中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataHub.SequenceValue">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetSequenceValues(System.Int32)">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTables(Phenix.Core.Data.Schema.Database)">
            <summary>
            获取数据库表构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTablesContent(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableColumns(Phenix.Core.Data.Schema.Table)">
            <summary>
            获取数据库表字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableColumnsContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTablePrimaryKeys(Phenix.Core.Data.Schema.Table)">
            <summary>
            获取数据库表主键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTablePrimaryKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表主键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableForeignKeys(Phenix.Core.Data.Schema.Table)">
            <summary>
            获取数据库表外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableForeignKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableDetailForeignKeys(Phenix.Core.Data.Schema.Table)">
            <summary>
            获取数据库表子外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableDetailForeignKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表子外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableIndexes(Phenix.Core.Data.Schema.Table)">
            <summary>
            获取数据库表索引构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetTableIndexesContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表索引构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetViews(Phenix.Core.Data.Schema.Database)">
            <summary>
            获取数据库视图构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetViewsContent(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库视图构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetViewColumns(Phenix.Core.Data.Schema.View)">
            <summary>
            获取数据库视图字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetViewColumnsContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库视图字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Execute(Phenix.Core.Mapping.IService)">
            <summary>
            执行服务
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Execute(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            上传文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.IO.Stream},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.String[])">
            <summary>
            上传文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.String[],Phenix.Core.Security.UserIdentity)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            上传文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.Byte[]},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,System.String,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            上传大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UploadBigFile(Phenix.Core.Mapping.IService,Phenix.Core.IO.FileChunkInfo,Phenix.Core.Security.UserIdentity)">
            <summary>
            上传大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFileBytes(Phenix.Core.Mapping.IService,System.String)">
            <summary>
            下载文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFileBytes(Phenix.Core.Mapping.IService,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFileBytes(Phenix.Core.Mapping.IService)">
            <summary>
            下载文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFileBytes(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFile(Phenix.Core.Mapping.IService)">
            <summary>
            下载文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadFile(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.IO.Stream,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean},Phenix.Core.Security.UserIdentity)">
            <summary>
            下载大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.Int32)">
            <summary>
            下载大文件
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DownloadBigFile(Phenix.Core.Mapping.IService,System.Int32,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Fetch(Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Fetch(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList(Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象集合
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList``1(Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象集合
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList``1(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchContent(Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象内容
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchContent(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntity,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交实体
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntity,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(Phenix.Core.Mapping.IEntityCollection,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.SaveContent(System.Type,System.String)">
            <summary>
            提交对象内容
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.SaveContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交对象内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Insert(System.Object)">
            <summary>
            提交新增对象
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Insert(System.Object,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.InsertList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交新增实体队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.InsertList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(Phenix.Core.Mapping.IEntity)">
            <summary>
            提交更新实体
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(Phenix.Core.Mapping.IEntity,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交更新实体
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(Phenix.Core.Mapping.IEntity,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交更新对象
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交更新实体队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(Phenix.Core.Mapping.IEntity)">
            <summary>
            提交删除实体
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(Phenix.Core.Mapping.IEntity,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交删除对象
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(Phenix.Core.Mapping.IEntity,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交删除对象
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交删除实体队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object},Phenix.Core.Security.UserIdentity)">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteRecord(Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteRecord(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetRecordCount(Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetRecordCount(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.CheckRepeated(Phenix.Core.Mapping.IEntity)">
            <summary>
            校验是否存在重复数据
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.CheckRepeated(Phenix.Core.Mapping.IEntity,Phenix.Core.Security.UserIdentity)">
            <summary>
            校验是否存在重复数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.CheckRepeated(System.Type,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            校验是否存在重复数据
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.CheckRepeated(System.String,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            校验是否存在重复数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerial(System.String,System.Int64)">
            <summary>
            取业务码流水号
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerial(System.String,System.Int64,Phenix.Core.Security.UserIdentity)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerials(System.String,System.Int64,System.Int32)">
            <summary>
            取业务码流水号
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerials(System.String,System.Int64,System.Int32,Phenix.Core.Security.UserIdentity)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.FetchList``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Save(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Insert(System.Data.Common.DbConnection,System.Object)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Insert(System.Data.Common.DbTransaction,System.Object)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.InsertList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.InsertList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbConnection,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交更新实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Update(System.Data.Common.DbTransaction,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbConnection,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交删除实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.Delete(System.Data.Common.DbTransaction,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions,Phenix.Core.Mapping.PropertyValue[])">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerial(System.Data.Common.DbConnection,System.String,System.Int64)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataHub.GetBusinessCodeSerials(System.Data.Common.DbConnection,System.String,System.Int64,System.Int32)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.DataReader">
            <summary>
            数据读取器
            封装DbConnection、DbCommand、DbDataReader
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            初始化
            </summary>
            <param name="worker">数据读取器</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="worker">数据读取器</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbCommand)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbTransaction,System.String)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(System.String,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.DbConnectionInfo">
            <summary>
            DbConnection信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Behavior">
            <summary>
            行为
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.NeedSaveLog">
            <summary>
            是否保存日志
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Command">
            <summary>
            执行者
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Worker">
            <summary>
            数据读取器
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Depth">
            <summary>
            嵌套深度
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.HasRows">
            <summary>
            是否包含一行或多行
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.FieldCount">
            <summary>
            字段数量
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Item(System.String)">
            <summary>
            按照字段名检索值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.Item(System.Int32)">
            <summary>
            按照索引检索值
            </summary>
            <param name="i">索引</param>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.RecordsAffected">
            <summary>
            通过执行 SQL 语句获取插入、更改或删除的行数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DataReader.IsClosed">
            <summary>
            是否关闭
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.Read">
            <summary>
            读取下一条记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.NextResult">
            <summary>
            前进到下一个结果集
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetData(System.String)">
            <summary>
            返回被请求的字段名的 IDataReader 对象
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetData(System.Int32)">
            <summary>
            返回被请求的列序号的 IDataReader 对象
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDataTypeName(System.String)">
            <summary>
            获取指定字段名的数据类型的名称
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDataTypeName(System.Int32)">
            <summary>
            获取指定列序号的数据类型的名称
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetFieldType(System.String)">
            <summary>
            获取指定字段名的数据类型
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetFieldType(System.Int32)">
            <summary>
            获取指定列序号的数据类型
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetSchemaTable">
            <summary>
            获取元数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetValues(System.Object[])">
            <summary>
            获取当前行的集合中的所有属性列
            </summary>
            <param name="values">要将属性列复制到的 Object 数组</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetOrdinal(System.String)">
            <summary>
            获取序号
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetName(System.Int32)">
            <summary>
            获取字段名
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.IsDBNull(System.String)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.IsDBNull(System.Int32)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetValue(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetValue(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetString(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetString(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt32(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt32(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDouble(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDouble(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetGuid(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetGuid(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetBoolean(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetBoolean(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetByte(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetByte(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetChar(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetChar(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDateTime(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDateTime(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDecimal(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt64ForDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetBooleanForDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetFloat(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetFloat(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt16(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt16(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt64(System.String)">
            <summary>
            读取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetInt64(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableString(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableInt32(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableDouble(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableGuid(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableBoolean(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableByte(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableChar(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableDateTime(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableInt64ForDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableBooleanForDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableFloat(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableInt16(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.GetNullableInt64(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Data.OracleClient.OracleType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Data.SqlDbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Data.OleDb.OleDbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Object)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataReader.CreateParameter(System.String,System.Object,System.Type)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.DefaultDatabase">
            <summary>
            缺省数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DefaultDatabase.DbConnectionInfo">
            <summary>
            DbConnection信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.GetConnection">
            <summary>
            提取DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.PutConnection(System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.GetHistoryConnection(System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="splitKey">拆分键</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.PutHistoryConnection(System.String,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.GetOleConnection">
            <summary>
            提取DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.PutOleConnection(System.Data.OleDb.OleDbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute(System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``1(System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``2(System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``3(System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``4(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``5(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``6(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``7(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``8(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``9(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``10(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``11(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``12(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``2(System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``3(System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``4(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``5(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``6(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``7(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``8(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``9(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``10(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``11(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``12(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``13(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute(System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``1(System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``2(System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``3(System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``4(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``5(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``6(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``7(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``8(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``9(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``10(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``11(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.Execute``12(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``1(System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``2(System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``3(System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``4(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``5(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``6(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``7(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``8(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``9(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``10(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``11(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``12(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteGet``13(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory(System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``1(System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``2(System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``3(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``4(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``5(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``6(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``7(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``8(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``9(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``10(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``11(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``12(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``1(System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``2(System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``3(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``4(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``5(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``6(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``7(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``8(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``9(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``10(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``11(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``12(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``13(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory(System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``1(System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``2(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``3(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``4(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``5(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``6(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``7(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``8(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``9(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``10(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``11(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistory``12(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``1(System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``2(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``3(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``4(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``5(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``6(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``7(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``8(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``9(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``10(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``11(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``12(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteHistoryGet``13(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle(System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``1(System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``2(System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``3(System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``4(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``5(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``6(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``7(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``8(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``9(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``10(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``11(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``12(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``2(System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``3(System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``4(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``5(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``6(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``7(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``8(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``9(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``10(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``11(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``12(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``13(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle(System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``1(System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``2(System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``3(System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``4(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``5(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``6(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``7(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``8(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``9(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``10(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``11(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOle``12(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``1(System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``2(System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``3(System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``4(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``5(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``6(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``7(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``8(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``9(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``10(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``11(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``12(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DefaultDatabase.ExecuteOleGet``13(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="T:Phenix.Core.Data.ExcelHelper">
            <summary>
            Excel助手
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.ExcelHelper.TypeGuessRows">
            <summary>
            决定了ISAM驱动程序从前几条数据采样确定数据类型
            缺省为 8
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.ExcelHelper.Read(System.String)">
            <summary>
            读取Excel文件
            取第一个表单数据
            注意第一行是字段名
            sheetName = null
            HDR = true
            IMEX = 1
            </summary>
            <param name="excelFileName">execl文件名</param>
        </member>
        <member name="M:Phenix.Core.Data.ExcelHelper.Read(System.String,System.String)">
            <summary>
            读取Excel文件
            取指定表单数据
            注意第一行是字段名
            HDR = true
            IMEX = 1
            </summary>
            <param name="excelFileName">execl文件名</param>
            <param name="sheetName">表单名</param>
        </member>
        <member name="M:Phenix.Core.Data.ExcelHelper.Read(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            读取Excel文件
            取指定表单数据
            </summary>
            <param name="excelFileName">execl文件名</param>
            <param name="sheetName">表单名</param>
            <param name="HDR">HDR有两个值:YES/NO，表示第一行是否字段名</param>
            <param name="IMEX">IMEX是用来告诉驱动程序使用Excel文件的模式，其值有0、1、2三种，分别代表导出、导入、混合模式。当我们设置IMEX＝1时将强制混合数据转换为文本，但仅仅这种设置并不可靠，只确保在某列前8行数据至少有一个是文本项的时候才起作用，它只是把查找前8行数据中数据类型占优选择的行为作了略微的改变。例如某列前8行数据全为纯数字，那么它仍然以数字类型作为该列的数据类型，随后行里的含有文本的数据仍然变空。另一个改进的措施是IMEX＝1与注册表值TypeGuessRows配合使用，TypeGuessRows值决定了ISAM驱动程序从前几条数据采样确定数据类型，默认为“8”。可以通过修改HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Jet\4.0\Engines\Excel下的该注册表值来更改采样行数。</param>
        </member>
        <member name="T:Phenix.Core.Data.IData">
            <summary>
            数据中心接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.IData.SequenceValue">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetSequenceValues(System.Int32)">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTablesContent(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTableColumnsContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTablePrimaryKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表主键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTableForeignKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTableDetailForeignKeysContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表子外键构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetTableIndexesContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库表索引构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetViewsContent(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库视图构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetViewColumnsContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取数据库视图字段构架内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Execute(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            执行服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.IO.Stream},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UploadFiles(Phenix.Core.Mapping.IService,System.Collections.Generic.IDictionary{System.String,System.Byte[]},Phenix.Core.Security.UserIdentity)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UploadBigFile(Phenix.Core.Mapping.IService,Phenix.Core.IO.FileChunkInfo,Phenix.Core.Security.UserIdentity)">
            <summary>
            上传大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DownloadFile(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DownloadFileBytes(Phenix.Core.Mapping.IService,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DownloadBigFile(Phenix.Core.Mapping.IService,System.Int32,Phenix.Core.Security.UserIdentity)">
            <summary>
            下载大文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Fetch(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.FetchList(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.FetchContent(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建对象内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(Phenix.Core.Mapping.IEntity,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(Phenix.Core.Mapping.IEntityCollection,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.SaveContent(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交对象内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Insert(System.Object,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.InsertList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Update(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Delete(System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteList(System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateRecord(Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object},Phenix.Core.Security.UserIdentity)">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteRecord(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetRecordCount(Phenix.Core.Mapping.ICriterions,Phenix.Core.Security.UserIdentity)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.CheckRepeated(Phenix.Core.Mapping.IEntity,Phenix.Core.Security.UserIdentity)">
            <summary>
            校验是否存在重复数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.CheckRepeated(System.String,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity},Phenix.Core.Security.UserIdentity)">
            <summary>
            校验是否存在重复数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetBusinessCodeSerial(System.String,System.Int64,Phenix.Core.Security.UserIdentity)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetBusinessCodeSerials(System.String,System.Int64,System.Int32,Phenix.Core.Security.UserIdentity)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.FetchList(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.FetchList(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            构建对象队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntity,System.Boolean)">
            <summary>
            提交实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(System.Data.Common.DbConnection,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Save(System.Data.Common.DbTransaction,Phenix.Core.Mapping.IEntityCollection)">
            <summary>
            提交实体集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Insert(System.Data.Common.DbConnection,System.Object)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Insert(System.Data.Common.DbTransaction,System.Object)">
            <summary>
            提交新增对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.InsertList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.InsertList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交新增实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Update(System.Data.Common.DbConnection,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Update(System.Data.Common.DbTransaction,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交更新对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交更新实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Delete(System.Data.Common.DbConnection,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.Delete(System.Data.Common.DbTransaction,System.Object,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Boolean)">
            <summary>
            提交删除对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteList(System.Data.Common.DbConnection,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteList(System.Data.Common.DbTransaction,System.Collections.Generic.IList{Phenix.Core.Mapping.IEntity})">
            <summary>
            提交删除实体队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriterions)">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetBusinessCodeSerial(System.Data.Common.DbConnection,System.String,System.Int64)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.IData.GetBusinessCodeSerials(System.Data.Common.DbConnection,System.String,System.Int64,System.Int32)">
            <summary>
            取业务码流水号
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.SafeDataReader">
            <summary>
            数据读取器
            封装DbConnection、DbCommand、DbDataReader
            当字段值为DBNull时返回其数据类型的缺省值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            初始化
            </summary>
            <param name="worker">数据读取器</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="worker">数据读取器</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbCommand)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="command">执行者</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbTransaction,System.String)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(System.String,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String,System.Data.CommandBehavior)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.#ctor(Phenix.Core.Data.DbConnectionInfo,System.String,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="sql">SQL语句</param>
            <param name="behavior">行为</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetString(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetInt32(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetDouble(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetGuid(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetBoolean(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetByte(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetChar(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetDateTime(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetDecimal(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetFloat(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetInt16(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.SafeDataReader.GetInt64(System.Int32)">
            <summary>
            读取值
            </summary>
            <param name="i">序号</param>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Owner">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Unique">
            <summary>
            Unique
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Clustered">
            <summary>
            Clustered
            PRIMARY KEY 约束默认为 CLUSTERED
            UNIQUE 约束默认为 NONCLUSTERED
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Collation">
            <summary>
            Collation
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.ColumnNames">
            <summary>
            字段清单
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Sheet">
            <summary>
            单子
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.#ctor(Phenix.Core.Data.Schema.Database,System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Description">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Tables">
            <summary>
            表清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Columns">
            <summary>
            字段清单
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.FindColumn(System.String)">
            <summary>
            检索字段
            </summary>
            <param name="columnName">字段名</param>
            <returns>字段</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Owner">
            <summary>
            所属单子
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.FullName">
            <summary>
            完整字段名(SheetName.Name)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DefaultValue">
            <summary>
            DefaultValue
            缺省为 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsNullable">
            <summary>
            IsNullable
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.CharacterMaxLength">
            <summary>
            CharacterMaxLength
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.CharacterOctetLength">
            <summary>
            CharacterOctetLength
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.CharacterIsUnicode">
            <summary>
            CharacterIsUnicode
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.NumericPrecision">
            <summary>
            NumericPrecision
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.NumericScale">
            <summary>
            NumericScale
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Description">
            <summary>
            Description
            缺省为 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataTypeName">
            <summary>
            DataTypeName
            缺省为 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.FieldTypeName">
            <summary>
            FieldTypeName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.PropertyTypeName">
            <summary>
            PropertyTypeName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.TableColumn">
            <summary>
            表字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsPrimaryKey">
            <summary>
            IsPrimaryKey
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.ExistLink">
            <summary>
            存在关联表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.LinkTableName">
            <summary>
            关联表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.LinkColumnName">
            <summary>
            关联表的表列名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.UniqueIndexs">
            <summary>
            唯一键索引
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsDisabledColumn">
            <summary>
            指示该字段是禁用字段
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Database">
            <summary>
            数据库构架
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.Fetch">
            <summary>
            取数据库构架
            dataSourceKey = String.Empty
            </summary>
            <returns>数据库构架</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.Fetch(System.String)">
            <summary>
            取数据库构架
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <returns>数据库构架</returns>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Database.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Database.DbConnectionInfo">
            <summary>
            DbConnection信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Database.Tables">
            <summary>
            表清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Database.Views">
            <summary>
            视图清单
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.FindTable(System.String)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.FindView(System.String)">
            <summary>
            检索视图
            </summary>
            <param name="viewName">视图名</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Database.GetViewTables(System.String)">
            <summary>
            取视图中表队列
            </summary>
            <param name="viewText">视图文本</param>
            <returns>表队列</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Owner">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.ForeignTableName">
            <summary>
            ForeignTableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.ForeignColumnName">
            <summary>
            ForeignColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.FullForeignColumnName">
            <summary>
            完整外键字段名(ForeignTableName.ForeignColumnName)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.ForeignTable">
            <summary>
            ForeignTable
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.PrimaryTableName">
            <summary>
            PrimaryTableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.PrimaryColumnName">
            <summary>
            PrimaryColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Ordinal">
            <summary>
            Ordinal
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.ForeignKey.ForeignEquals(System.String,System.String)">
            <summary>
            比较外键
            </summary>
            <param name="tableName">表名</param>
            <param name="columnName">字段名</param>
        </member>
        <member name="T:Phenix.Core.Data.Schema.InfoBase">
            <summary>
            信息基础
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.InfoBase.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetString(System.String)">
            <summary>
            GetString
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetGuid(System.String)">
            <summary>
            GetGuid
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetDateTime(System.String)">
            <summary>
            GetDateTime
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetBool(System.String)">
            <summary>
            GetBool
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetInt16(System.String)">
            <summary>
            GetInt16
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetInt32(System.String)">
            <summary>
            GetInt32
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.InfoBase.GetDecimal(System.String)">
            <summary>
            GetDecimal
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.PrimaryKeys">
            <summary>
            主键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.ForeignKeys">
            <summary>
            外键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.DetailForeignKeys">
            <summary>
            子外键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.Indexes">
            <summary>
            索引清单
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Table.FindPrimaryKey(System.String)">
            <summary>
            检索主键
            </summary>
            <param name="columnName">主键名</param>
            <returns>主键</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Table.FindForeignKey(System.String)">
            <summary>
            检索外键
            </summary>
            <param name="columnName">外键名</param>
            <returns>外键</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Table.GetUniqueIndexNames(System.String)">
            <summary>
            取唯一键索引名队列
            </summary>
            <param name="columnName">主键名</param>
            <returns>主键</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.ViewText">
            <summary>
            ViewText
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.Tables">
            <summary>
            表清单
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.GetTableColumn(System.String)">
            <summary>
            取表字段
            </summary>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.GetTableColumn(System.String,System.String)">
            <summary>
            取表字段
            </summary>
            <param name="columnTableName">字段表名</param>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.FindTable(System.String)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <returns>表</returns>
        </member>
        <member name="T:Phenix.Core.Data.Windows.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.DatabaseConnection">
            <summary>
              查找类似 DatabaseConnection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.DatabaseType">
            <summary>
              查找类似 DatabaseType 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.DataSource">
            <summary>
              查找类似 DataSource 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.DataSourceKey">
            <summary>
              查找类似 DataSourceKey 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.InitialCatalog">
            <summary>
              查找类似 InitialCatalog 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.Password">
            <summary>
              查找类似 Password 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.Pooling">
            <summary>
              查找类似 Pooling 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Windows.Resources.UserId">
            <summary>
              查找类似 UserId 的本地化字符串。
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Windows.DbConnectionSetupDialog.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Windows.DbConnectionSetupDialog.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Phenix.Core.Data.Windows.DbConnectionSetupDialog.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.BooleanOption">
            <summary>
            布尔值选项
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.BooleanOption.N">
            <summary>
            否
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.BooleanOption.Y">
            <summary>
            是
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.DataSetHelper">
            <summary>
            DataSet助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            构建DataAdapter
            </summary>
            <param name="command">DbCommand</param>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            获取DataSet
            </summary>
            <param name="command">DbCommand</param>
            <param name="needSaveLog">是否记录日志</param>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            获取DataSet
            </summary>
            <param name="command">DbCommand</param>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.String,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(System.String,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(System.String,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(System.String,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteReader(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.ExecuteOleReader(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DataSetHelper.SetPrimaryKeyValue(System.Data.DataTable,System.Data.DataRow,System.Boolean)">
            <summary>
            为decimal类型IsPrimaryKey字段赋Sequence值
            </summary>
            <param name="table">表</param>
            <param name="row">记录</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="T:Phenix.Core.Data.DbConnectionHelper">
            <summary>
            DbConnection助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ClearCache">
            <summary>
            清除缓冲池
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.CreateConnection(Phenix.Core.Data.DatabaseType)">
            <summary>
            构建DbConnection
            connectionString = null
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.CreateConnection(Phenix.Core.Data.DatabaseType,System.String)">
            <summary>
            构建DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.TryConnection(Phenix.Core.Data.DatabaseType,System.String)">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.TryConnection(System.Data.Common.DbConnection)">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.OpenConnection(System.Data.Common.DbConnection)">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetConnection(System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetConnection(Phenix.Core.Data.DbConnectionInfo)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutConnection(System.String,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutConnection(Phenix.Core.Data.DbConnectionInfo,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetHistoryConnection(System.String,System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetHistoryConnection(Phenix.Core.Data.DbConnectionInfo,System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutHistoryConnection(System.String,System.String,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutHistoryConnection(Phenix.Core.Data.DbConnectionInfo,System.String,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetOleConnection(System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.GetOleConnection(Phenix.Core.Data.DbConnectionInfo)">
            <summary>
            提取DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutOleConnection(System.String,System.Data.OleDb.OleDbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.PutOleConnection(Phenix.Core.Data.DbConnectionInfo,System.Data.OleDb.OleDbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.CreateTransaction(System.Data.Common.DbConnection)">
            <summary>
            获取数据库事务
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute(System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``1(System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``1(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``2(System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``2(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``3(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``3(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``4(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``4(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``5(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``5(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``6(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``6(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``7(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``7(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``8(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``8(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``9(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``9(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``10(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``10(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``11(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``11(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``12(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``12(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``1(System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``1(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``2(System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``2(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``3(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``3(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``4(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``4(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``5(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``5(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``6(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``6(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``7(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``7(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``8(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``8(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``9(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``9(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``10(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``10(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``11(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``11(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``12(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``12(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``13(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``13(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute(System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``1(System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``1(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``2(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``2(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``3(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``3(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``4(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``4(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``5(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``5(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``6(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``6(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``7(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``7(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``8(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``8(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``9(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``9(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``10(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``10(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``11(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``11(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``12(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.Execute``12(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``1(System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``1(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``2(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``2(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``3(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``3(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``4(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``4(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``5(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``5(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``6(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``6(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``7(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``7(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``8(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``8(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``9(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``9(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``10(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``10(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``11(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``11(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``12(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``12(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``13(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteGet``13(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory(System.String,System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``1(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``1(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``2(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``2(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``3(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``3(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``4(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``4(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``5(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``5(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``6(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``6(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``7(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``7(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``8(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``8(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``9(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``9(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``10(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``10(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``11(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``11(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``12(System.String,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``12(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``1(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``1(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``2(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``2(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``3(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``3(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``4(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``4(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``5(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``5(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``6(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``6(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``7(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``7(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``8(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``8(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``9(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``9(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``10(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``10(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``11(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``11(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``12(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``12(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``13(System.String,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``13(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory(System.String,System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``1(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``1(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``2(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``2(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``3(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``3(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``4(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``4(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``5(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``5(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``6(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``6(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``7(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``7(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``8(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``8(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``9(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``9(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``10(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``10(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``11(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``11(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``12(System.String,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistory``12(Phenix.Core.Data.DbConnectionInfo,System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``1(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``1(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``2(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``2(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``3(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``3(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``4(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``4(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``5(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``5(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``6(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``6(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``7(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``7(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``8(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``8(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``9(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``9(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``10(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``10(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``11(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``11(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``12(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``12(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``13(System.String,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteHistoryGet``13(Phenix.Core.Data.DbConnectionInfo,System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle(System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``1(System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``1(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``2(System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``2(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``3(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``3(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``4(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``4(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``5(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``5(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``6(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``6(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``7(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``7(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``8(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``8(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``9(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``9(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``10(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``10(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``11(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``11(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``12(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``12(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``1(System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``1(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``2(System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``2(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``3(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``3(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``4(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``4(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``5(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``5(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``6(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``6(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``7(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``7(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``8(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``8(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``9(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``9(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``10(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``10(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``11(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``11(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``12(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``12(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``13(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``13(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle(System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``1(System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``1(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``2(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``2(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``3(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``3(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``4(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``4(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``5(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``5(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``6(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``6(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``7(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``7(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``8(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``8(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``9(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``9(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``10(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``10(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``11(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``11(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``12(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOle``12(Phenix.Core.Data.DbConnectionInfo,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``1(System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``1(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``2(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``2(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``3(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``3(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``4(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``4(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``5(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``5(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``6(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``6(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``7(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``7(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``8(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``8(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``9(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``9(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``10(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``10(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``11(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``11(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``12(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``12(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``13(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionHelper.ExecuteOleGet``13(Phenix.Core.Data.DbConnectionInfo,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="dbConnectionInfo">DbConnection信息</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="T:Phenix.Core.Data.SqlHelper">
            <summary>
            SQL助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.TrimSpare(System.String)">
            <summary>
            清理脚本前后多余的字符
            </summary>
            <param name="script">脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.ClearComment(System.String)">
            <summary>
            清理脚本里的注释为空格
            </summary>
            <param name="script">脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FetchScriptIsViewName(System.String)">
            <summary>
            fetchScript为视图名
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FetchScriptIsUnion(System.String)">
            <summary>
            fetchScript是否是联接语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FetchScriptIsGroup(System.String)">
            <summary>
            fetchScript是否是分组语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FetchScriptIsComplex(System.String)">
            <summary>
            fetchScript是否是复合语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindFromIndex(System.String)">
            <summary>
            检索from语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindWhereIndex(System.String)">
            <summary>
            检索where语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindOrderIndex(System.String)">
            <summary>
            检索orderby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindGroupIndex(System.String)">
            <summary>
            检索groupby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindConnectIndex(System.String)">
            <summary>
            检索connectby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.GetColumnBody(System.String)">
            <summary>
            取fetchScript中字段体
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.GetOrderBody(System.String)">
            <summary>
            取fetchScript中排序体
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.GetSourceBody(System.String)">
            <summary>
            取fetchScript中数据源队列
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.IsMatchColumnAlias(System.String,System.String)">
            <summary>
            是否存在字段别名
            </summary>
            <param name="columnBody">字段体</param>
            <param name="columnAlias">字段别名</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.FindColumnExpression(System.String,System.String)">
            <summary>
            搜寻与字段别名对应的表达式
            </summary>
            <param name="columnBody">字段体</param>
            <param name="columnAlias">字段别名</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.UniqueParameterName">
            <summary>
            唯一参数名 = 参数名+随机号 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.AssembleFullTableColumnName(System.String,System.String)">
            <summary>
            拼装完整字段名 = 表名.字段名
            当columnName中存在表名时返回值不变
            </summary>
            <param name="tableName">表名</param>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.ExtractColumnSource(System.String)">
            <summary>
            抽取字段数据源
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.SqlHelper.ExtractShortColumnName(System.String)">
            <summary>
            抽取短字段名
            剔除columnName中的表名
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="T:Phenix.Core.Data.DbConnectionInfo">
            <summary>
            DbConnection信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.#ctor(System.String,Phenix.Core.Data.DatabaseType,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="databaseType">数据库类型</param>
            <param name="dataSource">数据源</param>
            <param name="userId">用户ID</param>
            <param name="password">用户口令</param>
            <param name="initialCatalog">数据库名(MSSQL)</param>
            <param name="pooling">使用连接池</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Fetch">
            <summary>
            取DbConnection信息
            dataSourceKey = String.Empty
            </summary>
            <returns>DbConnection信息</returns>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Fetch(System.String)">
            <summary>
            取DbConnection信息
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <returns>DbConnection信息</returns>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Catalog">
            <summary>
            Catalog
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.InitialCatalog">
            <summary>
            数据库名(MSSQL)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.Pooling">
            <summary>
            使用连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.MinPoolSize">
            <summary>
            最小连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.MaxPoolSize">
            <summary>
            最大连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.ConnectionLifetime">
            <summary>
            连接生命周期
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.ConnectTimeout">
            <summary>
            MSSql在终止尝试并产生错误之前，等待与服务器的连接的时间长度(秒数), -1 指示为不指定
            缺省为 -1
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.ConnectionStringBase">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.ConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.OleConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.DbConnectionInfo.HistoryCount">
            <summary>
            历史库数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ClearCache">
            <summary>
            清除缓冲池
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Setup">
            <summary>
            设置数据库连接信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.IsValid">
            <summary>
            检查数据库连接信息
            tryConnection = true
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.IsValid(System.Boolean)">
            <summary>
            检查数据库连接信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.BuildConnectionStringBase(Phenix.Core.Data.DatabaseType,System.String,System.String,System.String,System.String)">
            <summary>
            构建数据库连接串
            </summary>
            <param name="databaseType">数据库类型</param>
            <param name="dataSource">数据源</param>
            <param name="userId">用户ID</param>
            <param name="password">用户口令</param>
            <param name="initialCatalog">数据库名(MSSQL)</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.BuildConnectionStringBase(Phenix.Core.Data.DatabaseType,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构建数据库连接串
            </summary>
            <param name="databaseType">数据库类型</param>
            <param name="dataSource">数据源</param>
            <param name="userId">用户ID</param>
            <param name="password">用户口令</param>
            <param name="initialCatalog">数据库名(MSSQL)</param>
            <param name="index">添加到Data Source和User ID/Initial Catalog的后缀序号</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetConnection">
            <summary>
            提取DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.PutConnection(System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetHistoryConnection(System.String)">
            <summary>
            提取DbConnection
            </summary>
            <param name="splitKey">拆分键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.PutHistoryConnection(System.String,System.Data.Common.DbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetOleConnection">
            <summary>
            提取DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.PutOleConnection(System.Data.OleDb.OleDbConnection)">
            <summary>
            安置DbConnection
            </summary>
            <param name="connection">连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute(System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``1(System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``2(System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``3(System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``4(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``5(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``6(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``7(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``8(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``9(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``10(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``11(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``12(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``2(System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``3(System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``4(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``5(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``6(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``7(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``8(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``9(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``10(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``11(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``12(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``13(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute(System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``1(System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``2(System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``3(System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``4(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``5(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``6(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``7(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``8(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``9(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``10(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``11(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.Execute``12(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``1(System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``2(System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``3(System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``4(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``5(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``6(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``7(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``8(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``9(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``10(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``11(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``12(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteGet``13(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory(System.String,System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``1(System.String,System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``2(System.String,System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``3(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``4(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``5(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``6(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``7(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``8(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``9(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``10(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``11(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``12(System.String,System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``1(System.String,System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``2(System.String,System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``3(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``4(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``5(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``6(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``7(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``8(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``9(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``10(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``11(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``12(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``13(System.String,System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory(System.String,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``1(System.String,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``2(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``3(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``4(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``5(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``6(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``7(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``8(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``9(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``10(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``11(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistory``12(System.String,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``1(System.String,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``2(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``3(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``4(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``5(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``6(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``7(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``8(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``9(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``10(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``11(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``12(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteHistoryGet``13(System.String,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行历史库操作
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle(System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``1(System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``2(System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``3(System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``4(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``5(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``6(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``7(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``8(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``9(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``10(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``11(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``12(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``2(System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``3(System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``4(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``5(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``6(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``7(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``8(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``9(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``10(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``11(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``12(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``13(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle(System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``1(System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``2(System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``3(System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``4(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``5(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``6(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``7(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``8(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``9(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``10(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``11(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOle``12(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``1(System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``2(System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``3(System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``4(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``5(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``6(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``7(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``8(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``9(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``10(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``11(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``12(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.ExecuteOleGet``13(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.AddHistory(System.String,System.String)">
            <summary>
            添加历史库连接串
            </summary>
            <param name="dataSource">数据源</param>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.AddHistory(System.String,System.String,System.String)">
            <summary>
            添加历史库连接串
            </summary>
            <param name="dataSource">数据源</param>
            <param name="userId">用户ID</param>
            <param name="initialCatalog">数据库名(MSSQL)</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetHistoryConnectionIndex(System.String)">
            <summary>
            获取历史库连接串序号
            </summary>
            <param name="splitKey">拆分键</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetHistoryConnectionString(System.String,System.Boolean)">
            <summary>
            获取历史库连接串
            </summary>
            <param name="splitKey">拆分键</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Data.DbConnectionInfo.GetHistoryConnectionString(System.Int32,System.Boolean)">
            <summary>
            获取历史库连接串
            </summary>
            <param name="index">序号</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="T:Phenix.Core.Data.DatabaseConverter">
            <summary>
            数据库转换器
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.DatabaseConverter.ORA_SYSDATE_FORMAT">
            <summary>
            Oracle系统当前时间格式
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.DatabaseConverter.SQL_SYSDATE_FORMAT">
            <summary>
            SqlServer系统当前时间格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseConverter.GetDatabaseType(System.Data.Common.DbConnection)">
            <summary>
            获取数据库类型
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseConverter.GetSysdateString(Phenix.Core.Data.DatabaseType)">
            <summary>
            获取数据库时间字符串
            </summary>
            <param name="databaseType">数据库类型</param>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseConverter.ConvertCommandText(Phenix.Core.Data.DatabaseType,System.String)">
            <summary>
            转换Sql语句
            </summary>
            <param name="databaseType">数据库类型</param>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseConverter.ConvertParameterName(Phenix.Core.Data.DatabaseType,System.String)">
            <summary>
            转换参数名
            </summary>
            <param name="databaseType">数据库类型</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseConverter.ConvertFullParameterName(Phenix.Core.Data.DatabaseType,System.String)">
            <summary>
            转换参数名
            </summary>
            <param name="databaseType">数据库类型</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="T:Phenix.Core.Data.DbCommandHelper">
            <summary>
            DbCommand助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateCommand(System.Data.Common.DbConnection)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateCommand(System.Data.Common.DbTransaction)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateCommand(System.Data.Common.DbTransaction,System.String)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateSqlCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateSqlCommand(System.Data.Common.DbTransaction,System.String)">
            <summary>
            构建DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateStoredProcCommand(System.Data.Common.DbConnection)">
            <summary>
            构建存储过程DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateStoredProcCommand(System.Data.Common.DbTransaction)">
            <summary>
            构建存储过程DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateStoredProcCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            构建存储过程DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateStoredProcCommand(System.Data.Common.DbTransaction,System.String)">
            <summary>
            构建存储过程DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.TidyCommand(System.Data.Common.DbCommand)">
            <summary>
            构建整理过的DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleNonQuery(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleNonQuery(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleNonQuery(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteNonQuery(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleNonQuery(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbCommand)">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleStoredProc(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleStoredProc(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbConnection,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbTransaction,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleStoredProc(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteStoredProc(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleStoredProc(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleScalar(System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleScalar(Phenix.Core.Data.DbConnectionInfo,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleScalar(System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteScalar(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteOleScalar(Phenix.Core.Data.DbConnectionInfo,System.String,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Boolean,Phenix.Core.Data.ParamValue[])">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.OracleClient.OracleType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.OleDb.OleDbType)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.OracleClient.OracleType,System.Data.ParameterDirection)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Data.OleDb.OleDbType,System.Data.ParameterDirection)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Type)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Type,System.Data.ParameterDirection)">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,Phenix.Core.Data.ParamValue[])">
            <summary>
            构建DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.PackCommandInfo(System.Data.Common.DbCommand)">
            <summary>
            打包Command信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DbCommandHelper.SaveLog(System.Type,System.Reflection.MethodBase,System.Data.Common.DbCommand,System.Exception)">
            <summary>
            保存日志
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.DatabaseType.Unknown">
            <summary>
            未知 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.DatabaseType.Oracle">
            <summary>
            Oracle库 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.DatabaseType.MSSql">
            <summary>
            MS SQL Server库 
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Sequence">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.ValueFromServer">
            <summary>
            值是否从服务器获取序号
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.Value">
            <summary>
            值
            小于999999999999999
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.LocalValue">
            <summary>
            本地值
            小于999999999999999
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.ServerValue">
            <summary>
            服务值
            小于999999999999999
            取自服务器上的唯一值, 这在本地处于多进程环境里是更加稳妥的
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.FileChunkInfo">
            <summary>
            文件块信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String)">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(Phenix.Core.IO.FileChunkInfo)">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkCount">
            <summary>
            块数
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkNumber">
            <summary>
            块号
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkSize">
            <summary>
            块大小
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkBuffer">
            <summary>
            块缓存
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.Stop">
            <summary>
            是否终止
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.Over">
            <summary>
            是否结束
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.GetChunkBuffer">
            <summary>
            获取块缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.SetChunkBuffer(System.Byte[])">
            <summary>
            设值块缓存
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.FileHelper">
            <summary>
            File助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileHelper.GetChunkCount(System.Int64)">
            <summary>
            取文件块数
            </summary>
            <param name="fileSize">文件大小</param>
        </member>
        <member name="M:Phenix.Core.IO.FileHelper.ReadChunkInfo(System.String,System.Int32)">
            <summary>
            读取文件块
            </summary>
            <param name="path">文件名</param>
            <param name="chunkNumber">块号</param>
        </member>
        <member name="M:Phenix.Core.IO.FileHelper.ReadChunkInfo(System.String,System.IO.Stream,System.Int32)">
            <summary>
            读取文件块
            </summary>
            <param name="fileName">文件名</param>
            <param name="fileStream">文件流</param>
            <param name="chunkNumber">块号</param>
        </member>
        <member name="M:Phenix.Core.IO.FileHelper.WriteChunkInfo(System.String,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            写入文件块
            </summary>
            <param name="path">文件名</param>
            <param name="chunkInfo">文件块信息</param>
        </member>
        <member name="M:Phenix.Core.IO.FileHelper.WriteChunkInfo(System.IO.Stream,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            写入文件块
            </summary>
            <param name="fileStream">文件流</param>
            <param name="chunkInfo">文件块信息</param>
        </member>
        <member name="T:Phenix.Core.IO.SerialPortFastReader">
            <summary>
            SerialPort速读者(MessageNotify事件不再推送报文, 需自建线程循环Read报文, 可设置MaxReceivedCache、ReceivedCacheCheckInterval以控制收到报文缓存大小)
            调用者可自行Dispose曾Listen进来的SerialPort对象(建议事先Unlisten以免产生死锁)
            Dispose本对象时会自动Dispose所有Listen进来的有效SerialPort对象
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortFastReader.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.SerialPortFastReader.MaxReceivedCache">
            <summary>
            收到报文缓存极限大小
            缺省为 Int16.MaxValue
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.SerialPortFastReader.ReceivedCacheCheckInterval">
            <summary>
            收到报文缓存检查间隔(秒)
            缺省为 3
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortFastReader.OnMessageNotify(Phenix.Core.MessageNotifyEventArgs)">
            <summary>
            触发消息通报事件
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortFastReader.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortFastReader.Read(System.IO.Ports.SerialPort)">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortFastReader.Read(System.String)">
            <summary>
            读取
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.SerialPortDirectReader">
            <summary>
            SerialPort直读者(经MessageNotify事件读取报文, 事件函数内的代码务必高效, 以免报文堆积)
            调用者可自行Dispose曾Listen进来的SerialPort对象(建议事先Unlisten以免产生死锁)
            Dispose本对象时会自动Dispose所有Listen进来的有效SerialPort对象
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.SerialPortReader`1">
            <summary>
            SerialPort读者基类
            调用者可自行Dispose曾Listen进来的SerialPort对象(建议事先Unlisten以免产生死锁)
            Dispose本对象时会自动Dispose所有Listen进来的有效SerialPort对象
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.SerialPortReader`1.Item(System.String)">
            <summary>
            按PortName返回SerialPort
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.SerialPortReader`1.Listening">
            <summary>
            监听中
            </summary>
        </member>
        <member name="E:Phenix.Core.IO.SerialPortReader`1.MessageNotify">
            <summary>
            消息通报事件
            本事件是在辅助线程上进行的, 而不是主线程, 试图修改主线程中的某些元素, 例如UI元素, 可能会导致线程异常
            MessageNotifyType.Information: Title = PortName, Message = ReceivedData
            MessageNotifyType.Warning: Title = PortName, Message = String.Empty
            MessageNotifyType.Error: Title = PortName, Error = Exception / Message = EventType
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.OnMessageNotify(Phenix.Core.MessageNotifyEventArgs)">
            <summary>
            触发消息通报事件
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.SerialPort_ErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            接收错误事件
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.Listen(System.IO.Ports.SerialPort)">
            <summary>
            注册监听
            </summary>
            <param name="serialPort">设置好参数的SerialPort对象</param>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.Unlisten(System.IO.Ports.SerialPort)">
            <summary>
            撤销监听
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.Unlisten(System.String)">
            <summary>
            撤销监听
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.Reading(System.IO.Ports.SerialPort)">
            <summary>
            读取中
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.SerialPortReader`1.Reading(System.String)">
            <summary>
            读取中
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.StreamHelper">
            <summary>
            Stream助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.StreamHelper.CopyBuffer(System.IO.Stream,System.IO.Stream)">
            <summary>
            拷贝数据
            </summary>
            <param name="sourceStream">数据源</param>
            <param name="targetStream">目的流</param>
        </member>
        <member name="M:Phenix.Core.IO.StreamHelper.CopyBuffer(System.IO.Stream)">
            <summary>
            拷贝数据
            </summary>
            <param name="sourceStream">数据源</param>
            <returns>目的字节串</returns>
        </member>
        <member name="T:Phenix.Core.IO.DownloadFileInfo">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.DownloadFileInfo.#ctor(System.String,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            下载文件信息
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.DownloadFileInfo.DirectoryName">
            <summary>
            子目录名
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.DownloadFileHelper">
            <summary>
            下载文件助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.DownloadFileHelper.GetDownloadFileInfos(System.String,System.Collections.Generic.IList{System.String},Phenix.Core.Security.UserIdentity)">
            <summary>
            取下载文件信息
            </summary>
            <param name="applicationName">应用程序名</param>
            <param name="searchPatterns">下载文件的搜索条件</param>
            <param name="identity">用户身份</param>
        </member>
        <member name="M:Phenix.Core.IO.DownloadFileHelper.GetDownloadFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            取下载文件
            </summary>
            <param name="directoryName">目录名</param>
            <param name="sourceDirectoryName">源目录名</param>
            <param name="fileName">文件名</param>
            <param name="chunkNumber">块号</param>
        </member>
        <member name="T:Phenix.Core.IO.CompressHelper">
            <summary>
            压缩助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.ArraySegment{System.Byte})">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.IO.Stream)">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.ArraySegment{System.Byte})">
            <summary>
            解压
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.IO.Stream)">
            <summary>
            解压
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.Windows.BusinessCodeFormatEditDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatEditDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatEditDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog">
            <summary>
            管理业务码格式对话框
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog.Execute(System.Action{Phenix.Core.MessageNotifyEventArgs})">
            <summary>
            执行
            </summary>
            <param name="doMessageNotify">消息通报事件</param>
        </member>
        <member name="F:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeFormatManageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.Windows.BusinessCodePlaceholderFormatAddDialog">
            <summary>
            添加业务码占位符格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodePlaceholderFormatAddDialog.Execute(Phenix.Core.Dictionary.BusinessCodeFormat,System.Type)">
            <summary>
            执行
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.Windows.BusinessCodePlaceholderFormatAddDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodePlaceholderFormatAddDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodePlaceholderFormatAddDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.Windows.BusinessCodeSerialFormatAddDialog">
            <summary>
            添加业务码流水号格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeSerialFormatAddDialog.Execute(Phenix.Core.Dictionary.BusinessCodeFormat)">
            <summary>
            执行
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.Windows.BusinessCodeSerialFormatAddDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeSerialFormatAddDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Windows.BusinessCodeSerialFormatAddDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.Windows.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Add">
            <summary>
              查找类似 Add 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.AddBusinessCodeFormatSucceed">
            <summary>
              查找类似 Add successfully {0} BusinessCodeFormat: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.BusinessCodeFormatEdit">
            <summary>
              查找类似 BusinessCodeFormat Edit: {0}[{1}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.BusinessCodeFormatManage">
            <summary>
              查找类似 BusinessCodeFormat Manage 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.BusinessCodePlaceholderFormatAdd">
            <summary>
              查找类似 BusinessCodePlaceholderFormat Add : {0}[{1}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.BusinessCodeSerialFormatAdd">
            <summary>
              查找类似 BusinessCodeSerialFormat Add : {0}[{1}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Caption">
            <summary>
              查找类似 Caption 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.CriteriaPropertyInfo">
            <summary>
              查找类似 When business object exists only when the following CriteriaProperty value and applying the above format 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Day">
            <summary>
              查找类似 Day 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Delete">
            <summary>
              查找类似 Delete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.DeleteBusinessCodeFormatAsk">
            <summary>
              查找类似 Sure you want to delete the {0} BusinessCodeFormat? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.DeleteBusinessCodeFormatSucceed">
            <summary>
              查找类似 Deleted successfully {0} BusinessCodeFormat 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Department">
            <summary>
              查找类似 Department 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Edit">
            <summary>
              查找类似 Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.EditBusinessCodeFormatSucceed">
            <summary>
              查找类似 Updated successfully {0} BusinessCodeFormat: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Exit">
            <summary>
              查找类似 Exit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.FillOnSaving">
            <summary>
              查找类似 FillOnSaving 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.FormatString">
            <summary>
              查找类似 FormatString 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.GroupMode">
            <summary>
              查找类似 GroupMode 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.InitialValue">
            <summary>
              查找类似 InitialValue 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.InputCriteriaPropertyValue">
            <summary>
              查找类似 Please input CriteriaProperty value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Length">
            <summary>
              查找类似 Length 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.LengthYear">
            <summary>
              查找类似 LengthYear 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Month">
            <summary>
              查找类似 Month 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Name">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Placeholder">
            <summary>
              查找类似 Placeholder 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.PropertyName">
            <summary>
              查找类似 PropertyName 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.ResetCycle">
            <summary>
              查找类似 ResetCycle 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.Serial">
            <summary>
              查找类似 Serial 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.ShortYear">
            <summary>
              查找类似 ShortYear 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.Windows.Resources.UserNumber">
            <summary>
              查找类似 UserNumber 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat">
            <summary>
            业务码占位符格式
            </summary> 
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.REGEX_PATTERN">
            <summary>
            正则表达式模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.DEFAULT_FORMAT_STRING">
            <summary>
            缺省格式字符串
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.LENGTH_TAG">
            <summary>
            固定长度标记
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.LENGTH_REGEX_PATTERN">
            <summary>
            固定长度正则表达式模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.PROPERTY_NAME_TAG">
            <summary>
            属性名标记
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.PROPERTY_NAME_REGEX_PATTERN">
            <summary>
            属性名正则表达式模式
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.FormatString">
            <summary>
            格式串
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.Length">
            <summary>
            固定长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodePlaceholderFormat.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeFormatException">
            <summary>
            业务码格式异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.#ctor">
            <summary>
            业务码格式异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.#ctor(System.String)">
            <summary>
            业务码格式异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.#ctor(System.String,System.Exception)">
            <summary>
            用户验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.#ctor(Phenix.Core.Dictionary.BusinessCodeFormat,System.Exception)">
            <summary>
            业务码格式异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormatException.Format">
            <summary>
            业务码格式
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.SaveValue(System.String,System.Type,System.String,System.String)">
            <summary>
            保存信息
            </summary>
            <param name="key">键</param>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.ReadValue(System.String,System.Type,System.String)">
            <summary>
            读取信息
            </summary>
            <param name="key">键</param>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.SetProperty``2(``0@,``1)">
            <summary>
            设置属性值
            key = null
            allowSave = true
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.SetProperty``2(``0@,``1,System.Boolean)">
            <summary>
            设置属性值
            key = null
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.SetProperty``2(System.String,``0@,``1)">
            <summary>
            设置属性值
            allowSave = true
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.SetProperty``2(System.String,``0@,``1,System.Boolean)">
            <summary>
            设置属性值
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.GetProperty``2(``0@,``1)">
            <summary>
            获取属性值
            key = null
            allowSave = true
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.GetProperty``2(``0@,``1,System.Boolean)">
            <summary>
            获取属性值
            key = null
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.GetProperty``2(System.String,``0@,``1)">
            <summary>
            获取属性值
            allowSave = true
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.Configuration.GetProperty``2(System.String,``0@,``1,System.Boolean)">
            <summary>
            获取属性值
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="T:Phenix.Core.Dictionary.DataDictionaryAttribute">
            <summary>
            "数据字典"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryAttribute.#ctor(Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            初始化
            </summary>
            <param name="classType">指示该类是什么程序集类类型</param>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryAttribute.ClassType">
            <summary>
            指示该类是什么程序集类类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.TableFilterInfo">
            <summary>
            表过滤器资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.TableFilterInfo.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IList{Phenix.Core.Dictionary.TableFilterSectionInfo})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterInfo.CompareColumnName">
            <summary>
            用于比较的字段的字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterInfo.NoneSectionIsDeny">
            <summary>
            无切片时认为是被拒绝
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterInfo.SectionInfos">
            <summary>
            表过滤器切片资料队列
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.TableFilterSectionInfo">
            <summary>
            表过滤器切片资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.TableFilterSectionInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterSectionInfo.Name">
            <summary>
            切片名
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterSectionInfo.AllowReadColumnValue">
            <summary>
            允许Fetch的记录里用于比较的字段的字段值
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.TableFilterSectionInfo.AllowEdit">
            <summary>
            是否允许Edit
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.AssemblyClassInfo">
            <summary>
            程序集类资料
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.ClassType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.Authorised">
            <summary>
            可被授权
            当为false时XXXRoles属性都为空
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.DenyCreateRoles">
            <summary>
            拒绝Create的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.AllowCreateRoles">
            <summary>
            允许Create的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.DenyGetRoles">
            <summary>
            拒绝Get的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.AllowGetRoles">
            <summary>
            允许Get的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.DenyEditRoles">
            <summary>
            拒绝Edit的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.AllowEditRoles">
            <summary>
            允许Edit的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.DenyDeleteRoles">
            <summary>
            拒绝Delete的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.AllowDeleteRoles">
            <summary>
            允许Delete的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.DepartmentIds">
            <summary>
            所属部门ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.ClassPropertyInfos">
            <summary>
            程序集类属性资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassInfo.ClassMethodInfos">
            <summary>
            程序集类方法资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.GetClassPropertyInfo(System.String)">
            <summary>
            取程序集类属性资料
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.GetClassMethodInfo(System.String)">
            <summary>
            取程序集类方法资料
            </summary>
            <param name="methodName">方法名称</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyCreate">
            <summary>
            是否拒绝Create
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyCreate(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Create
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyGet">
            <summary>
            是否拒绝Get
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyGet(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Get
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyEdit">
            <summary>
            是否拒绝Edit
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyEdit(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Edit
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyDelete">
            <summary>
            是否拒绝Delete
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassInfo.DenyDelete(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Delete
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.AssemblyClassMethodInfo">
            <summary>
            程序集类方法资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassMethodInfo.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int64})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassMethodInfo.Owner">
            <summary>
            所属程序集类
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassMethodInfo.DenyExecuteRoles">
            <summary>
            拒绝Execute的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassMethodInfo.AllowExecuteRoles">
            <summary>
            允许Execute的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassMethodInfo.DepartmentIds">
            <summary>
            所属部门ID
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassMethodInfo.DenyExecute">
            <summary>
            是否拒绝执行
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassMethodInfo.DenyExecute(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝执行
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.AssemblyClassPropertyInfo">
            <summary>
            程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.Owner">
            <summary>
            所属程序集类
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyReadRoles">
            <summary>
            拒绝Read的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.AllowReadRoles">
            <summary>
            允许Read的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyWriteRoles">
            <summary>
            拒绝Write的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.AllowWriteRoles">
            <summary>
            允许Write的角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.Configurable">
            <summary>
            是否可配置的
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.ConfigValue">
            <summary>
            配置的值
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.GetConfigValue(System.String)">
            <summary>
            取配置的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyRead">
            <summary>
            是否拒绝Read
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyRead(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Read
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyWrite">
            <summary>
            是否拒绝Write
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyClassPropertyInfo.DenyWrite(Phenix.Core.Security.UserIdentity)">
            <summary>
            是否拒绝Write
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeFormat">
            <summary>
            业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="businessCodeName">业务码名称</param>
            <param name="caption">标签</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="businessCodeName">业务码名称</param>
            <param name="caption">标签</param>
            <param name="formatString">格式字符串</param>
            <param name="fillOnSaving">是否提交时填充值</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Fetch(System.String)">
            <summary>
            构建业务码
            </summary>
            <param name="businessCodeName">业务码名称</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Fetch(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            构建业务码
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Fetch(System.Object,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            构建业务码
            </summary>
            <param name="obj">对象</param>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.DefaultFormatString">
            <summary>
            业务码缺省格式字符串
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.BusinessCodeName">
            <summary>
            业务码名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.CriteriaPropertyName">
            <summary>
            条件属性名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.IsDefault">
            <summary>
            是否缺省
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.CriteriaPropertyValue">
            <summary>
            条件属性值
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.FormatString">
            <summary>
            格式字符串
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.FillOnSaving">
            <summary>
            是否提交时填充值
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.SerialFormats">
            <summary>
            业务码流水号格式队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeFormat.PlaceholderFormats">
            <summary>
            业务码占位符格式队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.ExtractName(System.String)">
            <summary>
            提取名称
            </summary>
            <param name="businessCodeName">业务码名称</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit(Phenix.Core.Operate.KeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit(Phenix.Core.Rule.EnumKeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit(System.Type)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit(System.Type,Phenix.Core.Operate.KeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit(System.Type,Phenix.Core.Rule.EnumKeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit``1">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit``1(Phenix.Core.Operate.KeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Edit``1(Phenix.Core.Rule.EnumKeyCaptionCollection)">
            <summary>
            编辑
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.GetValue">
            <summary>
            获取业务码(忽略属性名标记的占位符)
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.GetValue(System.Data.Common.DbConnection)">
            <summary>
            获取业务码(忽略属性名标记的占位符)
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.GetValues(System.Int32)">
            <summary>
            获取业务码(忽略属性名标记的占位符)
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeFormat.GetValues(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            获取业务码(忽略属性名标记的占位符)
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeSerialFormat">
            <summary>
            业务码流水号格式
            </summary> 
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.REGEX_PATTERN">
            <summary>
            正则表达式模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.DEFAULT_FORMAT_STRING">
            <summary>
            缺省格式字符串
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.LENGTH_TAG">
            <summary>
            固定长度标记
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.LENGTH_REGEX_PATTERN">
            <summary>
            固定长度正则表达式模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.INITIAL_VALUE_TAG">
            <summary>
            起始值标记
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialFormat.INITIAL_VALUE_REGEX_PATTERN">
            <summary>
            起始值正则表达式模式
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.FormatString">
            <summary>
            格式串
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.Length">
            <summary>
            固定长度
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.InitialValue">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.GroupMode">
            <summary>
            分组模式
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.BusinessCodeSerialFormat.ResetCycle">
            <summary>
            重置周期
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.BusinessCodeSerialFormat.AssembleLikeKeyValue(System.Int32)">
            <summary>
            拼装LikeKey值
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeFormatItemType">
            <summary>
            业务码格式项类型
            </summary> 
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.SerialNumber">
            <summary>
            流水号 
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.LengthYear">
            <summary>
            长年
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.ShortYear">
            <summary>
            短年
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeFormatItemType.UserNumber">
            <summary>
            工号
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeSerialGroupMode">
            <summary>
            业务码流水号分组模式
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialGroupMode.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialGroupMode.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialGroupMode.UserNumber">
            <summary>
            工号
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.BusinessCodeSerialResetCycle">
            <summary>
            业务码流水号重置周期
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialResetCycle.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialResetCycle.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.BusinessCodeSerialResetCycle.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.AssemblyInfo">
            <summary>
            程序集资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyInfo.#ctor(System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.AssemblyInfo.ClassInfos">
            <summary>
            类资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyInfo.AddAssemblyClassInfo(System.String,Phenix.Core.Dictionary.AssemblyClassType,System.Boolean,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int64},System.Collections.Generic.IDictionary{System.String,Phenix.Core.Dictionary.AssemblyClassPropertyInfo},System.Collections.Generic.IDictionary{System.String,Phenix.Core.Dictionary.AssemblyClassMethodInfo})">
            <summary>
            添加类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.AssemblyInfo.GetClassInfo(System.String)">
            <summary>
            取类资料
            </summary>
            <param name="className">类名称</param>
        </member>
        <member name="T:Phenix.Core.Dictionary.AssemblyClassType">
            <summary>
            程序集类类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Ordinary">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Form">
            <summary>
            窗体 
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Business">
            <summary>
            业务 
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Businesses">
            <summary>
            业务集
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Command">
            <summary>
            指令
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Enum">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Entity">
            <summary>
            实体 
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.EntityList">
            <summary>
            实体集
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.Service">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Phenix.Core.Dictionary.AssemblyClassType.ApiController">
            <summary>
            WebAPI
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.DataDictionaryHub">
            <summary>
            数据字典中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.Enterprise">
            <summary>
            企业
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.DepartmentInfos">
            <summary>
            部门资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.PositionInfos">
            <summary>
            岗位资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.TableFilterInfos">
            <summary>
            表过滤器资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.RoleInfos">
            <summary>
            角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.SectionInfos">
            <summary>
            切片资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.DataDictionaryHub.BusinessCodeFormats">
            <summary>
            业务码格式队列
            </summary>
        </member>
        <member name="E:Phenix.Core.Dictionary.DataDictionaryHub.MessageNotify">
            <summary>
            消息通报事件
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.ClearCache">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AllInfoHasChanged">
            <summary>
            所有资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.DepartmentInfoHasChanged">
            <summary>
            部门资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.PositionInfoHasChanged">
            <summary>
            岗位资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AssemblyInfoHasChanged">
            <summary>
            程序集资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetAssemblyInfos(System.Action{Phenix.Core.MessageNotifyEventArgs})">
            <summary>
            取程序集资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetAssemblyInfos">
            <summary>
            取程序集资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetAssemblyInfo(System.String)">
            <summary>
            取程序集资料
            </summary>
            <param name="assemblyName">程序集名或类全名</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetClassInfo(System.Type)">
            <summary>
            取类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetClassInfo(System.Type,System.Boolean)">
            <summary>
            取类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.TableInfoHasChanged">
            <summary>
            表结构已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.TableFilterInfoHasChanged">
            <summary>
            表过滤器资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetTableFilterInfo(System.String)">
            <summary>
            取表过滤器切片资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.RoleInfoHasChanged">
            <summary>
            角色资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.InverseRoles(System.Collections.Generic.IList{System.String})">
            <summary>
            反选角色资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.SectionInfoHasChanged">
            <summary>
            切片资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassInfo(System.String,System.String,System.String,System.String,System.String[],Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassInfo(System.Type,System.String,Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassInfo(System.Type,System.String,System.String[],Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassPropertyInfos(System.String,System.String,System.String[],System.String[])">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassPropertyInfos(System.Type,System.String[],System.String[])">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassPropertyInfos(System.String,System.String,System.String[],System.String[],System.Boolean[],System.String[],System.String[],Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassPropertyInfo(System.Type,System.String,System.String,System.Boolean,System.String,System.String,Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassMethodInfos(System.String,System.String,System.String[],System.String[])">
            <summary>
            新增程序集类方法资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.AddAssemblyClassMethodInfos(System.Type,System.String[],System.String[])">
            <summary>
            新增程序集类方法资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.GetBusinessCodeFormat(System.String)">
            <summary>
            获取业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.SetBusinessCodeFormat(Phenix.Core.Dictionary.BusinessCodeFormat)">
            <summary>
            设置业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.RemoveBusinessCodeFormat(Phenix.Core.Dictionary.BusinessCodeFormat)">
            <summary>
            移除业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.DataDictionaryHub.RemoveBusinessCodeFormat(System.String)">
            <summary>
            移除业务码格式
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.IDataDictionary">
            <summary>
            数据字典接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.Enterprise">
            <summary>
            企业
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.DepartmentInfos">
            <summary>
            部门资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.PositionInfos">
            <summary>
            岗位资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.TableFilterInfos">
            <summary>
            表过滤器资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.RoleInfos">
            <summary>
            角色资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.SectionInfos">
            <summary>
            切片资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.IDataDictionary.BusinessCodeFormats">
            <summary>
            业务码格式队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.DepartmentInfoHasChanged">
            <summary>
            部门资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.PositionInfoHasChanged">
            <summary>
            岗位资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.AssemblyInfoHasChanged">
            <summary>
            程序集资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.GetAssemblyInfos">
            <summary>
            取程序集资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.GetAssemblyInfo(System.String)">
            <summary>
            取程序集资料
            </summary>
            <param name="assemblyName">程序集名或类全名</param>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.TableFilterInfoHasChanged">
            <summary>
            表过滤器资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.RoleInfoHasChanged">
            <summary>
            角色资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.SectionInfoHasChanged">
            <summary>
            切片资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.TableInfoHasChanged">
            <summary>
            表结构已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.AddAssemblyClassInfo(System.String,System.String,System.String,System.String,System.String[],Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.AddAssemblyClassPropertyInfos(System.String,System.String,System.String[],System.String[])">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.AddAssemblyClassPropertyConfigInfos(System.String,System.String,System.String[],System.String[],System.Boolean[],System.String[],System.String[],Phenix.Core.Dictionary.AssemblyClassType)">
            <summary>
            新增程序集类属性资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.AddAssemblyClassMethodInfos(System.String,System.String,System.String[],System.String[])">
            <summary>
            新增程序集类方法资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.GetBusinessCodeFormat(System.String)">
            <summary>
            获取业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.SetBusinessCodeFormat(Phenix.Core.Dictionary.BusinessCodeFormat)">
            <summary>
            设置业务码格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.IDataDictionary.RemoveBusinessCodeFormat(System.String)">
            <summary>
            移除业务码格式
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.RoleInfo">
            <summary>
            角色资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.RoleInfo.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.RoleInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.RoleInfo.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Phenix.Core.Dictionary.SectionInfo">
            <summary>
            切片资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.SectionInfo.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.SectionInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Dictionary.SectionInfo.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Dictionary.SectionInfo.GetSectionNames(System.Type)">
            <summary>
            取类所关联切片
            </summary>
            <param name="objectType">类</param>
        </member>
        <member name="T:Phenix.Core.Message.MessageHub">
            <summary>
            消息中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.MessageHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.Send(System.String,System.String)">
            <summary>
            发送消息
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.Send(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.Receive">
            <summary>
            收取消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.Receive(Phenix.Core.Security.UserIdentity)">
            <summary>
            收取消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.AffirmReceived(System.Int64,System.Boolean)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.MessageHub.AffirmReceived(System.Int64,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="T:Phenix.Core.Message.IMessage">
            <summary>
            消息接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.IMessage.Send(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.IMessage.Receive(Phenix.Core.Security.UserIdentity)">
            <summary>
            收取消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.IMessage.AffirmReceived(System.Int64,System.Boolean,Phenix.Core.Security.UserIdentity)">
            <summary>
            确认收到
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.ServicesClusterAttribute">
            <summary>
            "服务集群"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.ServicesClusterAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="key">唯一键</param>
        </member>
        <member name="M:Phenix.Core.Net.ServicesClusterAttribute.Fetch(System.Type)">
            <summary>
            构建
            </summary>
            <param name="ownerType">所属类</param>
        </member>
        <member name="P:Phenix.Core.Net.ServicesClusterAttribute.Key">
            <summary>
            唯一键
            可配合Phenix.Core.Net.NetConfig的RegisterServicesCluster()函数按照指定键值注册的服务器地址来调用Services
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.SocketHelper">
            <summary>
            Socket助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.SocketHelper.SplitMessages(System.String,System.Int32)">
            <summary>
            分解消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.RemotingConfig">
            <summary>
            Remoting配置信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.ServicesProtocolType">
            <summary>
            协议类型
            缺省为 TCP
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.HttpPort">
            <summary>
            HTTP端口
            缺省为 8084
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.TcpPort">
            <summary>
            TCP端口
            缺省为 8086
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.EnsureSecurity">
            <summary>
            信道安全?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.CompressionSupported">
            <summary>
            支持压缩?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.CompressionThresholdMax">
            <summary>
            压缩最大阈值：传输流长度
            缺省为 1024 * 1024 * 8
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.Timeout">
            <summary>
            指定请求在超时前等待的毫秒数, 0 或 -1 指示超时期限无限
            缺省为 System.Threading.Timeout.Infinite
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingConfig.AlwaysImpersonate">
            <summary>
            指定在对服务器信道进行身份验证时，是否为与当前线程关联的身份提供凭据
            缺省为 AppConfig.AppType == AppType.Winform
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfConfig">
            <summary>
            WCF配置信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfConfig.ServicesProtocolType">
            <summary>
            WCF协议类型
            缺省为 NetTcp
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfConfig.BasicHttpPort">
            <summary>
            BasicHTTP端口
            缺省为 9084
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfConfig.NetTcpPort">
            <summary>
            NetTCP端口
            缺省为 9086
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.ProxyType">
            <summary>
            代理类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.ProxyType.Embedded">
            <summary>
            内嵌
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.ProxyType.Remoting">
            <summary>
            remoting
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.ProxyType.Wcf">
            <summary>
            WCF
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.RemotingCompression.CompressCommonHeaders.COMPERSSION_ENABLED">
            <summary>Header to hold the compression state.</summary>
        </member>
        <member name="F:Phenix.Core.Net.RemotingCompression.CompressCommonHeaders.COMPERSSION_SUPPORTED">
            <summary>Header to hold the compression supported flag.</summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink,System.Int32)">
            <summary>
            Constructor with properties.
            </summary>
            <param name="nextSink">Next sink.</param>
            <param name="compressionThreshold">Compression threshold. If 0, compression is disabled globally.</param>
        </member>
        <member name="P:Phenix.Core.Net.RemotingCompression.CompressClientChannelSink.NextChannelSink">
            <summary>
            The next sink in the sink chain.
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressClientChannelSink.IsCompressionExempt(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Returns true if the message contains the compression exempt parameters, marked as
            NonCompressible
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Phenix.Core.Net.RemotingCompression.CompressClientChannelSinkProvider">
            <summary>
            为远程处理消息从其流过的客户端信道创建客户端信道接收器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressClientChannelSinkProvider.#ctor(System.Int32)">
            <summary>
            为远程处理消息从其流过的客户端信道创建客户端信道接收器
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingCompression.CompressClientChannelSinkProvider.Next">
            <summary>
            Gets or sets the next sink provider in the channel sink provider chain.
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            构建接收器链
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.Int32)">
            <summary>
            Constructor with properties.
            </summary>
            <param name="nextSink">Next sink.</param>
            <param name="compressionThreshold">Compression threshold. If 0, compression is disabled globally.</param>
        </member>
        <member name="P:Phenix.Core.Net.RemotingCompression.CompressServerChannelSink.NextChannelSink">
            <summary>
            The next sink in the sink chain.
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressServerChannelSink.IsCompressionExempt(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Returns true if the message contains the compression exempt parameters, marked as
            NonCompressible
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Phenix.Core.Net.RemotingCompression.CompressServerChannelSinkProvider">
            <summary>
            为远程处理消息从其流过的服务器信道创建服务器信道接收器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressServerChannelSinkProvider.#ctor(System.Int32)">
            <summary>
            为远程处理消息从其流过的服务器信道创建服务器信道接收器
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.RemotingCompression.CompressServerChannelSinkProvider.Next">
            <summary>
            Gets or sets the next sink provider in the channel sink provider chain.
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            构建接收器链
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.CompressServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            取信道数据
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.RemotingCompression.ICompressible">
            <summary>
            The ICompressible interface implements a method that returns a flag,
            which determines if the request or response should be compressed.
            This interface is used in conjuction with the compression sink implementation
            and allows to determine dynamically if the request or response is
            to be compressed.
            </summary>
            <remarks>
            The following is the order, in which the criteria are evaluated to determine
            if the request or response is to be compressed: Threshold should be greater than
            zero. NonCompressible marks the object as an exempt. If object size is
            greater than threshold and not marked as NonCompressible, the ICompressible is evaluated.
            </remarks>
        </member>
        <member name="M:Phenix.Core.Net.RemotingCompression.ICompressible.PerformCompression">
            <summary>
            Implement a method in the class. Return true, if the compression
            </summary>
            <returns>True if the object should be compressed, otherwise not.</returns>
        </member>
        <member name="T:Phenix.Core.Net.RemotingCompression.NonCompressibleAttribute">
            <summary>
            Marks the class as an exempt from compression.
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfCompression.CompressEncoder">
            <summary>
            编码器是用于将消息写入到流中并从流中读取消息的组件
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoder.ContentType">
            <summary>
            获取编码器使用的 MIME 内容类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoder.MediaType">
            <summary>
            获取编码器使用的媒体类型值
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoder.MessageVersion">
            <summary>
            获取编码器使用的消息版本值
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.IsContentTypeSupported(System.String)">
            <summary>
            消息编码器是否支持指定的消息级内容类型值
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.GetProperty``1">
            <summary>
            从通道堆栈的适当层返回所请求的类型化对象（如果存在）
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <summary>
            从指定的流中读取一条消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
            <summary>
            从指定的流中读取一条消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            从指定的流中读取一条消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
            <summary>
            将消息写入指定的流中
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfCompression.CompressEncoderFactory">
            <summary>
            用于生成消息编码器的工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoderFactory.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>
            用于生成消息编码器的工厂
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoderFactory.InnerMessageEncodingBindingElement">
            <summary>
            内部对消息进行编码时所用消息版本的绑定元素
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoderFactory.MessageVersion">
            <summary>
            可由消息编码器工厂所生成消息编码器处理的消息版本
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncoderFactory.Encoder">
            <summary>
            编码器是用于将消息写入到流中并从流中读取消息的组件
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncoderFactory.CreateSessionEncoder">
            <summary>
            返回一个消息编码器
            可用于关联基于会话的交换中的消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement">
            <summary>
            用于指定对消息进行编码时所用消息版本的绑定元素
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>
            用于指定对消息进行编码时所用消息版本的绑定元素
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.InnerMessageEncodingBindingElement">
            <summary>
            用于指定对消息进行编码时所用消息版本的绑定元素
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.MessageVersion">
            <summary>
            获取或设置可由消息编码器工厂所生成消息编码器处理的消息版本
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            在当前通道工厂之下为指定类型的通道生成内部通道工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            生成用于侦听指定类型的通道的内部通道侦听器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            内部通道工厂是否可以生成指定类型的通道
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            是否可以生成内部通道侦听器来侦听指定类型的通道
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>
            构建用于生成消息编码器的工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            从通道堆栈的适当层返回所请求的类型化对象（如果存在）
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfCompression.CompressEncodingBindingElement.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfHelper">
            <summary>
            WCF助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateBinding">
            <summary>
            CreateBinding
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateBasicHttpBinding">
            <summary>
            CreateBinding
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateNetTcpBinding">
            <summary>
            CreateBinding
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateUrl(System.String,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateBasicHttpUrl(System.String,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateNetTcpUrl(System.String,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateUrl(System.String,System.Int32,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateBasicHttpUrl(System.String,System.Int32,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.WcfHelper.CreateNetTcpUrl(System.String,System.Int32,System.String)">
            <summary>
            CreateUrl
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.WcfProtocolType">
            <summary>
            WCF协议类型 
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.WcfProtocolType.BasicHttp">
            <summary>
            BasicHTTP
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.WcfProtocolType.NetTcp">
            <summary>
            NetTCP 
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.NetConfig">
            <summary>
            网络配置信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.NetConfig.LOCAL_HOST">
            <summary>
            本地主机
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.NetConfig.LOCAL_IP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.NetConfig.EMBEDDED_SERVICE">
            <summary>
            嵌入式服务
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.TcpTimedWaitDelay">
            <summary>
            TCP/IP 可释放已关闭连接并重用其资源前必须经过的时间（毫秒）
            缺省为30秒（30000毫秒）（30-300）
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.MaxUserPort">
            <summary>
            TCP/IP 端口最大连接数
            缺省为65534（5000-65534）
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.LocalAddress">
            <summary>
            本机IP地址
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.ServicesFixed">
            <summary>
            服务器固定?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.ProxyType">
            <summary>
            代理类型?
            缺省为 ProxyType.Remoting
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.ServicesAddress">
            <summary>
            服务器IP地址
            缺省为 EMBEDDED_SERVICE
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.ServicesAddresses">
            <summary>
            可登陆的服务器IP地址(由AppSettings.Separator分隔)集合
            缺省为 EMBEDDED_SERVICE
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.NetConfig.InitializeSwitch">
            <summary>
            初始化转盘
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.NetConfig.SwitchServicesAddress">
            <summary>
            转盘, 切换到下一个ServicesAddress
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.NetConfig.RegisterServicesCluster(System.String,System.String)">
            <summary>
            注册服务集群
            </summary>
            <param name="key">键</param>
            <param name="servicesAddress">服务器IP地址</param>
        </member>
        <member name="M:Phenix.Core.Net.NetConfig.GetServicesClusterAddress(System.String)">
            <summary>
            获取服务集群的服务器IP地址
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.Net.NetConfig.GetServicesClusterAddress(Phenix.Core.Net.ServicesClusterAttribute)">
            <summary>
            获取服务集群的服务器IP地址
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.RemotingHelper">
            <summary>
            Remoting助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterClientChannel">
            <summary>
            注册终端信道
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterClientChannel(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册终端信道
            </summary>
            <param name="ensureSecurity">启用安全?</param>
            <param name="compressionSupported">支持压缩?</param>
            <param name="compressionThresholdMax">压缩最大阈值</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpClientChannel(System.Boolean)">
            <summary>
            注册终端信道
            </summary>
            <param name="ensureSecurity">启用安全?</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpClientChannel(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册终端信道
            </summary>
            <param name="ensureSecurity">启用安全?</param>
            <param name="compressionSupported">支持压缩?</param>
            <param name="compressionThresholdMax">压缩最大阈值</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterServiceChannel">
            <summary>
            注册服务信道
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpServiceChannel(System.Int32,System.Boolean)">
            <summary>
            注册服务信道
            </summary>
            <param name="port">端口</param>
            <param name="ensureSecurity">启用安全?</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpServiceChannel(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册服务信道
            </summary>
            <param name="port">端口</param>
            <param name="ensureSecurity">启用安全?</param>
            <param name="compressionSupported">支持压缩?</param>
            <param name="compressionThresholdMax">压缩最大阈值</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterActivatedClientChannel">
            <summary>
            注册客户激活的终端信道
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpActivatedClientChannel(System.Boolean)">
            <summary>
            注册客户激活的终端信道
            </summary>
            <param name="ensureSecurity">启用安全?</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpActivatedClientChannel(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册客户激活的终端信道
            </summary>
            <param name="ensureSecurity">启用安全?</param>
            <param name="compressionEnabled">压缩?</param>
            <param name="compressionThresholdMax">压缩最大阈值</param>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterActivatedClientType(System.Type)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterActivatedClientType(System.Type,System.String)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpActivatedClientType(System.Type,System.String)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpActivatedClientType(System.Type,System.String)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterActivatedClientType(System.Type,System.String,System.Int32)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpActivatedClientType(System.Type,System.String,System.Int32)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpActivatedClientType(System.Type,System.String,System.Int32)">
            <summary>
            注册客户激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterWellKnownClientType(System.Type,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterWellKnownClientType(System.Type,System.String,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpWellKnownClientType(System.Type,System.String,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpWellKnownClientType(System.Type,System.String,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterWellKnownClientType(System.Type,System.String,System.Int32,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterHttpWellKnownClientType(System.Type,System.String,System.Int32,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.RegisterTcpWellKnownClientType(System.Type,System.String,System.Int32,System.String)">
            <summary>
            注册服务激活的远程服务
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateRemoteObjectProxy(System.Type,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateRemoteObjectProxy(System.Type,System.String,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateHttpRemoteObjectProxy(System.Type,System.String,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateTcpRemoteObjectProxy(System.Type,System.String,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateRemoteObjectProxy(System.Type,System.String,System.Int32,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateHttpRemoteObjectProxy(System.Type,System.String,System.Int32,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.CreateTcpRemoteObjectProxy(System.Type,System.String,System.Int32,System.String)">
            <summary>
            远程对象代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.FormatRemoteObjectUrl(System.String)">
            <summary>
            FormatUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.FormatRemoteObjectUrl(System.String,System.String)">
            <summary>
            FormatUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.FormatHttpUrl(System.String,System.Int32,System.String)">
            <summary>
            FormatUrl
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.RemotingHelper.FormatTcpUrl(System.String,System.Int32,System.String)">
            <summary>
            FormatUrl
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.RemotingProtocolType">
            <summary>
            Remoting协议类型 
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.RemotingProtocolType.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.RemotingProtocolType.Tcp">
            <summary>
            TCP
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginInfo">
            <summary>
            插件信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginInfo.Key">
            <summary>
            唯一键
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginInfo.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.Windows.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.Windows.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.Windows.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.Windows.Resources.PluginAssemblySelect">
            <summary>
              查找类似 plugin assembly select 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog">
            <summary>
            选择插件对话框
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.Execute(System.String)">
            <summary>
            执行
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.SelectedPluginInfo">
            <summary>
            被选择的插件信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Plugin.Windows.PluginAssemblySelectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.IPlugin">
            <summary>
            插件接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.IPlugin.Key">
            <summary>
            唯一键
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.IPlugin.State">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.IPlugin.Setuping">
            <summary>
            设置中
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Initialization">
            <summary>
            初始化
            由 PluginHost 调用
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Finalization">
            <summary>
            终止化
            由 PluginHost 调用
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Setup(System.Object)">
            <summary>
            设置
            由 PluginHost 调用
            </summary>
            <param name="sender">发起对象</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Start">
            <summary>
            启动
            由 PluginHost 调用
            </summary>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Suspend">
            <summary>
            暂停
            由 PluginHost 调用
            </summary>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.AnalyseMessage(System.Object)">
            <summary>
            分析消息
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.AnalyseMessageAsync(System.Object)">
            <summary>
            分析消息(异步)
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginAttribute">
            <summary>
            "插件"标签
            相同Key的类，在PluginHost上仅维持最后一个注册的类，并允许实例化
            缺省情况下Key等于类的FullName
            这样，可变相地实现插件的热插拔功能，我们可以定义新类，注册后可替换当前运行环境中的旧类、实例化后可替换当前运行环境中的旧类对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="key">唯一键</param>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginAttribute.Key">
            <summary>
            唯一键
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginBase`1">
            <summary>
            插件基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase`1.#ctor">
            <summary>
            插件基类
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase`1.Default">
            <summary>
            缺省插件
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginBase">
            <summary>
            插件抽象类
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.Owner">
            <summary>
            插件容器
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.Key">
            <summary>
            唯一键
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.State">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.Setuping">
            <summary>
            设置中
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Initialization">
            <summary>
            初始化
            由 PluginHost 调用
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Finalization">
            <summary>
            终止化
            由 PluginHost 调用
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Setup(System.Object)">
            <summary>
            设置
            由 PluginHost 调用
            </summary>
            <param name="sender">发起对象</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Start">
            <summary>
            启动
            由 PluginHost 调用
            </summary>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Suspend">
            <summary>
            暂停
            由 PluginHost 调用
            </summary>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.AnalyseMessage(System.Object)">
            <summary>
            分析消息
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.AnalyseMessageAsync(System.Object)">
            <summary>
            分析消息(异步)
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.SendMessage(System.Object)">
            <summary>
            发送给容器消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginEventArgs">
            <summary>
            插件消息事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginEventArgs.#ctor(Phenix.Core.Plugin.IPlugin)">
            <summary>
            初始化
            </summary>
            <param name="plugin">插件</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginEventArgs.#ctor(Phenix.Core.Plugin.IPlugin,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="plugin">插件</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginEventArgs.#ctor(Phenix.Core.Plugin.IPlugin,System.String)">
            <summary>
            初始化
            </summary>
            <param name="plugin">插件</param>
            <param name="path">路径</param>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginEventArgs.Plugin">
            <summary>
            插件
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginEventArgs.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginEventArgs.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginEventArgs.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginHost">
            <summary>
            插件容器组件
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.#ctor(System.ComponentModel.IContainer)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginHost.Default">
            <summary>
            单例
            </summary>
        </member>
        <member name="E:Phenix.Core.Plugin.PluginHost.Message">
            <summary>
            插件消息
            </summary>
        </member>
        <member name="E:Phenix.Core.Plugin.PluginHost.Finalized">
            <summary>
            插件终止
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.RegisterType(System.String,System.String)">
            <summary>
            注册类
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <returns>Id</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.RegisterType(System.String)">
            <summary>
            注册类
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>Id</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.RegisterType(System.Reflection.Assembly)">
            <summary>
            注册类
            </summary>
            <param name="assembly">程序集</param>
            <returns>Id</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.RegisterType(System.Type)">
            <summary>
            注册类
            </summary>
            <param name="type">类</param>
            <returns>Id</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetType(System.String)">
            <summary>
            取插件类
            </summary>
            <param name="assemblyName">程序集名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetType(System.Reflection.Assembly)">
            <summary>
            取插件类
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.FindType(System.String)">
            <summary>
            查找插件类
            </summary>
            <param name="key">PluginAttribute.Key</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetPluginInfo(System.Type,System.Boolean)">
            <summary>
            取插件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetPluginInfo(Phenix.Core.Plugin.IPlugin,System.Boolean)">
            <summary>
            取插件信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.CreatePlugin(System.String,System.String,System.Boolean)">
            <summary>
            构建插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <param name="isSingleton">单例</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.CreatePlugin(System.String,System.Boolean)">
            <summary>
            构建插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="isSingleton">单例</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.CreatePlugin(System.Reflection.Assembly,System.Boolean)">
            <summary>
            构建插件
            </summary>
            <param name="assembly">程序集</param>
            <param name="isSingleton">是单例</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.FindSingleton(System.String,System.String)">
            <summary>
            查找单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.FindSingleton(System.String)">
            <summary>
            查找单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.InitializeSingleton(System.String,System.String)">
            <summary>
            初始化单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.InitializeSingleton(System.String)">
            <summary>
            初始化单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.InitializeSingleton(System.Reflection.Assembly)">
            <summary>
            初始化单例插件
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.FinalizeSingleton(System.String,System.String)">
            <summary>
            终止化单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.FinalizeSingleton(System.String)">
            <summary>
            终止化单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SetupSingleton(System.String,System.String,System.Object)">
            <summary>
            设置单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <param name="sender">发起对象</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SetupSingleton(System.String,System.Object)">
            <summary>
            启动单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="sender">发起对象</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.StartSingleton(System.String,System.String)">
            <summary>
            启动单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.StartSingleton(System.String)">
            <summary>
            启动单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SuspendSingleton(System.String,System.String)">
            <summary>
            停止单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SuspendSingleton(System.String)">
            <summary>
            停止单例插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SendSingletonMessage(System.String,System.String,System.Object)">
            <summary>
            发送给单例插件消息
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SendSingletonMessage(System.String,System.Object)">
            <summary>
            发送给单例插件消息
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SendSingletonMessageAsync(System.String,System.String,System.Object)">
            <summary>
            发送给单例插件消息(异步)
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">插件类名</param>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.SendSingletonMessageAsync(System.String,System.Object)">
            <summary>
            发送给单例插件消息(异步)
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginState">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Created">
            <summary>
            构建
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Initialized">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Finalizing">
            <summary>
            终止化
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Started">
            <summary>
            启动
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Suspended">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:Phenix.Core.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.AddtimeFriendlyName">
            <summary>
              查找类似 Add time 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.BusinessCodeFormatException">
            <summary>
              查找类似 {0} business code format error: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.Cancel">
            <summary>
              查找类似 Cancel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CannotConnectTo">
            <summary>
              查找类似 Cannot connect to the {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CaptionFriendlyName">
            <summary>
              查找类似 Caption 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CheckDirtyException">
            <summary>
              查找类似 Before the update data {0} has been changed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CheckOccupiedException">
            <summary>
              查找类似 {0} exist detail records: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CheckRepeatedException">
            <summary>
              查找类似 {0} exist repeat records: {1} [{2}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CriteriaExpressionFriendlyName">
            <summary>
              查找类似 CriteriaExpression 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.CriteriaFriendlyName">
            <summary>
              查找类似 Criteria 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.DatabaseConnectionFailed">
            <summary>
              查找类似 Database connection failed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.DatabaseConnectionSucceed">
            <summary>
              查找类似 Database connection succeed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.DeleteException">
            <summary>
              查找类似 Failure to delete data {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.EnabledFriendlyName">
            <summary>
              查找类似 Enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.FlagFriendlyName">
            <summary>
              查找类似 Flag 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.IndexNumberFriendlyName">
            <summary>
              查找类似 Index number 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.InsertException">
            <summary>
              查找类似 Failure to insert data {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.KeyFriendlyName">
            <summary>
              查找类似 Key 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.MaxLengthRule">
            <summary>
              查找类似 {0} value &apos;{1}&apos; can not exceed {2} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.MethodNotImplemented">
            <summary>
              查找类似 Not implemented 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.MinLengthRule">
            <summary>
              查找类似 {0} value &apos;{1}&apos; must be at least {2} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.NoService">
            <summary>
              查找类似 The failure of service 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.NoSuchMethod">
            <summary>
              查找类似 No such method {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.Ok">
            <summary>
              查找类似 Ok 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PasswordComplexityReminder">
            <summary>
              查找类似 the password is too simple(length is more than {0} and contain lowercase letters and numbers or special characters category more than {1}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PleaseRegisterEnable">
            <summary>
              查找类似 Please register &amp; enable {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PleaseWait">
            <summary>
              查找类似 Please wait 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PluginAssemblyNameRequired">
            <summary>
              查找类似 {0}({1}) PluginAssemblyName not allow empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.ProcessLockException">
            <summary>
              查找类似 {0} has been {1} lock({2} -&gt; {3}: {4}), must by {1} to unlock 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PromptCodeFriendlyName">
            <summary>
              查找类似 Prompt code 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.PropertyFriendlyName">
            <summary>
              查找类似 Property 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.ReadLevelFriendlyName">
            <summary>
              查找类似 Read level 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.RequiredRule">
            <summary>
              查找类似 {0} not allow empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.SelectedFriendlyName">
            <summary>
              查找类似 Selected 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.SetDataSourceHint">
            <summary>
              查找类似 {0}, consumed {1} seconds in set DataSource 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UpdateException">
            <summary>
              查找类似 Failure to update data {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserLockedException">
            <summary>
              查找类似 {0} user has been banned login, please contact the system administrator to unlock. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserMultipleAddressLoginException">
            <summary>
              查找类似 do not allow multiple address to log in 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserNotFoundException">
            <summary>
              查找类似 {0} user without verification through! 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserNumberFriendlyName">
            <summary>
              查找类似 User number 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserSignatureException">
            <summary>
              查找类似 user without verification through! 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserStillTimeoutException">
            <summary>
              查找类似 The last operation was at {0}, still for more than {1} minutes 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserTimestampRepeatedException">
            <summary>
              查找类似 The timestamp {0} are repeated! 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.UserVerifyException">
            <summary>
              查找类似 Invalid operation - user without verification through: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.ValidationException">
            <summary>
              查找类似 Object is invalid: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.ValueFriendlyName">
            <summary>
              查找类似 Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Core.Properties.Resources.WorkflowInfoDoesNotExist">
            <summary>
              查找类似 WorkflowInfo {0}.{1}  does not exist 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicCtorDelegate">
            <summary>
            动态执行构建函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMethodDelegate">
            <summary>
            动态执行函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMemberGetDelegate">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMemberSetDelegate">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicFactory">
            <summary>
            动态工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreateConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            动态执行构建函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreateMethod(System.Reflection.MethodInfo)">
            <summary>
            动态执行函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreatePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            动态执行属性的get函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreatePropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            动态执行属性的set函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreateFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            动态执行字段的get函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicFactory.CreateFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            动态执行字段的set函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.IFactory">
            <summary>
            工厂接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.IFactory.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.Reflect`1">
            <summary>
            反射TTarget
            </summary>
            <typeparam name="TTarget">被反射的类</typeparam>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            获取表达式中描述的方法
            </summary>
            <param name="method">表达式</param>
            <returns>方法</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            获取表达式中描述的方法
            </summary>
            <param name="method">表达式</param>
            <returns>方法</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            获取表达式中描述的方法
            </summary>
            <param name="method">表达式</param>
            <returns>方法</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            获取表达式中描述的方法
            </summary>
            <param name="method">表达式</param>
            <returns>方法</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取表达式中描述的属性
            </summary>
            <param name="property">表达式</param>
            <returns>属性</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取表达式中描述的属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="property">表达式</param>
            <returns>属性</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Phenix.Core.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取表达式中描述的字段
            </summary>
            <param name="field">表达式</param>
            <returns>字段</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
        </member>
        <member name="T:Phenix.Core.Reflection.Utilities">
            <summary>
            工具集
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadAssembly(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.AssembleFullTypeName(System.String,System.String)">
            <summary>
            拼装完整类名 = 命名空间.类名
            当typeName中存在命名空间时返回值不变
            </summary>
            <param name="typeNamespace">命名空间</param>
            <param name="typeName">类名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ExtractTypeNamespace(System.String)">
            <summary>
            抽取命名空间
            </summary>
            <param name="fullTypeName">完整类名 </param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ExtractTypeName(System.String)">
            <summary>
            抽取类名
            </summary>
            <param name="fullTypeName">完整类名 </param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetExportedSubclassTypes(System.Collections.Generic.IList{System.Type},System.Type[])">
             <summary>
             从类型集合中摘取派生类型
             </summary>
            <param name="sourceTypes">类型集合</param>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypesFromBaseDirectory(System.Type[])">
             <summary>
             从基础目录中加载派生类型
             includeAbstract = false
             </summary>
             <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypesFromBaseDirectory(System.Boolean,System.Type[])">
            <summary>
            从基础目录中加载派生类型
            </summary>
            <param name="baseTypes">基础类型、Interface</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypes(System.String,System.Type[])">
             <summary>
             加载派生类型
             includeAbstract = false
             </summary>
             <param name="fileName">程序集文件名</param>
             <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypes(System.String,System.Boolean,System.Type[])">
            <summary>
            加载派生类型
            </summary>
            <param name="fileName">程序集文件名</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypesFromBaseDirectory">
            <summary>
            从基础目录中加载公共类类型
            includeAbstract = false
            </summary>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypesFromBaseDirectory(System.Boolean)">
            <summary>
            从基础目录中加载公共类类型
            </summary>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypes(System.String)">
            <summary>
            加载公共类类型
            includeAbstract = false
            </summary>
            <param name="fileName">程序集文件名</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypes(System.String,System.Boolean)">
            <summary>
            加载公共类类型
            </summary>
            <param name="fileName">程序集文件名</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetExportedClassTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取公共类类型
            </summary>
            <param name="assemblie">程序集</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadType(System.Type)">
            <summary>
            加载类型
            主要用于IDE环境
            </summary>
            <param name="type">类</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadType(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类名</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadType(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">类名</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadSubclassType``1(System.String)">
            <summary>
            加载派生类型
            </summary>
            <param name="key">AppSettings的键</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadSubclassType(System.Type,System.String)">
            <summary>
            加载派生类型
            </summary>
            <param name="baseType">基础类型、Interface</param>
            <param name="key">AppSettings的键</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetUnderlyingType(System.Type)">
            <summary>
            返回基础类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetCoreType(System.Type)">
            <summary>
            返回数据源的核心类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindListItemType(System.Type)">
            <summary>
            返回队列项类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindKnownTypes(System.Object,System.Type)">
            <summary>
            返回队列项类型
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ChangeType(System.Object,System.Type)">
            <summary>
            返回具有指定 resultType 类型而且其值等效于指定对象的值
            </summary>
            <param name="value">值</param>
            <param name="resultType">返回值的类型</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ConvertToDbValue(System.Object)">
            <summary>
            返回与数据库字段类型匹配的值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindDetailListType(System.Type,System.String,System.Int32)">
            <summary>
            检索主从结构中符合条件的队列类型
            </summary>
            <param name="type">类</param>
            <param name="propertyName">属性名</param>
            <param name="levelNumber">层级数</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindFirstAbstractType(System.Type)">
            <summary>
            检索第一个抽象类
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberFullName(System.Reflection.MemberInfo)">
            <summary>
            类成员属性的全名
            </summary>
            <param name="memberInfo">类成员属性的信息</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetInstanceFields(System.Type,System.Type)">
            <summary>
            取类型匹配的实例字段
            </summary>
            <param name="objectType">类</param>
            <param name="fieldBaseType">字段基础类型、Interface</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetInstanceFields(System.Type,System.Type,System.Type)">
            <summary>
            取类型匹配的实例字段
            </summary>
            <param name="objectType">类</param>
            <param name="objectBaseType">类的基础类型、Interface</param>
            <param name="fieldBaseType">字段基础类型、Interface</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetInstanceProperties(System.Type,System.Type)">
            <summary>
            取类型匹配的实例属性
            </summary>
            <param name="objectType">类</param>
            <param name="propertyBaseType">属性基础类型、Interface</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetInstanceProperties(System.Type,System.Type,System.Type)">
            <summary>
            取类型匹配的实例属性
            </summary>
            <param name="objectType">类</param>
            <param name="objectBaseType">类的基础类型、Interface</param>
            <param name="propertyBaseType">属性基础类型、Interface</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindPropertyInfo(System.Type,System.String)">
            <summary>
            检索属性信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.BinarySerialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.BinaryDeserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="value">Binary值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.BinaryDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="value">Binary值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlSerialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlDeserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="value">XML值</param>
            <param name="type">反序列化类型</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="value">XML值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonSerialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="value">JSON值</param>
            <param name="type">反序列化类型</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="value">序列化值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsZero(System.String)">
            <summary>
            是零
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsNumeric(System.String)">
            <summary>
            是数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsInteger(System.String)">
            <summary>
            是整数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Length(System.String,System.Boolean)">
            <summary>
            字符串长度
            </summary>
            <param name="value">值</param>
            <param name="isUnicode">是否Unicode</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.SubString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取字符串
            </summary>
            <param name="value">值</param>
            <param name="length">截取长度</param>
            <param name="isUnicode">是否Unicode</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.CompareList(System.Collections.IList,System.Collections.IList)">
            <summary>
            比较List对象
            </summary>
            <param name="arrayA">对象A</param>
            <param name="arrayB">对象B</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Clone(System.Object)">
            <summary>
             深克隆完整对象
            </summary>
            <param name="source">源对象</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FillFieldValues``1(``0,``0,System.Boolean)">
            <summary>
            填充对象字段值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Save(System.IO.Stream,System.String)">
            <summary>
            保存对象
            </summary>
            <param name="sourceStream">数据源</param>
            <param name="path">文件名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Save(System.Object,System.String)">
            <summary>
            保存对象
            </summary>
            <param name="source">源对象</param>
            <param name="path">文件名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Restore(System.String)">
            <summary>
            还原对象
            </summary>
            <param name="path">文件名</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedHashSet`1">
            <summary>
            表示元素的集合
            </summary>
            <typeparam name="T">元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Comparer">
            <summary>
            获取用于确定元素是否相等
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Count">
            <summary>
            获取元素的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Items">
            <summary>
            获取元素的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Contains(`0)">
            <summary>
            确定是否包含指定的元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素
            </summary>
            <param name="match">用于定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Clear">
            <summary>
            移除所有的元素
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有的元素
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0},System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            包含存在于该对象中、指定集合中或两者中的所有元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            仅包含该对象和指定集合中存在的元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除指定集合中的所有元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            仅包含存在于该对象中或存在于指定集合中的元素（但并非两者）
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的子集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的超集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的真超集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的真子集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否和指定的集合共享通用元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否和指定集合包含相同的元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ToArray">
            <summary>
            将集合的元素复制到新数组中
            clear = false
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clear">并清除</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[])">
            <summary>
            将整个集合复制到兼容的一维数组中, 从目标数组的开头开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
             将整个集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引，在此处开始复制</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从当前集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
            <param name="count">要复制的元素数</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedDictionary`2">
            <summary>
            表示键和值的集合
            </summary>
            <typeparam name="TKey">字典中的键的类型</typeparam>
            <typeparam name="TValue">字典中的值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor">
            <summary>
            初始化
            该实例为空且具有默认的初始容量, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空且具有指定的初始容量, 并为键类型使用默认的相等比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并为键类型使用默认的相等比较器
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例为空且具有默认的初始容量
            </summary>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例为空且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Comparer">
            <summary>
            获取用于确定字典中的键是否相等
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Count">
            <summary>
            获取键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
            <returns>与指定的键相关联的值. 如果找不到指定的键, get 操作便会引发 KeyNotFoundException, 而 set 操作会创建一个具有指定键的新元素</returns>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetValue(`0,System.Func{`1},System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到字典中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Remove(`0,System.Action{`1})">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
            <param name="doDispose">释放值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ReplaceAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ReplaceAll(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},`1})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedLinkedList`1">
            <summary>
            表示双向链表
            </summary>
            <typeparam name="T">指定链表的元素类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Count">
            <summary>
            获取实际包含的节点数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.First">
            <summary>
            获取第一个节点
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Last">
            <summary>
            获取最后一个节点
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Contains(`0)">
            <summary>
            确定是否包含指定的值
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Find(`0)">
            <summary>
            查找包含指定值的第一个节点
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.FindLast(`0)">
            <summary>
            查找包含指定值的最后一个节点
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Add(`0)">
            <summary>
            添加新项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在指定的现有节点后添加指定的新节点
            </summary>
            <param name="node">要在其后插入新节点的节点</param>
            <param name="newNode">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
             在指定的现有节点后添加包含指定值的新节点
            </summary>
            <param name="node">要在其后插入新节点的节点</param>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在指定的现有节点前添加指定的新节点
            </summary>
            <param name="node">要在其前插入新节点的节点</param>
            <param name="newNode">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在指定的现有节点前添加包含指定值的新节点
            </summary>
            <param name="node">要在其前插入新节点的节点</param>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在开头处添加指定的新节点
            </summary>
            <param name="node">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddFirst(`0)">
            <summary>
            在开头处添加包含指定值的新节点
            </summary>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在结尾处添加指定的新节点
            </summary>
            <param name="node">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddLast(`0)">
            <summary>
            在结尾处添加包含指定值的新节点
            </summary>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            移除指定的节点
            </summary>
            <param name="node">要移除的节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Remove(`0)">
            <summary>
            移除指定值的第一个匹配项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.RemoveFirst">
            <summary>
            移除开头处的节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.RemoveLast">
            <summary>
            移除结尾处的节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Clear">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedList`1">
            <summary>
            表示可通过索引访问的对象的强类型列表
            提供用于对列表进行搜索、排序和操作的方法
            </summary>
            <typeparam name="T">列表中元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素
            </summary>
            <param name="collection">一个集合, 其元素被复制到新列表中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">新列表最初可以存储的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Capacity">
            <summary>
            获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Count">
            <summary>
            获取实际包含的元素数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Contains(`0)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(`0)">
            <summary>
            使用默认的比较器在整个已排序的当前集合中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在整个已排序的当前集合中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在已排序的当前集合中的某个元素范围中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="index">要搜索的范围从零开始的起始索引</param>
            <param name="count">要搜索的范围的长度</param>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0)">
            <summary>
            搜索指定的对象, 并返回整个集合中第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">从零开始的搜索的起始索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从指定的索引开始并包含指定的元素数的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">从零开始的搜索的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0)">
            <summary>
            搜索指定的对象, 并返回整个集合中最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">向后搜索的从零开始的起始索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中包含指定的元素数并在指定索引处结束的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">向后搜索的从零开始的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Exists(System.Predicate{`0})">
            <summary>
            确定是否包含与指定谓词所定义的条件相匹配的元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            确定是否集合中的每个元素都与指定的谓词所定义的条件相匹配
            </summary>
            <param name="match">要据以检查元素的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Find(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个集合中的第一个匹配元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindAll(System.Predicate{`0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中第一个匹配元素的从零开始的索引
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLast(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中的最后一个匹配元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中最后一个匹配元素的从零开始的索引
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与由指定谓词定义的条件相匹配的元素, 并返回集合中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回集合中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Reverse">
            <summary>
            将整个集合中元素的顺序反转
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            将指定范围中元素的顺序反转
            </summary>
            <param name="index">要反转的范围的从零开始的起始索引.</param>
            <param name="count">要反转的范围内的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort">
            <summary>
            使用默认比较器对整个集合中的元素进行排序
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Comparison{`0})">
            <summary>
            排序
            </summary>
            <param name="comparison">比较方法</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            排序
            </summary>
            <param name="index">要排序的范围的从零开始的起始索引</param>
            <param name="count">要排序的范围的长度</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Add(`0)">
            <summary>
            将对象添加到结尾处
            </summary>
            <param name="item">要添加的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AddOnce(`0)">
            <summary>
            一次将对象添加到结尾处(如果已含则不添加)
            </summary>
            <param name="item">要添加的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将指定集合的元素添加到末尾
            </summary>
            <param name="collection">一个集合, 其元素应被添加末尾. 集合自身不能为 null, 但它可以包含 null 的元素(如果类型 T 为引用类型)</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处
            </summary>
            <param name="index">从零开始的索引, 应在该位置插入 item</param>
            <param name="item">要插入的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将一个集合中的某个元素插入到集合的指定索引处
            </summary>
            <param name="index">应在此处插入新元素的从零开始的索引</param>
            <param name="collection">一个集合, 应将其元素插入到集合中. 该集合自身不能为 null, 但它可以包含为 null 的元素(如果类型 T 为引用类型)</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项
            </summary>
            <param name="item">要从集合中移除的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素
            </summary>
            <param name="match">用于定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的元素
            </summary>
            <param name="index">要移除的元素的从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            移除一定范围的元素
            </summary>
            <param name="index">要移除的元素的范围从零开始的起始索引</param>
            <param name="count">要移除的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0},System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.TrimExcess">
            <summary>
            将容量设置为集合中的实际元素数目(如果该数目小于某个阈值)
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ForEach(System.Action{`0})">
            <summary>
            对集合中每个元素执行指定操作
            </summary>
            <param name="action">要对集合中每个元素执行的委托</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            创建源集合中的元素范围的浅表副本
            </summary>
            <param name="index">范围开始处的从零开始的集合索引</param>
            <param name="count">范围中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AsReadOnly">
            <summary>
            返回当前集合的只读包装
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ToArray">
            <summary>
            将集合的元素复制到新数组中
            clear = false
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clear">并清除</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前集合中的元素转换为另一种类型, 并返回包含转换后的元素的列表
            </summary>
            <typeparam name="TOutput">目标数组元素的类型</typeparam>
            <param name="converter">将每个元素从一种类型转换为另一种类型的委托</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(`0[])">
            <summary>
            将整个集合复制到兼容的一维数组中, 从目标数组的开头开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(`0[],System.Int32)">
            <summary>
             将整个集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引，在此处开始复制</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从当前集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="index">源集合中复制开始位置的从零开始的索引</param>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
            <param name="count">要复制的元素数</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedQueue`1">
            <summary>
            表示对象的先进先出集合
            </summary>
            <typeparam name="T">指定队列中元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">其元素被复制到新的集合中的集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedQueue`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Peek">
            <summary>
            返回位于集合开始处的对象但不将其移除
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到集合的结尾处
            </summary>
            <param name="item">要添加到集合中的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Enqueue(`0,System.Boolean)">
            <summary>
            将对象添加到集合的结尾处
            </summary>
            <param name="item">要添加到集合中的对象. 对于引用类型, 该值可以为 null</param>
            <param name="checkRepeat">检查与结尾处是同一个对象的话就不添加</param>
            <returns>是否成功添加</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Dequeue">
            <summary>
            移除并返回位于集合开始处的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Dequeue(`0)">
            <summary>
            移除并返回位于集合开始处的对象
            </summary>
            <param name="item">要移除的对象应该与结尾处是同一个对象. 对于引用类型, 该值可以为 null</param>
            <returns>如果返回值为item说明已成功移除</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Clear">
            <summary>
            移除所有对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.ToArray">
            <summary>
            将集合的元素复制到新数组中
            clear = false
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clear">并清除</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合中的元素复制到现有一维 Array 中
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2">
            <summary>
            表示按键排序的键/值对的集合
            </summary>
            <typeparam name="TKey">字典中的键的类型</typeparam>
            <typeparam name="TValue">字典中的值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor">
            <summary>
            初始化
            该实例为空, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用键类型的默认编辑器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空并使用指定的编辑器实现来比较键
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用指定的比较器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Comparer">
            <summary>
            获取用于对集合的元素进行排序的比较器
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Count">
            <summary>
            获取包含在集合中的键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetValue(`0,System.Func{`1})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">构建值的函数</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到字典中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Remove(`0,System.Action{`1})">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
            <param name="doDispose">释放值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ReplaceAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ReplaceAll(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},`1})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedSortedList`2">
            <summary>
            表示键/值对的集合, 这些键/值对基于关联的比较器实现按照键进行排序
            </summary>
            <typeparam name="TKey">集合中键的类型</typeparam>
            <typeparam name="TValue">集合中值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor">
            <summary>
            初始化
            该实例为空且具有默认的初始容量, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空且具有指定的初始容量, 并为键类型使用默认的相等比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并为键类型使用默认的相等比较器
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空且具有默认的初始容量，并使用指定的比较器
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用指定的比较器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空且具有指定的初始容量，并使用指定的比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Comparer">
            <summary>
            获取用于对集合的元素进行排序的比较器
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Count">
            <summary>
            获取包含在集合中的键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Capacity">
            <summary>
            获取或设置集合可包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetValue(`0,System.Func{`1})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">构建值的函数</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IndexOfKey(`0)">
            <summary>
            在整个集合中搜索指定键并返回从零开始的索引
            </summary>
            <param name="key">要在集合中定位的键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IndexOfValue(`1)">
            <summary>
            在整个集合中搜索指定的值, 并返回第一个匹配项的从零开始的索引
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到集合中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.RemoveAt(System.Int32)">
            <summary>
            移除集合中的指定索引处的元素
            </summary>
            <param name="index">要移除的元素的从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ReplaceAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ReplaceAll(System.Collections.Generic.IDictionary{`0,`1},System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            替换所有
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedStack`1">
            <summary>
            表示同一任意类型的实例的大小可变的后进先出(LIFO)集合
            </summary>
            <typeparam name="T">指定堆栈中的元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">其元素被复制到新的集合中的集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedStack`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Push(`0)">
            <summary>
            将对象插入集合的顶部
            </summary>
            <param name="item">要推入到集合中的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Push(`0,System.Boolean)">
            <summary>
            将对象插入集合的顶部
            </summary>
            <param name="item">要推入到集合中的对象. 对于引用类型, 该值可以为 null</param>
            <param name="checkRepeat">检查与顶部是同一个对象的话就不添加</param>
            <returns>是否成功添加</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Pop">
            <summary>
            移除并返回位于集合顶部的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Pop(`0)">
            <summary>
            移除并返回位于集合顶部的对象
            </summary>
            <param name="item">要移除的对象应该与顶部是同一个对象. 对于引用类型, 该值可以为 null</param>
            <returns>如果返回值为item说明已成功移除</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Peek">
            <summary>
            返回位于集合顶部的对象但不将其移除
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Clear">
            <summary>
            移除所有对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.ToArray">
            <summary>
            将集合的元素复制到新数组中
            clear = false
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clear">并清除</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合中的元素复制到现有一维 Array 中
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
        </member>
        <member name="T:Phenix.Core.Threading.ComparableLocked`1">
            <summary>
            加锁比较
            </summary>
            <typeparam name="T">IComparable</typeparam>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.#ctor(`0)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Threading.ComparableLocked`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.ChangeToSmaller(`0)">
            <summary>
            改为更小值
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.ChangeToLarger(`0)">
            <summary>
            改为更大值
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.CompareTo(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.CompareTo(Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.Compare(Phenix.Core.Threading.ComparableLocked{`0},Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.op_Equality(Phenix.Core.Threading.ComparableLocked{`0},Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.op_Inequality(Phenix.Core.Threading.ComparableLocked{`0},Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            不等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.op_LessThan(Phenix.Core.Threading.ComparableLocked{`0},Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.ComparableLocked`1.op_GreaterThan(Phenix.Core.Threading.ComparableLocked{`0},Phenix.Core.Threading.ComparableLocked{`0})">
            <summary>
            大于
            </summary>
        </member>
        <member name="T:Phenix.Core.Threading.AsyncResult">
            <summary>
            用于通用异步编程方案中使用的基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:Phenix.Core.Threading.AsyncResult.AsyncCompletionCallback">
            <summary>
            异步完成处理函数
            can be utilized by subclasses to write core completion code for both the sync and async paths
            in one location, signaling chainable synchronous completion with the boolean result,
            and leveraging PrepareAsyncCompletion for conversion to an AsyncCallback.
            NOTE: requires that "this" is passed in as the state object to the asynchronous sub-call being used with a completion routine.
            </summary>
            <param name="result">异步操作</param>
        </member>
        <member name="P:Phenix.Core.Threading.AsyncResult.IsCompleted">
            <summary>
            指示异步操作是否已完成
            </summary>
        </member>
        <member name="P:Phenix.Core.Threading.AsyncResult.CompletedSynchronously">
            <summary>
            指示异步操作是否同步完成
            </summary>
        </member>
        <member name="P:Phenix.Core.Threading.AsyncResult.AsyncWaitHandle">
            <summary>
            获取用于等待异步操作完成的 WaitHandle
            </summary>
        </member>
        <member name="P:Phenix.Core.Threading.AsyncResult.AsyncState">
            <summary>
            获取用户定义的对象
            它限定或包含关于异步操作的信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.Complete(System.Boolean)">
            <summary>
            完成
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.Complete(System.Boolean,System.Exception)">
            <summary>
            完成
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.PrepareAsyncCompletion(Phenix.Core.Threading.AsyncResult.AsyncCompletionCallback)">
            <summary>
            准备异步完成
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncResult.End``1(``0)">
            <summary>
            中止
            </summary>
        </member>
        <member name="T:Phenix.Core.Threading.CompletedAsyncResult`1">
            <summary>
            异步完成
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.CompletedAsyncResult`1.#ctor(`0,System.AsyncCallback,System.Object)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.CompletedAsyncResult`1.End(Phenix.Core.Threading.CompletedAsyncResult{`0})">
            <summary>
            中止
            </summary>
        </member>
        <member name="T:Phenix.Core.Windows.ErrorProviderExtentions">
            <summary>
            ErrorProvider扩展
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ErrorProviderExtentions.CheckRules(System.Windows.Forms.ErrorProvider,System.Windows.Forms.Control,System.Windows.Forms.BindingSource,System.Boolean)">
            <summary>
            校验控件容器内编辑控件的失效数据
            </summary>
            <param name="errorProvider">ErrorProvider</param>
            <param name="container">控件容器</param>
            <param name="source">数据源</param>
            <param name="toFocused">聚焦失效控件</param>
            <returns>失效数据事件数据</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ErrorProviderExtentions.CheckRule(System.Windows.Forms.ErrorProvider,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            校验编辑控件的失效数据
            </summary>
            <param name="errorProvider">ErrorProvider</param>
            <param name="control">控件</param>
            <param name="toFocused">聚焦失效控件</param>
            <returns>失效数据事件数据</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ErrorProviderExtentions.InvokeSetError(System.Windows.Forms.ErrorProvider,System.Windows.Forms.Control,System.String)">
            <summary>
            显示失效数据信息（线程安全）
            </summary>
            <param name="errorProvider">DXErrorProvider</param>
            <param name="control">控件</param>
            <param name="errorMessage">信息</param>
        </member>
        <member name="T:Phenix.Core.Windows.BaseForm">
            <summary>
            基础窗体
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.#ctor">
            <summary>
            基础窗体
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.ExecuteMdi``1(System.Windows.Forms.Form)">
            <summary>
            执行MDI窗体
            isSingleton = true
            </summary>
            <param name="mdiParent">主窗体</param>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.ExecuteMdi``1(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            执行MDI窗体
            </summary>
            <param name="mdiParent">主窗体</param>
            <param name="isSingleton">是单例</param>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.FindMdi``1">
            <summary>
            移除MDI窗体
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.RemoveMdi(Phenix.Core.Windows.IForm)">
            <summary>
            移除MDI窗体
            </summary>
            <param name="mdiForm">MDI窗体</param>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.ExecuteDialog``1(System.Object)">
            <summary>
            执行Dialog窗体
            </summary>
            <param name="workSource">操作数据源</param>
        </member>
        <member name="P:Phenix.Core.Windows.BaseForm.KeyPreview">
            <summary>
            指示在将键事件传递到具有焦点的控件前窗体是否将接收此键事件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.BaseForm.EnterMoveNextControl">
            <summary>
            当输入回车键时选择下一个可用控件并使其成为活动控件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.BaseForm.PgUpMoveBackControl">
            <summary>
            当输入上页键时选择上一个可用控件并使其成为活动控件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.BaseForm.WorkSource">
            <summary>
            操作数据源
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.OnShown(System.EventArgs)">
            <summary>
            OnShown
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            OnFormClosed
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            OnKeyPress
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyDown
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.AnalyseMessage(System.Object)">
            <summary>
            分析消息
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.Activate(System.Windows.Forms.Form)">
            <summary>
            激活MDI窗体
            </summary>
            <param name="mdiParent">主窗体</param>
        </member>
        <member name="F:Phenix.Core.Windows.BaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Windows.BaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Windows.BindingSourceHelper">
            <summary>
            BindingSource助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceCurrent``1(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源Current值
            </summary>
            <param name="source">数据源</param>
            <returns>Current值</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceCurrent(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源Current值
            </summary>
            <param name="source">数据源</param>
            <returns>Current值</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceList``1(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源List值
            </summary>
            <param name="source">数据源</param>
            <returns>List值</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceList(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源List值
            </summary>
            <param name="source">数据源</param>
            <returns>List值</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSource(System.Object)">
            <summary>
            获取组件DataSource绑定的数据源
            </summary>
            <param name="component">组件</param>
            <returns>数据源</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetRootDataSource(System.Windows.Forms.BindingSource)">
            <summary>
            获取根数据源
            </summary>
            <param name="source">数据源</param>
            <returns>数据源</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceType(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源的类型
            </summary>
            <param name="source">数据源</param>
            <returns>类型</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.FindDataSourceTypes(System.ComponentModel.IContainer,System.Type)">
            <summary>
            检索数据源的类型
            </summary>
            <param name="container">组件容器</param>
            <param name="baseType">基础类型, 为 null 时不做过滤</param>
            <returns>匹配的类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.GetDataSourceCoreType(System.Windows.Forms.BindingSource)">
            <summary>
            获取数据源的核心类型
            </summary>
            <param name="source">数据源</param>
            <returns>类型</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.FindDataSourceCoreTypes(System.ComponentModel.IContainer,System.Type)">
            <summary>
            检索数据源的核心类型
            </summary>
            <param name="container">组件容器</param>
            <param name="baseType">基础类型, 为 null 时不做过滤</param>
            <returns>匹配的类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.FindCriteriaBindingSource(System.ComponentModel.IContainer,System.Windows.Forms.BindingSource)">
            <summary>
            检索数据源的条件数据源
            </summary>
            <param name="container">组件容器</param>
            <param name="source">数据源</param>
            <returns>匹配的条件数据源</returns>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.DataSourceIsEnumerable(System.Windows.Forms.BindingSource)">
            <summary>
            数据源DataSource是集合类型
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.SetDataSource(System.Windows.Forms.Control,System.Windows.Forms.BindingSource,System.Object,System.Object,System.Int32,System.Object,System.String)">
            <summary>
            为数据源DataSource赋值
            </summary>
            <param name="container">控件容器</param>
            <param name="source">数据源</param>
            <param name="data">数据</param>
            <param name="locateItem">定位项</param>
            <param name="locatePositionMaximum">定位游标极限</param>
            <param name="hintComponent">用于填写提示信息</param>
            <param name="hint">提示信息</param>
        </member>
        <member name="M:Phenix.Core.Windows.BindingSourceHelper.LocatePosition(System.Windows.Forms.BindingSource,System.Object,System.Int32)">
            <summary>
            定位数据源游标
            </summary>
        </member>
        <member name="T:Phenix.Core.Windows.ControlHelper">
            <summary>
            Control助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.SetFocus(System.Windows.Forms.Control)">
            <summary>
            设置焦点
            </summary>
            <param name="control">控件</param>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.InvokeSetFocus(System.Windows.Forms.Control)">
            <summary>
            设置焦点（线程安全）
            </summary>
            <param name="control">控件</param>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.ResetFocus(System.Windows.Forms.Control)">
            <summary>
            重置焦点
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.FindControls``1(System.Windows.Forms.Control)">
            <summary>
            检索指定类型T的全部控件
            </summary>
            <param name="container">控件容器</param>
            <returns>匹配的控件队列</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.FindFriendlyCaption(System.Windows.Forms.Control)">
            <summary>
            匹配指定控件的标签控件
            </summary>
            <param name="control">控件</param>
            <returns>匹配的标签控件</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.FindViewControls(System.Windows.Forms.Control,System.Windows.Forms.BindingSource)">
            <summary>
            检索绑定到指定BindingSource的全部视图控件
            返回值按照TabIndex排序
            </summary>
            <param name="container">控件容器</param>
            <param name="source">数据源</param>
            <returns>匹配的控件队列</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.FindEditControls(System.Windows.Forms.Control,System.Windows.Forms.BindingSource)">
            <summary>
            检索绑定到指定BindingSource的全部编辑控件
            返回值按照TabIndex排序
            </summary>
            <param name="container">控件容器</param>
            <param name="source">数据源</param>
            <returns>匹配的编辑控件队列</returns>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.SetEditControlValue(System.Windows.Forms.Control,System.Object)">
            <summary>
            为编辑控件赋值
            </summary>
            <param name="control">控件</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.SaveCriteriaBindingSourceData(System.Windows.Forms.Control,System.Windows.Forms.BindingSource,System.Windows.Forms.BindingSource)">
            <summary>
            保存条件数据源的记录
            </summary>
            <param name="container">控件容器</param>
            <param name="criteriaSource">条件数据源</param>
            <param name="userSource">使用数据源</param>
        </member>
        <member name="M:Phenix.Core.Windows.ControlHelper.RestoreCriteriaBindingSourceData(System.Windows.Forms.Control,System.Windows.Forms.BindingSource,System.Windows.Forms.BindingSource,System.Boolean)">
            <summary>
            恢复条件数据源的记录
            </summary>
            <param name="container">控件容器</param>
            <param name="criteriaSource">条件数据源</param>
            <param name="userSource">使用数据源</param>
            <param name="reset">是否强制覆盖, true表示虽然条件数据源已有数据也将被备份数据覆盖</param>
        </member>
        <member name="T:Phenix.Core.Windows.DataInvalidEventArgs">
            <summary>
            失效数据事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.DataInvalidEventArgs.#ctor(System.Windows.Forms.BindingSource,System.Int32,System.Windows.Forms.Control,System.String)">
            <summary>
            初始化
            </summary>
            <param name="source">失效数据所在的数据源</param>
            <param name="position">失效数据所在的数据源游标</param>
            <param name="control">失效数据所在的控件</param>
            <param name="message">提示信息</param>
        </member>
        <member name="P:Phenix.Core.Windows.DataInvalidEventArgs.Source">
            <summary>
            失效数据所在的数据源
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.DataInvalidEventArgs.Position">
            <summary>
            失效数据所在数据源的游标
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.DataInvalidEventArgs.Control">
            <summary>
            失效数据所在的控件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.DataInvalidEventArgs.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="T:Phenix.Core.Windows.DialogForm">
            <summary>
            基础窗体
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.DialogForm.#ctor">
            <summary>
            基础窗体
            </summary>
        </member>
        <member name="F:Phenix.Core.Windows.DialogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.DialogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Windows.DialogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Windows.IForm">
            <summary>
            窗体接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.IForm.KeyPreview">
            <summary>
            指示在将键事件传递到具有焦点的控件前窗体是否将接收此键事件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.IForm.EnterMoveNextControl">
            <summary>
            当输入回车键时选择下一个可用控件并使其成为活动控件
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.IForm.WorkSource">
            <summary>
            操作数据源
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.IForm.WindowState">
            <summary>
            指定窗口如何显示
            </summary>
        </member>
        <member name="P:Phenix.Core.Windows.IForm.StartPosition">
            <summary>
            指定窗体的初始位置
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.IForm.AnalyseMessage(System.Object)">
            <summary>
            分析消息
            由 PluginHost 调用
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Windows.IForm.Activate(System.Windows.Forms.Form)">
            <summary>
            激活MDI窗体
            </summary>
            <param name="mdiParent">主窗体</param>
        </member>
        <member name="M:Phenix.Core.Windows.IForm.ShowDialog">
            <summary>
            显示对话框
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phenix.Core.Windows.ShowMessageDialog">
            <summary>
            消息框
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ShowMessageDialog.#ctor(System.String)">
            <summary>
            消息框
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ShowMessageDialog.Execute(System.String,System.String)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ShowMessageDialog.AddMessage(System.String)">
            <summary>
            添加信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Windows.ShowMessageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Windows.ShowMessageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Windows.ShowMessageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.IActivity">
            <summary>
            工作流活动接口
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.IJointActivity">
            <summary>
            断点活动接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IJointActivity.PluginAssemblyName">
            <summary>
            插件程序集名
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IJointActivity.WorkerRole">
            <summary>
            作业角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IJointActivity.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IJointActivity.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IJointActivity.Urgent">
            <summary>
            是否急件
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.InstanceHost">
            <summary>
            工作流实体容器
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.#ctor(System.ComponentModel.IContainer)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.InstanceHost.Default">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.CreateAndRun(Phenix.Core.Workflow.IStartCommand)">
            <summary>
            构建并执行实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.CreateAndRun(Phenix.Core.Workflow.IStartCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            构建并执行实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.LoadInstance(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            加载实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.LoadInstance(Phenix.Core.Workflow.WorkflowTaskInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            加载实体
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.CanResumeBookmark(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            书签是否被挂起
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.ResumeBookmark(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            启动操作以恢复书签
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceHost.HaveBookmark(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            是否存在挂起的书签
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
            <summary>
            永久性提供程序可实现此方法
            这可确定是否可执行特定的永久性指令和是否可异步执行此指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            永久性提供程序可实现此方法
            这可确定是否可执行特定的永久性指令
            如果可以执行此指令，请异步执行此指令
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.InstanceStore.EndTryCommand(System.IAsyncResult)">
            <summary>
            结束异步操作
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.IWorkflow">
            <summary>
            工作流接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IWorkflow.WorkflowInfos">
            <summary>
            工作流资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IWorkflow.WorkflowInfoChangedTime">
            <summary>
            工作流资料更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.WorkflowInfoHasChanged">
            <summary>
            工作流资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.AddWorkflowInfo(System.String,System.String,System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            新增工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.DisableWorkflowInfo(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            禁用工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.SaveWorkflowInstance(System.Guid,System.String,System.String,System.String,Phenix.Core.Workflow.TaskContext)">
            <summary>
            保存工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.FetchWorkflowInstance(System.Guid)">
            <summary>
            检索工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.ClearWorkflowInstance(System.Guid)">
            <summary>
            清除工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.DispatchWorkflowTask(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发布工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.ReceiveWorkflowTask(System.Guid,System.String)">
            <summary>
            收到工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.HoldWorkflowTask(System.Guid,System.String)">
            <summary>
            挂起工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.AbortWorkflowTask(System.Guid,System.String)">
            <summary>
            中断工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.ProceedWorkflow(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            继续工作流
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.CompleteWorkflowTask(System.Guid,System.String)">
            <summary>
            完结工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.IWorkflow.FetchWorkflowTask(Phenix.Core.Workflow.TaskState,System.DateTime,System.DateTime,Phenix.Core.Security.UserIdentity)">
            <summary>
            检索工作流任务
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.IStartCommand">
            <summary>
            工作流启动指令接口
            与WorkflowIdentityAttribute配套使用
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.IStartCommand.TaskContext">
            <summary>
            任务上下文
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.TaskContext">
            <summary>
            任务上下文
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.Object)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.Object,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.Object,System.Boolean)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.String,System.Object,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.TaskContext.#ctor(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.TaskContext.WorkerUserNumber">
            <summary>
            作业工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.TaskContext.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.TaskContext.NeedLeaveTrace">
            <summary>
            需要留下痕迹?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.TaskContext.DispatchUserNumber">
            <summary>
            发布工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.TaskContext.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.TaskState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.TaskState.Dispatch">
            <summary>
            已发送
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.TaskState.Received">
            <summary>
            已送达
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.TaskState.Holded">
            <summary>
            已挂起
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.TaskState.Aborted">
            <summary>
            已中断
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.TaskState.Completed">
            <summary>
            已完结
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.Windows.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.Windows.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.Windows.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.Windows.Resources.WorkflowTypeSelect">
            <summary>
              查找类似 workflow type select 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog">
            <summary>
            选择工作流类型对话框
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.Execute(System.String)">
            <summary>
            执行
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.SelectedWorkflowIdentityInfo">
            <summary>
            被选择的工作流标识信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Phenix.Core.Workflow.Windows.WorkflowTypeSelectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.WorkflowHub">
            <summary>
            工作流中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowHub.WorkflowInfos">
            <summary>
            工作流资料队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowHub.WorkflowInfoChangedTime">
            <summary>
            工作流资料更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.RefreshCache(System.Boolean)">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.AllInfoHasChanged">
            <summary>
            所有资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.WorkflowInfoHasChanged">
            <summary>
            工作流资料已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.RefreshWorkflowInfos(System.Boolean)">
            <summary>
            刷新工作流资料队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.GetWorkflowInfo(System.String,System.String,System.Boolean)">
            <summary>
            取工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.GetWorkflowInfo(Phenix.Core.Workflow.IStartCommand,System.Boolean)">
            <summary>
            取工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.GetWorkflowInfo(Phenix.Core.Workflow.WorkflowTaskInfo,System.Boolean)">
            <summary>
            取工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.AddWorkflowInfo(Phenix.Core.Workflow.WorkflowInfo)">
            <summary>
            新增工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.AddWorkflowInfo(Phenix.Core.Workflow.WorkflowInfo,Phenix.Core.Security.UserIdentity)">
            <summary>
            新增工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.AddWorkflowInfo(System.String,System.String,System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            新增工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DisableWorkflowInfo(Phenix.Core.Workflow.WorkflowInfo)">
            <summary>
            禁用工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DisableWorkflowInfo(Phenix.Core.Workflow.WorkflowInfo,Phenix.Core.Security.UserIdentity)">
            <summary>
            禁用工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DisableWorkflowInfo(System.String,System.String)">
            <summary>
            禁用工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DisableWorkflowInfo(System.String,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            禁用工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.SaveWorkflowInstance(System.Guid,System.String,System.String,System.String,Phenix.Core.Workflow.TaskContext)">
            <summary>
            保存工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.FetchWorkflowInstance(System.Guid)">
            <summary>
            检索工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.ClearWorkflowInstance(System.Guid)">
            <summary>
            清除工作流实例
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DispatchWorkflowTask(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发布工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.DispatchWorkflowTask(System.Guid,System.String,Phenix.Core.Workflow.IJointActivity)">
            <summary>
            发布工作流任务
            </summary>
            <param name="id">工作流实例句柄</param>
            <param name="bookmarkName">书签名称</param>
            <param name="jointActivity">断点活动</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.ReceiveWorkflowTask(System.Guid,System.String)">
            <summary>
            收到工作流任务
            </summary>
            <param name="id">工作流实例句柄</param>
            <param name="bookmarkName">书签名称</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.HoldWorkflowTask(System.Guid,System.String)">
            <summary>
            挂起工作流任务
            </summary>
            <param name="id">工作流实例句柄</param>
            <param name="bookmarkName">书签名称</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.AbortWorkflowTask(System.Guid,System.String)">
            <summary>
            中断工作流任务
            </summary>
            <param name="id">工作流实例句柄</param>
            <param name="bookmarkName">书签名称</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.ProceedWorkflow(Phenix.Core.Workflow.WorkflowTaskInfo)">
            <summary>
            继续工作流
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.CompleteWorkflowTask(System.Guid,System.String)">
            <summary>
            完结工作流任务
            </summary>
            <param name="id">工作流实例句柄</param>
            <param name="bookmarkName">书签名称</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.FetchWorkflowTask(Phenix.Core.Workflow.TaskState,System.DateTime,System.DateTime)">
            <summary>
            检索工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.FetchWorkflowTask(Phenix.Core.Workflow.TaskState,System.DateTime,System.DateTime,Phenix.Core.Security.UserIdentity)">
            <summary>
            检索工作流任务
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.GetWorkflowIdentityInfo(System.Type,System.Boolean)">
            <summary>
            取工作流标识信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowHub.GetWorkflowIdentityInfo(Phenix.Core.Workflow.IStartCommand,System.Boolean)">
            <summary>
            取工作流标识信息
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.WorkflowIdentityAttribute">
            <summary>
            "工作流标识"标签
            与IStartCommand配套使用
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowIdentityAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="typeNamespace">命名空间</param>
            <param name="typeName">类型名称</param>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowIdentityAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="typeNamespace">命名空间</param>
            <param name="typeName">类型名称</param>
            <param name="caption">标签</param>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityAttribute.TypeNamespace">
            <summary>
            命名空间
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityAttribute.TypeName">
            <summary>
            类型名称
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityAttribute.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.WorkflowIdentityInfo">
            <summary>
            工作流标识信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityInfo.TypeNamespace">
            <summary>
            命名空间
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityInfo.TypeName">
            <summary>
            类型名称
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityInfo.FullTypeName">
            <summary>
            完整类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowIdentityInfo.Caption">
            <summary>
            标签
            </summary> 
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowIdentityInfo.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.WorkflowInfo">
            <summary>
            工作流资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowInfo.New(System.String,System.String,System.String,System.String,Phenix.Core.Security.IIdentity)">
            <summary>
            新增
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.TypeNamespace">
            <summary>
            命名空间
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.FullTypeName">
            <summary>
            完整类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.XamlCode">
            <summary>
            xaml代码
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.ActivityDefinition">
            <summary>
            活动定义
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.CreateUserNumber">
            <summary>
            构建工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.CreateTime">
            <summary>
            构建时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.ChangeUserNumber">
            <summary>
            更新工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.ChangeTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.DisableUserNumber">
            <summary>
            禁用工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowInfo.DisableTime">
            <summary>
            禁用时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowInfo.SaveToFile">
            <summary>
            保存到文件
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowInfo.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Workflow.WorkflowTaskInfo">
            <summary>
            工作流任务资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.#ctor(System.Guid,System.String,System.String,Phenix.Core.Workflow.TaskContext,System.String,System.String,System.String,System.String,System.String,System.Boolean,Phenix.Core.Workflow.TaskState,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.WorkflowInstanceId">
            <summary>
            工作流实例句柄
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.TypeNamespace">
            <summary>
            命名空间
            </summary> 
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.TaskContext">
            <summary>
            任务上下文
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.WorkerUserNumber">
            <summary>
            作业工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.DispatchUserNumber">
            <summary>
            发布工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.BookmarkName">
            <summary>
            书签名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.PluginAssemblyName">
            <summary>
            插件程序集名
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.WorkerRole">
            <summary>
            作业角色
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.Urgent">
            <summary>
            急件
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.State">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.DispatchTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.ReceiveTime">
            <summary>
            接收时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.HoldTime">
            <summary>
            挂起时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.AbortTime">
            <summary>
            中断时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Workflow.WorkflowTaskInfo.CompleteTime">
            <summary>
            完结时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.Receive">
            <summary>
            收到
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.Hold">
            <summary>
            挂起
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.Abort">
            <summary>
            中断
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.ProceedWorkflow">
            <summary>
            继续工作流
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Workflow.WorkflowTaskInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Phenix.Core.ComponentModel.ComponentHelper">
            <summary>
            Component助手
            </summary>
        </member>
        <member name="M:Phenix.Core.ComponentModel.ComponentHelper.FindComponents``1(System.ComponentModel.IContainer)">
            <summary>
            检索指定类型T的全部组件
            </summary>
            <param name="container">组件容器</param>
            <returns>匹配的组件队列</returns>
        </member>
        <member name="M:Phenix.Core.ComponentModel.ComponentHelper.AddComponent(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.String)">
            <summary>
            添加组件
            </summary>
            <param name="container">组件容器</param>
            <param name="component">组件</param>
            <param name="defaultName">缺省名称</param>
        </member>
        <member name="T:Phenix.Core.Code.Pinyin">
            <summary>
            拼音
            </summary>
        </member>
        <member name="M:Phenix.Core.Code.Pinyin.Abbreviation(System.String)">
            <summary>
            文本缩写
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="T:Phenix.Core.Code.Converter">
            <summary>
            转换器
            </summary>
        </member>
        <member name="P:Phenix.Core.Code.Converter.NullSymbolic">
            <summary>
            Null符号
            </summary>
        </member>
        <member name="M:Phenix.Core.Code.Converter.BytesToString(System.Byte[])">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="sourceBuffer">字节数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.StringToBytes(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="sourceBuffer">字符串</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.BytesToHexString(System.Byte[])">
            <summary>
            字节数组转换成Hex字符串
            </summary>
            <param name="sourceBuffer">字节数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.HexStringToBytes(System.String)">
            <summary>
            Hex字符串转换成字节数组
            </summary>
            <param name="sourceBuffer">Hex字符串</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.ReplaceString(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            替换字符串
            </summary>
            <param name="source">源字符串</param>
            <param name="oldPattern">旧段落</param>
            <param name="newPattern">新段落</param>
            <param name="comparisonType">搜索类型</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.BooleanToSymbolic(System.Boolean)">
            <summary>
            布尔转换成符号
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToValues(System.Enum[])">
            <summary>
            将枚举数组替换成值组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToValues(System.Char,System.Enum[])">
            <summary>
            将枚举数组替换成值组合
            </summary>
            <param name="separator">标签分隔符</param>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToValues``1(``0[])">
            <summary>
            将枚举数组替换成值组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToValues``1(System.Char,``0[])">
            <summary>
            将枚举数组替换成值组合
            </summary>
            <param name="separator">标签分隔符</param>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.ValuesToEnumArray``1(System.String)">
            <summary>
            将值组合替换成枚举数组
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="values">值组合</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.ValuesToEnumArray``1(System.String,System.Char)">
            <summary>
            将值组合替换成枚举数组
            </summary>
            <param name="values">值组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToFlags(System.Enum[])">
            <summary>
            将枚举数组替换成标记组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToFlags(System.Char,System.Enum[])">
            <summary>
            将枚举数组替换成标记组合
            </summary>
            <param name="separator">标签分隔符</param>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToFlags``1(``0[])">
            <summary>
            将枚举数组替换成标记组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.EnumArrayToFlags``1(System.Char,``0[])">
            <summary>
            将枚举数组替换成标记组合
            </summary>
            <param name="separator">标签分隔符</param>
            <param name="enums">枚举数组</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.FlagsToEnumArray``1(System.String)">
            <summary>
            将标记组合替换成枚举数组
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="flags">标记组合</param>
        </member>
        <member name="M:Phenix.Core.Code.Converter.FlagsToEnumArray``1(System.String,System.Char)">
            <summary>
            将标记组合替换成枚举数组
            </summary>
            <param name="flags">标记组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="T:Phenix.Core.MessageNotifyType">
            <summary>
            消息通报类型
            </summary>
        </member>
        <member name="F:Phenix.Core.MessageNotifyType.Information">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Phenix.Core.MessageNotifyType.Warning">
            <summary>
            注意
            </summary>
        </member>
        <member name="F:Phenix.Core.MessageNotifyType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Phenix.Core.Log.EventLogInfo">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.EventLogInfo.#ctor(System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="time">时间</param>
            <param name="userNumber">登录工号</param>
            <param name="message">消息</param>
            <param name="exceptionName">错误名</param>
            <param name="exceptionMessage">错误消息</param>
        </member>
        <member name="P:Phenix.Core.Log.EventLogInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLogInfo.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLogInfo.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLogInfo.ExceptionName">
            <summary>
            错误名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLogInfo.ExceptionMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Log.ExecuteActionInfo">
            <summary>
            执行动作信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.ExecuteActionInfo.#ctor(System.DateTime,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,Phenix.Core.Mapping.FieldMapInfo,System.Object,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="time">时间</param>
            <param name="userNumber">登录工号</param>
            <param name="entityCaption">实体标签</param>
            <param name="action">执行动作</param>
            <param name="fieldMapInfo">数据映射字段信息</param>
            <param name="oldFieldValue">旧字段值</param>
            <param name="newFieldValue">新字段值</param>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.EntityCaption">
            <summary>
            实体标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.Action">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.ActionCaption">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.FieldMapInfo">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.OldFieldValue">
            <summary>
            旧字段值
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.NewFieldValue">
            <summary>
            新字段值
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.ExecuteActionInfo.ChangeInfo">
            <summary>
            变更信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.ExecuteActionInfo.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Log.EventLog">
            <summary>
            事件日志
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.Enabled">
            <summary>
            需要保存日志?
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.MustSaveLog">
            <summary>
            是否必须记录日志?
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String)">
            <summary>
            保存日志
            </summary>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String,System.String)">
            <summary>
            保存错误日志
            </summary>
            <param name="log">日志</param>
            <param name="extension">后缀</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String,System.Exception)">
            <summary>
            保存错误日志
            </summary>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String,System.Exception,System.String)">
            <summary>
            保存错误日志
            </summary>
            <param name="log">日志</param>
            <param name="error">错误</param>
            <param name="extension">后缀</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="objectType">类</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="objectType">类</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Type,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Type,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Type,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="objectType">类</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Type,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="objectType">类</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Type,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Type,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Type,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Type,System.Reflection.MethodBase,System.String)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Type,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Type,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Type,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Type,System.Reflection.MethodBase,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Type,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Type,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IPrincipal,System.Type,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="user">登录用户</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Security.IIdentity,System.Type,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
            <param name="identity">用户身份</param>
            <param name="objectType">类</param>
            <param name="method">函数的信息</param>
            <param name="log">日志</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Fetch(System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            userNumber = null
            objectType = null
            </summary>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>日志队列</returns>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Fetch(System.String,System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            objectType = null
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>日志队列</returns>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Fetch(System.String,System.Type,System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="objectType">类, null代表全部</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>日志队列</returns>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Clear(System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            userNumber = null
            objectType = null
            </summary>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Clear(System.String,System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            objectType = null
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Clear(System.String,System.Type,System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="objectType">类, null代表全部</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="T:Phenix.Core.Log.IPermanentLog">
            <summary>
            持久化日志接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.Save(System.String,System.String,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.Fetch(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.Clear(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.SaveExecuteAction(System.String,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.String)">
            <summary>
            保存对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.FetchExecuteAction(System.String,System.String)">
            <summary>
            检索对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.FetchExecuteAction(System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            检索对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.ClearExecuteAction(System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.IPermanentLog.SaveRenovate(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.ExecuteAction,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue})">
            <summary>
            保存对象持久化的动态刷新
            </summary>
        </member>
        <member name="T:Phenix.Core.Log.PermanentLogHub">
            <summary>
            持久化日志中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.PermanentLogHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(System.Type,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(Phenix.Core.Security.IPrincipal,System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(Phenix.Core.Security.IPrincipal,System.Type,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(Phenix.Core.Security.IIdentity,System.Type,System.String)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(Phenix.Core.Security.IIdentity,System.Type,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Save(System.String,System.String,System.String,System.Exception)">
            <summary>
            保存对象消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Fetch(System.String,System.Type,System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Fetch(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            检索日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Clear(System.String,System.Type,System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.Clear(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            清除日志消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.SaveExecuteAction(System.Type,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue})">
            <summary>
            保存对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.SaveExecuteAction(Phenix.Core.Security.IPrincipal,System.Type,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue})">
            <summary>
            保存对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.SaveExecuteAction(Phenix.Core.Security.IIdentity,System.Type,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue},System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue})">
            <summary>
            保存对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.SaveExecuteAction(System.String,System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.String)">
            <summary>
            保存对象持久化的执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.FetchExecuteAction(System.String,System.String)">
            <summary>
            检索对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.FetchExecuteAction(System.Type,System.String)">
            <summary>
            检索对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.FetchExecuteAction(System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            检索对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.FetchExecuteAction(System.String,System.Type,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            检索对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.ClearExecuteAction(System.String,System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.ClearExecuteAction(System.String,System.Type,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除对象执行动作
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.PermanentLogHub.SaveRenovate(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.ExecuteAction,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldValue})">
            <summary>
            保存对象持久化的动态刷新
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.IKeyCaption">
            <summary>
            对象选择接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.IKeyCaption.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.IKeyCaption.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.IKeyCaption.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.IKeyCaption.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.IKeyCaptionCollection">
            <summary>
            对象选择接口
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.KeyCaptionAttribute">
            <summary>
            "键-标签"标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionAttribute.EnFriendlyName">
            <summary>
            指示该类的友好名
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionAttribute.FriendlyName">
            <summary>
            指示该类的友好名
            用于提示信息中
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnFriendlyName
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.ISelectable">
            <summary>
            对象勾选接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.ISelectable.Owner">
            <summary>
            所属对象勾选集合
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.ISelectable.Selected">
            <summary>
            是否被勾选
            用于标记本对象
            缺省为 false
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.ISelectable.SelectedValueChanging">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.ISelectable.SelectedValueChanged">
            <summary>
            Selected属性值被更改后
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.ISelectableCollection">
            <summary>
            对象勾选集合接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.ISelectableCollection.SelectedItems">
            <summary>
            被勾选的对象队列
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.ISelectableCollection.ItemSelectedValueChanging">
            <summary>
            勾选项被更改前
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.ISelectableCollection.ItemSelectedValueChanged">
            <summary>
            勾选项被更改后
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.ISelectableCollection.SelectAll">
            <summary>
            勾选所有
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.ISelectableCollection.UnselectAll">
            <summary>
            取消所有勾选
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.ISelectableCollection.InverseAll">
            <summary>
            反选所有
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.KeyCaption">
            <summary>
            枚举"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption.#ctor(System.Object,System.String,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="key">键</param>
            <param name="caption">标签</param>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.KeyCaption`2">
            <summary>
            "键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.#ctor(System.Object,System.String,`1)">
            <summary>
            初始化
            </summary>
            <param name="key">键</param>
            <param name="caption">标签</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.FetchSelf(System.Data.IDataRecord,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Operate.KeyCaption`2.KeyProperty">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:Phenix.Core.Operate.KeyCaption`2.CaptionProperty">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.OldFieldValues">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.DeletedAsDisabled">
            <summary>
            删除即禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.IsDisabled">
            <summary>
            是否已禁用
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.NeedCheckDirty">
            <summary>
            校验数据库数据在下载到提交期间是否被更改过
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="F:Phenix.Core.Operate.KeyCaption`2.ValueProperty">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Tag">
            <summary>
            包含关联数据的对象
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Owner">
            <summary>
            所属对象勾选集合
            </summary>
        </member>
        <member name="F:Phenix.Core.Operate.KeyCaption`2.SelectedProperty">
            <summary>
            是否被选择
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaption`2.Selected">
            <summary>
            是否被勾选
            用于标记本对象
            缺省为 false
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.KeyCaption`2.SelectedValueChanging">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.OnSelectedValueChanging">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.KeyCaption`2.SelectedValueChanged">
            <summary>
            Selected属性值被更改后
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.OnSelectedValueChanged">
            <summary>
            Selected属性值被更改后
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.KeyCaption`2.PropertyChanged">
            <summary>
            在更改属性值时发生
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.PropertyHasChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.MarkFetched">
            <summary>
            标为 IsNew = false 且 IsSelfDeleted = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            ignoreCompare = false
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="ignoreCompare">忽略比较新旧值(仅判断是否被赋值过)</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.GetOldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取最原始的属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{System.Object},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterMethod(System.Type,System.String,System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="objectType">方法所属类</param>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaption`2.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.KeyCaptionCollection">
            <summary>
            枚举"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection.#ctor(System.Type)">
            <summary>
            初始化
            </summary>
            <param name="itemValueType">项值类型</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection.#ctor(System.Type,System.Collections.Generic.IList{Phenix.Core.Operate.KeyCaption})">
            <summary>
            初始化
            </summary>
            <param name="itemValueType">项值类型</param>
            <param name="list">项值队列</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection.Fetch``1(System.Collections.Generic.IList{``0},Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            根据实体队列构建填充
            </summary>
            <param name="source">数据源</param>
            <param name="keyPropertyInfo">键所在属性</param>
            <param name="captionPropertyInfo">标签所在属性</param>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection.ItemValueType">
            <summary>
            项值类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.KeyCaptionCollection`2">
            <summary>
            "键-标签"数组
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.ItemValueType">
            <summary>
            项值类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.SelfFetching">
            <summary>
            正在检索中
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.KeyCaptionCollection`2.SelectedItems">
            <summary>
            被勾选的对象队列
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.KeyCaptionCollection`2.ItemSelectedValueChanging">
            <summary>
            勾选项被更改前
            </summary>
        </member>
        <member name="E:Phenix.Core.Operate.KeyCaptionCollection`2.ItemSelectedValueChanged">
            <summary>
            勾选项被更改后
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.FindByKey(System.Object)">
            <summary>
            检索第一个匹配对象
            根据 Key 匹配
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.FindByValue(`1)">
            <summary>
            检索第一个匹配对象
            根据 Value 匹配
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.InsertItem(System.Int32,`0)">
            <summary>
            添加项到集合中
            </summary>
            <param name="index">索引</param>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.SetItem(System.Int32,`0)">
            <summary>
            使用指定项替换指定索引处的项
            </summary>
            <param name="index">索引</param>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.RemoveItem(System.Int32)">
            <summary>
            移除指定索引处的项
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.SelectAll(System.Boolean,System.Predicate{`0})">
            <summary>
            按照条件勾选
            </summary>
            <param name="toSelected">使得被勾选</param>
            <param name="match">定义要勾选的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.SelectAll(System.Boolean)">
            <summary>
            勾选所有
            match = null
            </summary>
            <param name="toSelected">使得被勾选</param>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.SelectAll">
            <summary>
            勾选所有
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.UnselectAll">
            <summary>
            取消所有勾选
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.InverseAll">
            <summary>
            反选所有
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.GetValues">
            <summary>
            获取值的集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.KeyCaptionCollection`2.GetValues``1">
            <summary>
            获取值的集合
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.SelectedValueChangedEventArgs">
            <summary>
            Selected属性值被更改后事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.SelectedValueChangedEventArgs.#ctor(Phenix.Core.Operate.ISelectable)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.SelectedValueChangedEventArgs.Selectable">
            <summary>
            勾选项
            </summary>
        </member>
        <member name="T:Phenix.Core.Operate.SelectedValueChangingEventArgs">
            <summary>
            Selected属性值被更改前事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Operate.SelectedValueChangingEventArgs.#ctor(Phenix.Core.Operate.ISelectable)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Operate.SelectedValueChangingEventArgs.Selectable">
            <summary>
            勾选项
            </summary>
        </member>
        <member name="T:Phenix.Core.StopEventArgs">
            <summary>
            阻塞事件数据
            </summary>
        </member>
        <member name="P:Phenix.Core.StopEventArgs.Stop">
            <summary>
            是否终止
            依此判断是否需要后续的处理过程
            缺省为 false
            </summary>
        </member>
        <member name="T:Phenix.Core.ShallEventArgs">
            <summary>
            要不要…事件数据
            Stop+：终止事件流，业务码完全接管事件处理过程及其状态变化
            Stop-Applied-：代表框架需继续实施常规的处理过程及其状态变化
            Stop-Applied+Succeed+：代表框架不必实施常规的处理过程，但仍处理业务码已成功处理的状态变化
            Stop-Applied+Succeed-：代表框架不必实施常规的处理过程，但仍处理业务码未成功处理的状态变化
            </summary>
        </member>
        <member name="M:Phenix.Core.ShallEventArgs.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.ShallEventArgs.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="applied">是否已应用</param>
        </member>
        <member name="P:Phenix.Core.ShallEventArgs.Applied">
            <summary>
            是否已应用
            依此判断是否需要实施常规的处理过程
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.ShallEventArgs.Succeed">
            <summary>
            是否已成功
            依此判断是否需要更改相应的成功标志等
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Core.ShallEventArgs.Message">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="T:Phenix.Core.Renovate.IAnalyser">
            <summary>
            分析者
            </summary>
        </member>
        <member name="M:Phenix.Core.Renovate.IAnalyser.AnalyseDataKeyInfo(System.Int32)">
            <summary>
            分析数据集键资料
            </summary>
            <param name="dataKeyCount">数据集键数</param>
        </member>
        <member name="M:Phenix.Core.Renovate.IAnalyser.AnalyseDataInfo(System.Data.DataTable)">
            <summary>
            分析数据集资料
            </summary>
            <param name="data">数据集</param>
        </member>
        <member name="M:Phenix.Core.Renovate.IAnalyser.AnalyseRenovateInfo(Phenix.Core.Mapping.ExecuteAction,System.Object[])">
            <summary>
            分析动态刷新资料
            </summary>
            <param name="action">执行动作</param>
            <param name="values">值数组</param>
        </member>
        <member name="M:Phenix.Core.Renovate.IAnalyser.LoadData">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.CriteriaExpressionKeyCaption">
            <summary>
            条件表达式"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaption.#ctor(System.String,System.String,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Rule.ReadLevel,System.DateTime,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaption.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaption.ReadLevel">
            <summary>
            读取级别
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaption.Addtime">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaption.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaption.New(Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection,Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.IIdentity)">
            <summary>
            新建条件表达式"键-标签"
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaption.AddCriteriaExpressionGroup(Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection)">
            <summary>
            添加条件表达式组
            (False or Group_N or Group_1) And Group0
            </summary>
            <param name="criteriaExpressionProperties">条件表达式属性</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaption.RemoveCriteriaExpressionGroup(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            移除条件表达式组
            </summary>
            <param name="criteriaExpressionGroup">条件表达式组</param>
        </member>
        <member name="T:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection">
            <summary>
            条件表达式"键-标签"数组
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.#ctor(System.String,System.Nullable{System.DateTime})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Fetch(System.Type,System.String)">
            <summary>
            构建
            </summary>
            <param name="ownerType">所属类</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Fetch``1(System.String)">
            <summary>
            构建
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Fetch(System.Type,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.ActionTime">
            <summary>
            活动时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.FetchCriteriaExpressionProperties">
            <summary>
            构建条件表达式属性"键-标签"数组
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.FetchCriteriaExpressionProperties(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            构建条件表达式属性"键-标签"数组
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Save(Phenix.Core.Rule.CriteriaExpressionKeyCaption)">
            <summary>
            保存条件表达式"键-标签"
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Save(Phenix.Core.Rule.CriteriaExpressionKeyCaption,Phenix.Core.Security.UserIdentity)">
            <summary>
            保存条件表达式"键-标签"
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Remove(Phenix.Core.Rule.CriteriaExpressionKeyCaption)">
            <summary>
            移除条件表达式"键-标签"
            根据 Key 匹配
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionKeyCaptionCollection.Equals(System.Type)">
            <summary>
            比较类型
            主要用于IDE环境
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaption">
            <summary>
            条件表达式属性"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaption.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection">
            <summary>
            条件表达式属性"键-标签"数组
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection.BuildSelectedCriteriaExpressionGroup">
            <summary>
            构建被选择的条件表达式组
            Node_N = DefaultValue And ... Node_1 = DefaultValue And True
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection.AddSelectedCriteriaExpression(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            添加被选择的条件表达式
            Node_N = DefaultValue And ... Node_1 = DefaultValue And True
            </summary>
            <param name="criteriaExpressionGroup">被添加的条件表达式组</param>
        </member>
        <member name="M:Phenix.Core.Rule.CriteriaExpressionPropertyKeyCaptionCollection.GetSelectedItems">
            <summary>
            返回被选择的条件表达式属性"键-标签"数组
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.ReadLevel">
            <summary>
            数据读取级别
            </summary>
        </member>
        <member name="F:Phenix.Core.Rule.ReadLevel.Public">
            <summary>
            公共
            </summary>
        </member>
        <member name="F:Phenix.Core.Rule.ReadLevel.Private">
            <summary>
            私有
            </summary>
        </member>
        <member name="F:Phenix.Core.Rule.ReadLevel.Department">
            <summary>
            同部门
            </summary>
        </member>
        <member name="F:Phenix.Core.Rule.ReadLevel.Position">
            <summary>
            同岗位
            </summary>
        </member>
        <member name="F:Phenix.Core.Rule.ReadLevel.DepartmentPosition">
            <summary>
            同部门同岗位
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.EnumCaptionAttribute">
            <summary>
            "Enum字段"标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumCaptionAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="caption">标签</param>
        </member>
        <member name="P:Phenix.Core.Rule.EnumCaptionAttribute.Key">
            <summary>
            键, 为 null 时采用枚举Value.ToString("d")
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumCaptionAttribute.EnCaption">
            <summary>
            英文标签, 为 null 时采用枚举Value.ToString()
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumCaptionAttribute.Caption">
            <summary>
            标签, 为 null 时采用枚举Value.ToString()
            Thread.CurrentThread.CurrentCulture.Name 为非'zh-'时返回 EnCaption
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumCaptionAttribute.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.EnumKeyCaptionCollection">
            <summary>
            枚举"键-标签"数组
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Fetch(System.Type)">
            <summary>
            根据枚举类型定义构建
            match = null
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Fetch(System.Type,System.Predicate{Phenix.Core.Rule.EnumKeyCaption})">
            <summary>
            根据枚举类型定义构建
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Fetch``1">
            <summary>
            根据枚举类型定义构建
            match = null
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Fetch``1(System.Predicate{Phenix.Core.Rule.EnumKeyCaption})">
            <summary>
            根据枚举类型定义构建
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Fetch``1(System.Predicate{``0})">
            <summary>
            根据枚举类型定义构建
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaptionCollection.EnumType">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaptionCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.CaptionsToFlags``1(System.String)">
            <summary>
            将标签组合替换成标记组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="captions">标签组合</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.CaptionsToFlags``1(System.String,System.Char)">
            <summary>
            将标签组合替换成标记组合
            </summary>
            <param name="captions">标签组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.FlagsToCaptions``1(System.String)">
            <summary>
            将标记组合替换成标签组合
            separator = AppConfig.VALUE_SEPARATOR
            </summary>
            <param name="flags">标记组合</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.FlagsToCaptions``1(System.String,System.Char)">
            <summary>
            将标记组合替换成标签组合
            </summary>
            <param name="flags">标记组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.TryGetValue``1(System.String,Phenix.Core.Rule.EnumKeyCaption@)">
            <summary>
            尝试取枚举"键-标签"
            </summary>
            <param name="caption">标签</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.Equals(System.Type)">
            <summary>
            比较类型
            主要用于IDE环境
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaptionCollection.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.EnumKeyCaption">
            <summary>
            枚举"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.Fetch(System.Enum)">
            <summary>
            根据枚举值构建填充
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Flag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.IndexNumber">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.EnumKeyCaption.Owner">
            <summary>
            所属对象集合
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.GetCaption(System.Enum)">
            <summary>
            取枚举标签
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.GetKey(System.Enum)">
            <summary>
            取枚举键
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.GetValue``1(System.String)">
            <summary>
            取枚举值
            </summary>
            <param name="caption">枚举值</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.CompareTo(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.CompareTo(Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.Compare(Phenix.Core.Rule.EnumKeyCaption,Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.op_Equality(Phenix.Core.Rule.EnumKeyCaption,Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.op_Inequality(Phenix.Core.Rule.EnumKeyCaption,Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            不等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.op_LessThan(Phenix.Core.Rule.EnumKeyCaption,Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.op_GreaterThan(Phenix.Core.Rule.EnumKeyCaption,Phenix.Core.Rule.EnumKeyCaption)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.EnumKeyCaption.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.PromptCodeKeyCaption">
            <summary>
            提示码"键-标签"
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaption.#ctor(System.String,System.String,System.String,Phenix.Core.Rule.ReadLevel,System.DateTime,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaption.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaption.ReadLevel">
            <summary>
            读取级别
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaption.Addtime">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaption.UserNumber">
            <summary>
            登录工号
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.PromptCodeKeyCaptionCollection">
            <summary>
            提示码"键-标签"数组
            主要用于填充下拉列表框内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.#ctor(System.String,System.Nullable{System.DateTime})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Fetch(System.String)">
            <summary>
            构建填充
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Fetch(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            构建填充
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.ActionTime">
            <summary>
            活动时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.CreatePromptCodeKeyCaption(Phenix.Core.Rule.ReadLevel)">
            <summary>
            新建
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.CreatePromptCodeKeyCaption(Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.IIdentity)">
            <summary>
            新建
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Save(Phenix.Core.Rule.PromptCodeKeyCaption)">
            <summary>
            保存
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Save(Phenix.Core.Rule.PromptCodeKeyCaption,Phenix.Core.Security.UserIdentity)">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Remove(Phenix.Core.Rule.PromptCodeKeyCaption)">
            <summary>
            移除
            根据 Key 匹配
            </summary>
            <param name="promptCode">提示码</param>
        </member>
        <member name="M:Phenix.Core.Rule.PromptCodeKeyCaptionCollection.Equals(System.Type)">
            <summary>
            比较类型
            主要用于IDE环境
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.PromptCodeChangedEventHandler">
            <summary>
            申明提示码更新后事件处理函数
            </summary>
            <param name="promptCodeName">名称</param>
        </member>
        <member name="T:Phenix.Core.Rule.CriteriaExpressionChangedEventHandler">
            <summary>
            申明条件表达式更新后事件处理函数
            </summary>
            <param name="criteriaExpressionName">名称</param>
        </member>
        <member name="T:Phenix.Core.Rule.DataRuleHub">
            <summary>
            数据规则中心
            </summary>
        </member>
        <member name="P:Phenix.Core.Rule.DataRuleHub.Worker">
            <summary>
            实施者
            </summary>
        </member>
        <member name="E:Phenix.Core.Rule.DataRuleHub.PromptCodeChanged">
            <summary>
            提示码更新后事件
            </summary>
        </member>
        <member name="E:Phenix.Core.Rule.DataRuleHub.CriteriaExpressionChanged">
            <summary>
            条件表达式更新后事件
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.CheckActive">
            <summary>
            检查活动
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetPromptCodes(System.String)">
            <summary>
            取提示码队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetPromptCodes(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            取提示码队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetPromptCodeChangedTime(System.String)">
            <summary>
            取提示码更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.PromptCodeHasChanged(System.String)">
            <summary>
            提示码已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddPromptCode(System.String,Phenix.Core.Rule.PromptCodeKeyCaption)">
            <summary>
            添加提示码
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddPromptCode(System.String,Phenix.Core.Rule.PromptCodeKeyCaption,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddPromptCode(System.String,System.String,System.String,System.String,Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.RemovePromptCode(System.String,System.String)">
            <summary>
            移除提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.RemovePromptCode(System.String,Phenix.Core.Rule.PromptCodeKeyCaption)">
            <summary>
            移除提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetCriteriaExpressions(System.Type,System.String)">
            <summary>
            取条件表达式队列
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetCriteriaExpressions(System.Type,System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            取条件表达式队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.GetCriteriaExpressionChangedTime(System.String)">
            <summary>
            取条件表达式更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.CriteriaExpressionHasChanged(System.String)">
            <summary>
            条件表达式已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddCriteriaExpression(System.String,Phenix.Core.Rule.CriteriaExpressionKeyCaption)">
            <summary>
            添加条件表达式
            identity = Phenix.Core.Security.UserIdentity.CurrentIdentity
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddCriteriaExpression(System.String,Phenix.Core.Rule.CriteriaExpressionKeyCaption,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.AddCriteriaExpression(System.String,System.String,System.String,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.RemoveCriteriaExpression(System.String,System.String)">
            <summary>
            移除条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.DataRuleHub.RemoveCriteriaExpression(System.String,Phenix.Core.Rule.CriteriaExpressionKeyCaption)">
            <summary>
            移除条件表达式
            </summary>
        </member>
        <member name="T:Phenix.Core.Rule.IDataRule">
            <summary>
            数据规则接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.GetPromptCodes(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            取提示码队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.GetPromptCodeChangedTime(System.String)">
            <summary>
            取提示码更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.PromptCodeHasChanged(System.String)">
            <summary>
            提示码已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.AddPromptCode(System.String,System.String,System.String,System.String,Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.RemovePromptCode(System.String,System.String)">
            <summary>
            移除提示码
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.GetCriteriaExpressions(System.String,Phenix.Core.Security.UserIdentity)">
            <summary>
            取条件表达式队列
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.GetCriteriaExpressionChangedTime(System.String)">
            <summary>
            取条件表达式更新时间
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.CriteriaExpressionHasChanged(System.String)">
            <summary>
            条件表达式已更新
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.AddCriteriaExpression(System.String,System.String,System.String,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Rule.ReadLevel,Phenix.Core.Security.UserIdentity)">
            <summary>
            添加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Rule.IDataRule.RemoveCriteriaExpression(System.String,System.String)">
            <summary>
            移除条件表达式
            </summary>
        </member>
        <member name="T:Phenix.Core.Win32.NativeMethods">
            <summary>
            非托管方法
            </summary>
        </member>
        <member name="M:Phenix.Core.Win32.NativeMethods.SetClock(System.DateTime)">
            <summary>
            设置时钟
            </summary>
        </member>
        <member name="M:Phenix.Core.Win32.NativeMethods.SetDateTimeFormat">
            <summary>
            设置时间格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Win32.NativeMethods.TerminateProcess(System.Diagnostics.Process)">
            <summary>
            中止进程
            </summary>
        </member>
        <member name="T:Phenix.Core.BaseDisposable`1">
            <summary>
            释放资源抽象类
            </summary>
        </member>
        <member name="P:Phenix.Core.BaseDisposable`1.Default">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable`1.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable`1.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="T:Phenix.Core.BaseDisposable">
            <summary>
            释放资源抽象类
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.Finalize">
            <summary>
            释放资源抽象类
            </summary>
        </member>
        <member name="P:Phenix.Core.BaseDisposable.Disposing">
            <summary>
            正在释放中
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.Dispose">
            <summary>
            释放自己
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing">如果为 true, 则释放托管资源和非托管资源; 如果为 false, 则仅释放非托管资源</param>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Phenix.Core.BaseDisposable.TryDispose(System.Object)">
            <summary>
            尝试释放对象
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="T:Phenix.Core.ExceptionEventArgs">
            <summary>
            错误异常事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.ExceptionEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="sender">发生错误的对象</param>
            <param name="error">错误信息</param>
        </member>
        <member name="P:Phenix.Core.ExceptionEventArgs.Sender">
            <summary>
            发生错误的对象
            </summary>
        </member>
        <member name="P:Phenix.Core.ExceptionEventArgs.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Phenix.Core.ExceptionEventArgs.Applied">
            <summary>
            是否已应用
            依此判断是否需要继续抛出异常
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.ExceptionEventArgs.Succeed">
            <summary>
            是否已成功
            依此判断是否已成功处理本异常
            缺省为 false
            </summary>
        </member>
        <member name="T:Phenix.Core.MessageNotifyEventArgs">
            <summary>
            消息通报事件数据
            </summary>
        </member>
        <member name="M:Phenix.Core.MessageNotifyEventArgs.#ctor(Phenix.Core.MessageNotifyType,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="messageNotifyType">消息通报类型</param>
            <param name="title">标题</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Phenix.Core.MessageNotifyEventArgs.#ctor(Phenix.Core.MessageNotifyType,System.String,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="messageNotifyType">消息通报类型</param>
            <param name="title">标题</param>
            <param name="message">消息</param>
            <param name="error">错误信息</param>
        </member>
        <member name="M:Phenix.Core.MessageNotifyEventArgs.#ctor(Phenix.Core.MessageNotifyType,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="messageNotifyType">消息通报类型</param>
            <param name="title">标题</param>
            <param name="error">错误信息</param>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.MessageNotifyType">
            <summary>
            消息通报类型
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.InformationColor">
            <summary>
            MessageNotifyType.Information颜色
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.WarningColor">
            <summary>
            MessageNotifyType.Warning颜色
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.ErrorColor">
            <summary>
            MessageNotifyType.Error颜色
            </summary>
        </member>
        <member name="P:Phenix.Core.MessageNotifyEventArgs.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="M:Phenix.Core.MessageNotifyEventArgs.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
    </members>
</doc>
