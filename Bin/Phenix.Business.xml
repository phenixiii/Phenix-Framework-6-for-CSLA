<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phenix.Business</name>
    </assembly>
    <members>
        <member name="T:Phenix.Business.BusinessListPageBase`2">
            <summary>
            业务集合分页基类
            </summary>
        </member>
        <member name="T:Phenix.Business.BusinessListBase`2">
            <summary>
            业务集合基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Core.BusinessListBase`2">
            <summary>
            业务集合基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.IAuthorizationObject">
            <summary>
            被授权对象接口
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.IAuthorizationObject.AddAuthorizationRules">
            <summary>
            添加授权规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.IAuthorizationObject.AllowExecuteMethod(System.String,System.Object[])">
            <summary>
            允许过程可执行
            </summary>
            <param name="methodName">过程名</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.DynamicCreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.FillRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            批量添加item（非新增对象）
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RecordHasChanged">
            <summary>
            数据发生变更
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.String)">
            <summary>
            注册方法信息
            friendlyName = null
            tag = null
            </summary>
            <param name="methodName">方法名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.String,System.String)">
            <summary>
            注册方法信息
            tag = null
            </summary>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.String,System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            注册方法信息
            friendlyName = null
            tag = null
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String)">
            <summary>
            注册方法信息
            tag = null
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(Csla.Core.IMemberInfo)">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean)">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(Csla.Core.IMemberInfo,System.Object[])">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean,System.Object[])">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(System.String)">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.CanExecuteMethod(System.String,System.Object[])">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
            <param name="methodName">过程名</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.AllowExecuteMethod(System.String,System.Object[])">
            <summary>
            允许过程可执行
            与Phenix.Services.Client.Security.ExecuteRule配套使用
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessListBase`2.AddAuthorizationRules">
            <summary>
            添加授权规则
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.DataSourceKey">
            <summary>
            数据源键
            缺省为 T、TBusiness 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.FriendlyName">
            <summary>
            友好名
            缺省为 TBusiness 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.Caption">
            <summary>
            标签
            缺省为 TBusiness 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.ItemValueType">
            <summary>
            业务对象类型
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.SelfFetching">
            <summary>
            正在检索中
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.IsEmpty">
            <summary>
            是否空集合
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.IsEmptyOption">
            <summary>
            是否空集合
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AuthorizationRules">
            <summary>
            授权规则集合
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowAddItem">
            <summary>
            是否允许添加业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowAddItemOption">
            <summary>
            是否允许添加业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowEditItem">
            <summary>
            是否允许编辑业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowEditItemOption">
            <summary>
            是否允许编辑业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowDeleteItem">
            <summary>
            是否允许删除业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessListBase`2.AllowDeleteItemOption">
            <summary>
            是否允许删除业务对象
            </summary>
        </member>
        <member name="E:Phenix.Business.Core.BusinessListBase`2.AuthorizationRuleRegistering">
            <summary>
            授权规则注册中事件
            可配置化：当应用程序初始化时，可通过本事件来添加额外的授权规则库
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessCollection">
            <summary>
            业务对象集合接口
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusiness">
            <summary>
            业务接口
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckRepeated">
            <summary>
            校验是否存在重复数据
            </summary>
            <returns>重复的对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfRules">
            <summary>
            校验数据是否有效
            onlyOldError = false
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfRules(System.Boolean)">
            <summary>
            校验数据是否有效
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfRules(System.Boolean,System.Boolean)">
            <summary>
            校验数据是否有效
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfRules(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfObjectRules">
            <summary>
            校验数据是否有效(仅ObjectRules)
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfObjectRules(System.Boolean)">
            <summary>
            校验数据是否有效(仅ObjectRules)
            throwIfException = false
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckSelfObjectRules(System.Boolean,System.Boolean)">
            <summary>
            校验数据是否有效(仅ObjectRules)
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckRules">
            <summary>
            校验数据是否有效
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckRules(System.Boolean)">
            <summary>
            校验数据是否有效
            onlySelfDirty = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.CheckRules(System.Boolean,System.Boolean)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.BeginEdit">
            <summary>
            开始编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusiness.CancelEdit">
            <summary>
            取消编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusiness.ApplyEdit">
            <summary>
            接受编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusiness.Save(System.Boolean,System.Nullable{System.Boolean},Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="onlySaveSelected">仅提交被勾选的业务对象</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusiness.OnDeletingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            删除本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.IBusiness.OnDeletedSelf(System.Data.Common.DbTransaction)">
            <summary>
            删除本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="P:Phenix.Business.IBusiness.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.IsRoot">
            <summary>
            是否是根对象
            仅允许从根对象上进行(级联)保存
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.Root">
            <summary>
            根对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.RootBusiness">
            <summary>
            根业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.MasterBusiness">
            <summary>
            主业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.InSelectableList">
            <summary>
            在勾选项清单
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.NotUndoable">
            <summary>
            不参与多级撤销并阻断Detail对象的多级撤销
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.EditMode">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.EditModeOption">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.EditLevel">
            <summary>
            编辑层级
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.FirstTransactionData">
            <summary>
            参与事务处理前端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.LastTransactionData">
            <summary>
            参与事务处理末端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.CascadingSave">
            <summary>
            是否级联Save?
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.CascadingDelete">
            <summary>
            是否级联Delete?
            如果 CascadingSave = false 则忽略本属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.EnsembleOnSaving">
            <summary>
            保留非脏对象以提交到服务端的代码使用
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.NeedRefresh">
            <summary>
            提交数据后需要刷新本地自己
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.FindItem(System.String)">
            <summary>
            检索第一个匹配对象, 根据 PrimaryKey 匹配
            </summary>
            <param name="primaryKey">主键</param>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.AddNew(System.Int32)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.AddNew(System.Int32,Phenix.Business.IBusinessObject)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.FindInvalidItem">
            <summary>
            搜索无效对象
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.FindInvalidItem(System.Boolean)">
            <summary>
            搜索无效对象
            onlySelfDirty = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessCollection.FindInvalidItem(System.Boolean,System.Boolean)">
            <summary>
            搜索无效对象
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>无效对象</returns>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.ItemLazyGetDetail">
            <summary>
            业务对象惰性GetDetail
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.AllowAddItem">
            <summary>
            是否允许添加业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.AllowEditItem">
            <summary>
            是否允许编辑业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.AllowDeleteItem">
            <summary>
            是否允许删除业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.OnlySaveSelected">
            <summary>
            仅提交被勾选的业务对象
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessCollection.AloneTransaction">
            <summary>
            是否业务对象各自使用独立事务
            缺省为 false
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DynamicCreateInstance(Phenix.Business.Criterions)">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.New">
            <summary>
            新增业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.New(System.Data.DataTable,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            新增业务对象集合
            </summary>
            <param name="source">数据源</param>
            <param name="propertyInfos">数据属性信息队列, 顺序与数据源columnIndex一致, 当为null、空队列时按source列名与业务类属性名匹配条件进行数据填充</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            构建业务对象集合
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Object)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteria">自定义条件</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnFetchedSelf(System.Object)">
            <summary>
            构建本业务对象集合之后
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(`1)">
            <summary>
            按照指定唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="itself">带唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,`1)">
            <summary>
            按照指定唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="itself">带唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,`1)">
            <summary>
            按照指定唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="itself">带唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Business.Criterions,System.Boolean)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria)">
            <summary>
            删除记录
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            删除记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetRecordCount(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String)">
            <summary>
            获取记录数量
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            存在于
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Exists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.ICriterions)">
            <summary>
            不存在于
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.NotExists(Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            不存在于
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Refresh(`0)">
            <summary>
            刷新业务对象集合
            </summary>
            <param name="self">业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNew(System.Int32)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#AddNew(System.Int32)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNew(`1)">
            <summary>
            新增
            </summary>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNew(System.Int32,`1)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#AddNew(System.Int32,Phenix.Business.IBusinessObject)">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNew(Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            新增
            </summary>
            <param name="source">数据源</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNew(System.Int32,Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            新增
            </summary>
            <param name="index">索引</param>
            <param name="source">数据源</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AddNewCore">
            <summary>
            新增到集合末尾
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.InsertItem(System.Int32,`1)">
            <summary>
            添加项
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SetItem(System.Int32,`1)">
            <summary>
            使用指定项替换指定索引处的项
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.RemoveItem(System.Int32)">
            <summary>
            移除指定索引处的项
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Remove(System.Predicate{`1})">
            <summary>
            按照条件移除业务对象
            </summary>
            <param name="match">定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Contains(`1)">
            <summary>
            确定某元素是否存在
            </summary>
            <param name="item">要定位的对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.IndexOf(`1)">
            <summary>
            搜索指定的对象
            </summary>
            <param name="item">要定位的对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FillRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            批量添加item（非新增对象）
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OrderBy(Phenix.Core.Mapping.OrderByInfo)">
            <summary>
            排序(克隆)
            </summary>
            <param name="orderByInfo">数据排列顺序</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OrderBy``1(Phenix.Core.Mapping.OrderByInfo,System.Collections.Generic.IComparer{``0})">
            <summary>
            排序(克隆)
            </summary>
            <param name="orderByInfo">数据排列顺序</param>
            <param name="comparer">比较方法</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OrderBy(System.Collections.Generic.IEnumerable{`1},Phenix.Core.Mapping.OrderByInfo)">
            <summary>
            排序(克隆)
            </summary>
            <param name="source">数据源</param>
            <param name="orderByInfo">数据排列顺序</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OrderBy``1(System.Collections.Generic.IEnumerable{`1},Phenix.Core.Mapping.OrderByInfo,System.Collections.Generic.IComparer{``0})">
            <summary>
            排序(克隆)
            </summary>
            <param name="source">数据源</param>
            <param name="orderByInfo">数据排列顺序</param>
            <param name="comparer">比较方法</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FilterSelf(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            从队列中(非删除)过滤剔掉符合条件的业务对象
            </summary>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            过滤(克隆)出符合条件的业务对象队列
            </summary>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            过滤(克隆)出符合条件的业务对象队列
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="source">数据源</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="source">数据源</param>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessObject,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessCollection)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(Phenix.Business.IBusinessCollection)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(Phenix.Business.IBusinessCollection)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessCollection,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(Phenix.Business.IBusinessCollection,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(Phenix.Business.IBusinessCollection,System.String)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(Phenix.Business.IBusinessCollection,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CompositionFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(组合关系)
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AggregationFilter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection,System.String)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合(聚合关系)
            cascadingSave = true
            cascadingDelete = false
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Filter(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Business.IBusinessCollection,System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤(克隆)出符合条件的、主业务对象的主键值和业务对象的外键值相等的业务对象集合
            </summary>
            <param name="expression">条件表达式</param>
            <param name="masterBusinesses">主业务对象集合</param>
            <param name="groupName">分组名, null代表全部</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearDetailCache">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearDetailCache(System.String)">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearDetailCache(System.Type)">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearDetailCache``1">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearDetailCache``2">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FindDetailBusinesses``1">
            <summary>
            检索出从业务对象队列
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FetchDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.GetSelectableList(Phenix.Core.Rule.EnumKeyCaptionCollection)">
            <summary>
            取勾选项清单
            当本集合为A(其主业务对象集合)、B集合(source)的交叉关联集合时，可返回刷新过(与本集合项存在关联的项Selected都被置为true)的B集合，而当它发生变更时将即时反映到本集合
            </summary>
            <param name="source">源枚举集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CollatingSelectableList(Phenix.Core.Rule.EnumKeyCaptionCollection)">
            <summary>
            整理勾选项清单
            当本集合为A(其主业务对象集合)、B集合(source)的交叉关联集合时，可返回刷新过(与本集合项存在关联的项Selected都被置为true)的B集合，而当它发生变更时将即时反映到本集合
            </summary>
            <param name="source">源枚举集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CollatingSelectableList``2(``0)">
            <summary>
            整理勾选项清单
            当本集合为A(其主业务对象集合)、B集合(source)的交叉关联集合时，可返回刷新过(与本集合项存在关联的项Selected都被置为true)的B集合，而当它发生变更时将即时反映到本集合
            emptyIsAllSelected = false
            </summary>
            <param name="source">源业务集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CollatingSelectableList``2(``0,System.Boolean)">
            <summary>
            整理勾选项清单
            当本集合为A(其主业务对象集合)、B集合(source)的交叉关联集合时，可返回刷新过(与本集合项存在关联的项Selected都被置为true)的B集合，而当它发生变更时将即时反映到本集合
            </summary>
            <param name="source">源业务集合</param>
            <param name="emptyIsAllSelected">空集合代表全选</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CollatingSelectableList(Phenix.Business.IBusinessObject)">
            <summary>
            整理勾选项清单
            返回刷新过(与masterBusiness存在关联的项Selected都被置为true)的集合，这些项Selected变更时会与外键值联动，并与masterBusiness.Root被一起被提交
            </summary>
            <param name="masterBusiness">主业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CollatingSelectableList(Phenix.Business.IBusinessObject,System.String)">
            <summary>
            整理勾选项清单
            返回刷新过(与masterBusiness存在关联的项Selected都被置为true)的集合，这些项Selected变更时会与外键值联动，并与masterBusiness.Root被一起被提交
            </summary>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名, null代表全部</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SelectAll(System.Boolean,System.Predicate{`1})">
            <summary>
            按照条件勾选业务对象
            </summary>
            <param name="toSelected">使得被勾选</param>
            <param name="match">定义要勾选的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SelectAll(System.Boolean)">
            <summary>
            勾选所有
            match = null
            </summary>
            <param name="toSelected">使得被勾选</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SelectAll">
            <summary>
            勾选所有
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.UnselectAll">
            <summary>
            取消所有勾选
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.InverseAll">
            <summary>
            反选所有
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SetParent(Csla.Core.IParent)">
            <summary>
            设置父对象
            </summary>
            <param name="parent">父对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FindItem(System.String)">
            <summary>
            检索第一个匹配对象, 根据 PrimaryKey 匹配
            </summary>
            <param name="primaryKey">主键</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#FindItem(System.String)">
            <summary>
            检索第一个匹配对象, 根据 PrimaryKey 匹配
            </summary>
            <param name="primaryKey">主键</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.BeginEdit">
            <summary>
            开始编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CancelEdit">
            <summary>
            取消编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ApplyEdit">
            <summary>
            接受编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ComputeMasterAggregate">
            <summary>
            计算聚合字段
            property = null
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ComputeMasterAggregate(Phenix.Business.IPropertyInfo)">
            <summary>
            计算聚合字段
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ComputeMasterAggregate(System.String)">
            <summary>
            计算聚合字段
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Boolean,System.Nullable{System.Boolean},Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="onlySaveSelected">仅提交被勾选的业务对象</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#Save(System.Boolean,System.Nullable{System.Boolean},Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="onlySaveSelected">仅提交被勾选的业务对象</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save">
            <summary>
            保存
            </summary>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.SaveForceUpdate">
            <summary>
            强制按照Update方式提交保存
            </summary>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Boolean,Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Data.Common.DbTransaction,System.Boolean,System.Nullable{System.Boolean},Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="onlySaveSelected">仅提交被勾选的业务对象</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Data.Common.DbTransaction,Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Data.Common.DbTransaction,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象集合</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnSavingSelf">
            <summary>
            保存业务对象集合之前
            在执行Save()的程序域里被调用
            </summary>
            <returns>是否继续, 缺省为 true</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnSavedSelf(System.Exception)">
            <summary>
            保存业务对象集合之后
            在执行Save()的程序域里被调用
            </summary>
            <param name="ex">错误信息</param>
            <returns>发生错误时的友好提示信息, 缺省为 null 直接抛出原异常，否则会抛出SaveException并打包本信息及原异常</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            填充对象
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DoFetchSelf(System.Object)">
            <summary>
            自定义构建业务对象集合
            </summary>
            <param name="criteria">自定义条件</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.DataPortal_Update">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnFetchingSelf(System.Data.Common.DbConnection,System.Data.Common.DbCommand,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之前(运行在持久层的程序域里)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="command">DbCommand</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnFetchingSelf(System.Data.Common.DbTransaction,System.Data.Common.DbCommand,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="command">DbCommand</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnFetchedSelf(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之后(运行在持久层的程序域里)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnFetchedSelf(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnSavingSelf(System.Data.Common.DbTransaction)">
            <summary>
            保存(增删改)业务对象集合之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnSavedSelf(System.Data.Common.DbTransaction)">
            <summary>
            保存(增删改)业务对象集合之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnDeletingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            批量删除业务对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#OnDeletingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            删除本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.OnDeletedSelf(System.Data.Common.DbTransaction)">
            <summary>
            批量删除业务对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#OnDeletedSelf(System.Data.Common.DbTransaction)">
            <summary>
            删除本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckRepeated">
            <summary>
            校验是否存在重复数据
            </summary>
            <returns>重复的对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfRules">
            <summary>
            校验本集合内的业务对象数据是否有效
            onlyOldError = false
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfRules(System.Boolean)">
            <summary>
            校验本集合内的业务对象数据是否有效
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfRules(System.Boolean,System.Boolean)">
            <summary>
            校验本集合内的业务对象数据是否有效
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfRules(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            校验本集合内的业务对象数据是否有效
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfObjectRules">
            <summary>
            校验本集合内的业务对象数据是否有效(仅ObjectRules)
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfObjectRules(System.Boolean)">
            <summary>
            校验本集合内的业务对象数据是否有效(仅ObjectRules)
            throwIfException = false
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckSelfObjectRules(System.Boolean,System.Boolean)">
            <summary>
            校验本集合内的业务对象数据是否有效(仅ObjectRules)
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckRules">
            <summary>
            校验本集合内的业务对象及其从业务对象集合中数据是否有效
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckRules(System.Boolean)">
            <summary>
            校验本集合内的业务对象及其从业务对象集合中数据是否有效
            onlySelfDirty = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.CheckRules(System.Boolean,System.Boolean)">
            <summary>
            校验本集合内的业务对象及其从业务对象集合中数据是否有效
            </summary>
            <param name="onlyOldError">检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FindInvalidItem">
            <summary>
            搜索无效对象
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#FindInvalidItem">
            <summary>
            搜索无效对象
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FindInvalidItem(System.Boolean)">
            <summary>
            搜索无效对象
            onlySelfDirty = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#FindInvalidItem(System.Boolean)">
            <summary>
            搜索无效对象
            onlySelfDirty = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.FindInvalidItem(System.Boolean,System.Boolean)">
            <summary>
            搜索无效对象
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusinessCollection#FindInvalidItem(System.Boolean,System.Boolean)">
            <summary>
            搜索无效对象
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>无效对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.ClearItems">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AnalyseDataKeyInfo(System.Int32)">
            <summary>
            分析数据集键资料
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AnalyseDataInfo(System.Data.DataTable)">
            <summary>
            分析数据集资料
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.AnalyseRenovateInfo(Phenix.Core.Mapping.ExecuteAction,System.Object[])">
            <summary>
            分析动态刷新资料
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListBase`2.LoadData">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.DataSourceKey">
            <summary>
            数据源键
            缺省为 Root.DataSourceKey
            缺省为 Criterions.DataSourceKey
            缺省为 T、TBusiness 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.OrderByInfos">
            <summary>
            数据排列顺序队列
            缺省为查询时带入的OrderByInfo及字段上的FieldOrderByAttribute标签
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.FetchTimeout">
            <summary>
            等待Fetch执行的时间(秒数）, null 指示不限制
            缺省为 null
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.IsRoot">
            <summary>
            是否是根对象
            仅允许从根对象上进行(级联)保存
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Root">
            <summary>
            根对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.RootBusiness">
            <summary>
            根业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.MasterBusiness">
            <summary>
            主业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.ItemLazyGetDetail">
            <summary>
            业务对象惰性GetDetail
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.NotUndoable">
            <summary>
            不参与多级撤销并阻断Detail对象的多级撤销
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.EditMode">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.EditModeOption">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.EditLevel">
            <summary>
            编辑层级
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.AllowAddItem">
            <summary>
            是否允许添加业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.AllowDeleteItem">
            <summary>
            是否允许删除业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.IsSavable">
            <summary>
            是否可以保存数据
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Count">
            <summary>
            获取实际包含的元素数
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Items">
            <summary>
            获取周围的 IList
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引</param>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.InLazyFetch">
            <summary>
            是否处于惰性Fetch中
            Fetch时不加载数据, 仅当检索集合里的业务对象时才正式加载, 加载完成后自动变为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.OnlySaveSelected">
            <summary>
            仅提交被勾选的业务对象
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.InSelectableList">
            <summary>
            在勾选项清单
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.SelectedItems">
            <summary>
            被勾选的对象队列
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.CascadingSave">
            <summary>
            是否级联Save?
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.CascadingDelete">
            <summary>
            是否级联Delete?
            如果 CascadingSave = false 则忽略本属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.FirstTransactionData">
            <summary>
            参与事务处理前端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.LastTransactionData">
            <summary>
            参与事务处理末端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.EnsembleOnSaving">
            <summary>
            保留非脏对象以提交到服务端的代码使用
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.NeedRefresh">
            <summary>
            提交数据后需要刷新本地自己
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.AloneTransaction">
            <summary>
            是否业务对象各自使用独立事务
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListBase`2.Phenix#Business#IBusiness#DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="E:Phenix.Business.BusinessListBase`2.ItemSelectedValueChanging">
            <summary>
            Selected属性被更改前
            </summary>
        </member>
        <member name="E:Phenix.Business.BusinessListBase`2.ItemSelectedValueChanged">
            <summary>
            Selected属性被更改后
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessCollectionPage">
            <summary>
            业务集合分页接口
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Business.Criterions,System.Boolean)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Business.Criterions,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(Phenix.Business.Criterions,System.Int32,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.OnFetchedSelf(System.Object)">
            <summary>
            构建本业务对象集合之后
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions,System.Int32,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.OnFetchedSelf(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之后(运行在持久层的程序域里)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions,System.Int32,System.Int32)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="pageSize">分页大小</param>
            <param name="pageNo">分页号</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.OnFetchedSelf(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象集合之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.FetchPage(System.Int32)">
            <summary>
            获取页
            </summary>
            <param name="pageNo">分页号</param>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.FetchPrevPage">
            <summary>
            获取上一页
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.FetchNextPage">
            <summary>
            获取下一页
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessListPageBase`2.FetchAllPage">
            <summary>
            获取全部页
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.DefaultPageSize">
            <summary>
            缺省分页大小
            缺省为 1000
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.PageSize">
            <summary>
            分页大小
            缺省为 DefaultPageSize
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.MaxCount">
            <summary>
            最大项数
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.MaxPageNo">
            <summary>
            最大分页号
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.LocalPagesCount">
            <summary>
            本地分页数量
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessListPageBase`2.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="T:Phenix.Business.BusinessPageBase`1">
            <summary>
            业务对象分页基类
            </summary>
        </member>
        <member name="T:Phenix.Business.BusinessBase`1">
            <summary>
            业务对象基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Core.BusinessBase`1">
            <summary>
            业务基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.DynamicCreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FetchSelf(System.Data.IDataRecord,System.Collections.Generic.IList{Phenix.Core.Mapping.FieldMapInfo})">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetIdValue">
            <summary>
            取对象ID
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetHashCode">
            <summary>
            取哈希值
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFieldMapInfo(Csla.Core.IPropertyInfo)">
            <summary>
            获取数据映射字段信息
            </summary>
            <param name="property">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFieldMapInfo(System.String)">
            <summary>
            获取数据映射字段信息
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.ReplaceFrom(`0)">
            <summary>
            置换为与source相同内容的对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.MarkFetched">
            <summary>
            标为 SelfFetched = true 且 IsNew = false 且 IsSelfDeleted = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.MarkNew">
            <summary>
            标为 IsNew = true 且 IsSelfDeleted = false 且 IsSelfDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.MarkOld">
            <summary>
            标为 IsNew = false 且 IsSelfDirty = false
            resetOldFieldValues = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.MarkOld(System.Boolean)">
            <summary>
            标为 IsNew = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.MarkClean">
            <summary>
            标为 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty(Csla.Core.IPropertyInfo)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.Core.IPropertyInfo)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            读取属性
            noAccess = Csla.Security.NoAccessBehavior.SuppressException
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(System.String,``0,``0)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetProperty``1(System.String,``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            读取属性
            noAccess = Csla.Security.NoAccessBehavior.SuppressException
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``1,Csla.Security.NoAccessBehavior)">
            <summary>
            读取属性
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(Csla.PropertyInfo{``0},``0@,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            noAccess = Csla.Security.NoAccessBehavior.ThrowException
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(Csla.PropertyInfo{``0},``0@,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(System.String,``0@,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetProperty``1(System.String,``0@,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(System.String,``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1@,``0)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            noAccess = Csla.Security.NoAccessBehavior.ThrowException
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1@,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            写入属性(新旧值相同时忽略写入)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.ExecuteRules``1(Phenix.Core.Mapping.FieldMapInfo,``0@,``0)">
            <summary>
            执行业务规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            属性可读
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanReadProperty(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            属性可读
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanReadProperty(System.String,System.Boolean)">
            <summary>
            属性可写
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanReadProperty(System.String)">
            <summary>
            属性可读
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.AllowReadProperty(System.String)">
            <summary>
            允许属性可读
            与Phenix.Services.Client.Security.ReadWriteAuthorization配套使用
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanWriteProperty(Csla.Core.IPropertyInfo)">
            <summary>
            属性可写
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanWriteProperty(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            属性可写
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanWriteProperty(System.String,System.Boolean)">
            <summary>
            属性可写
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanWriteProperty(System.String)">
            <summary>
            属性可写
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.AllowWriteProperty(System.String)">
            <summary>
            允许属性可写
            与Phenix.Services.Client.Security.ReadWriteAuthorization配套使用
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.PropertyHasChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.OnPropertyChanging(Csla.Core.IPropertyInfo)">
            <summary>
            属性发生更改时
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.OnPropertyChanging(System.String)">
            <summary>
            属性发生更改时
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.OnUnknownPropertyChanged">
            <summary>
            属性发生更改后
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.OnPropertyChanged(Csla.Core.IPropertyInfo)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.OnPropertyChanged(System.String)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetDirtyProperty(System.String)">
            <summary>
            设置脏属性
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            设置脏属性
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            ignoreCompare = false
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.IsDirtyProperty(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            是否脏属性?(如果写入时的新值与旧值相同则认为未被赋值过)
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="ignoreCompare">忽略比较新旧值(仅判断是否被赋值过)</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.IsValidProperty(Csla.Core.IPropertyInfo)">
            <summary>
            是否有效属性
            </summary>
            <param name="property">属性信息</param>
            <returns>有效</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.Type,Csla.Core.IMemberInfo)">
            <summary>
            注册方法信息
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.Type,System.String)">
            <summary>
            注册方法信息
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.String)">
            <summary>
            注册方法信息
            friendlyName = null
            tag = null
            </summary>
            <param name="methodName">方法名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.String,System.String)">
            <summary>
            注册方法信息
            tag = null
            </summary>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.String,System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodName">方法名</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            注册方法信息
            friendlyName = null
            tag = null
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String)">
            <summary>
            注册方法信息
            tag = null
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}},System.String,System.String)">
            <summary>
            注册方法信息
            </summary>
            <param name="methodLambdaExpression">方法表达式</param>
            <param name="friendlyName">友好名</param>
            <param name="tag">标记</param>
            <returns>方法信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(Csla.Core.IMemberInfo)">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean)">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(Csla.Core.IMemberInfo,System.Object[])">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean,System.Object[])">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            过程可执行
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(System.String)">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CanExecuteMethod(System.String,System.Object[])">
            <summary>
            过程可执行
            throwIfDeny = false
            </summary>
            <param name="methodName">过程名</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.AllowExecuteMethod(System.String,System.Object[])">
            <summary>
            允许过程可执行
            与Phenix.Services.Client.Security.ExecuteRule配套使用
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RecordHasChanged">
            <summary>
            数据发生变更
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.InitOldFieldValues">
            <summary>
            初始化旧值
            must = false
            reset = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.InitOldFieldValues(System.Boolean,System.Boolean)">
            <summary>
            初始化旧值
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetOldFieldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取旧值
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetOldFieldValue(System.String)">
            <summary>
            取旧值
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetCurrentValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取当前的属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetOldValue(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取最原始的属性值
            editLevel 小于等于 0
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetOldValue(Phenix.Core.Mapping.IPropertyInfo,System.Int32)">
            <summary>
            取编辑层级上的旧属性值
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="editLevel">编辑层级, 小于等于0则等同于取最原始值</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetForceUpdate(Csla.Core.IPropertyInfo[])">
            <summary>
            设置强制按照Update方式提交
            </summary>
            <param name="propertyInfos">需提交的属性信息, 当为null、空队列时提交全部属性</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FillFieldValuesToDefault">
            <summary>
            填充字段值到缺省值
            reset = true
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FillFieldValuesToDefault(System.Boolean)">
            <summary>
            填充字段值到缺省值
            </summary>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetDefaultValue(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            设置缺省值
            allowReplace = false
            </summary>
            <param name="property">属性信息</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetDefaultValue(Csla.Core.IPropertyInfo,System.Object,System.Boolean)">
            <summary>
            设置缺省值
            </summary>
            <param name="property">属性信息</param>
            <param name="value">值</param>
            <param name="allowReplace">如果为 true, 则当属性被赋值时允许赋值的内容覆盖本缺省值</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.SetDefaultValue(Csla.Core.IPropertyInfo,System.Func{`0,System.Object})">
            <summary>
            设置缺省值
            </summary>
            <param name="property">属性信息</param>
            <param name="valueFunc">值函数</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.RemoveDefaultValue(Csla.Core.IPropertyInfo)">
            <summary>
            移除缺省值
            </summary>
            <param name="property">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetDefaultValue(Csla.Core.IPropertyInfo)">
            <summary>
            获取缺省值
            onlyDynamic = true
            </summary>
            <param name="property">属性信息</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetDefaultValue(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            获取缺省值
            </summary>
            <param name="property">属性信息</param>
            <param name="onlyDynamic">如果为 true, 则仅返回通过SetDefaultValue()设置的缺省值; 否则返回完整版</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.PermanentLog(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ExecuteAction)">
            <summary>
            持久化日志
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="action">执行动作</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FetchExecuteAction">
            <summary>
            检索执行动作
            </summary>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FetchExecuteAction(Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            检索执行动作
            userNumber = null
            </summary>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.FetchExecuteAction(System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            检索执行动作
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.ClearExecuteAction(Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除执行动作
            userNumber = null
            </summary>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.ClearExecuteAction(System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除执行动作
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstErrorMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取错误信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstErrorMessage(System.String)">
            <summary>
            取错误信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstWarningMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取警告信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstWarningMessage(System.String)">
            <summary>
            取警告信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstInformationMessage(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            取消息信息
            </summary>
            <param name="propertyInfo">属性信息</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.GetFirstInformationMessage(System.String)">
            <summary>
            取消息信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CheckRule(Csla.Core.IPropertyInfo)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="property">属性信息</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.CheckRule(System.String)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.AddBusinessRules">
            <summary>
            添加业务规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.BusinessBase`1.AddAuthorizationRules">
            <summary>
            添加授权规则
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.DataSourceKey">
            <summary>
            数据源键
            缺省为 T 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.FriendlyName">
            <summary>
            友好名
            缺省为 T 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.Caption">
            <summary>
            标签
            缺省为唯一键值 
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.IdValue">
            <summary>
            对象ID
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.PrimaryKey">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.SelfFetched">
            <summary>
            已经Fetch
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.PropertyValueChanged">
            <summary>
            属性值被赋值过(如果写入时的新值与旧值相同则认为未被赋值过)
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.OldFieldValues">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.DeletedAsDisabled">
            <summary>
            删除即禁用
            当包含禁用字段(FieldAttribute.IsDisabledColumn = true)且存在唯一键时为 true
            删除时, 仅将禁用字段置为CodingStandards.DefaultDisabledTrueValue
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.IsDisabled">
            <summary>
            是否已禁用
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.MustCheckDirty">
            <summary>
            必须校验数据库数据在下载到提交期间是否被更改过
            与ClassAttribute.AllowIgnoreCheckDirty值取反
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.NeedCheckDirty">
            <summary>
            需要校验数据库数据在下载到提交期间是否被更改过
            缺省为ClassAttribute.AllowIgnoreCheckDirty(缺省为 false；如果为 true, 一旦发现将报错: CheckDirtyException)
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.IsSelfDeleted">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.PropertyValueAsDefault">
            <summary>
            属性值被赋值时保留为缺省值
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.ErrorCount">
            <summary>
            错误数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.Phenix#Core#Data#IDataInvalidInfo#ErrorCount">
            <summary>
            错误数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.WarningCount">
            <summary>
            警告数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.Phenix#Core#Data#IDataInvalidInfo#WarningCount">
            <summary>
            警告数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.InformationCount">
            <summary>
            消息数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.Phenix#Core#Data#IDataInvalidInfo#InformationCount">
            <summary>
            消息数
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.PropertySetErrorThrowException">
            <summary>
            属性值赋值错误时是否抛异常
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AuthorizationRules">
            <summary>
            授权规则集合
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.CanFetch">
            <summary>
            是否允许Fetch
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.CanCreate">
            <summary>
            是否允许Create
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.CanEdit">
            <summary>
            是否允许Edit
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.CanDelete">
            <summary>
            是否允许Delete
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowSet">
            <summary>
            是否允许设置本对象
            只读则为false
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowSetOption">
            <summary>
            是否允许设置本对象
            只读则为false
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowEdit">
            <summary>
            是否允许编辑本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowEditOption">
            <summary>
            是否允许编辑本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowDelete">
            <summary>
            是否允许删除本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.BusinessBase`1.AllowDeleteOption">
            <summary>
            是否允许删除本对象
            </summary>
        </member>
        <member name="E:Phenix.Business.Core.BusinessBase`1.BusinessRuleRegistering">
            <summary>
            业务规则注册中事件
            可配置化：当应用程序初始化时，可通过本事件来添加额外的业务规则库
            </summary>
        </member>
        <member name="E:Phenix.Business.Core.BusinessBase`1.AuthorizationRuleRegistering">
            <summary>
            授权规则注册中事件
            可配置化：当应用程序初始化时，可通过本事件来添加额外的授权规则库
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessObject">
            <summary>
            业务对象接口
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.PureClone">
            <summary>
            纯净克隆
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.AddCacheType(Phenix.Business.IBusiness)">
            <summary>
            添加缓存类型
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.FetchSelf(Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.MoveTo(Phenix.Business.IBusinessCollection)">
            <summary>
            移动到新队列中
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.FillFieldValuesToDefault">
            <summary>
            填充字段值到缺省值
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.SetDetail``1(``0)">
            <summary>
            设置从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.SetDetail``2(``0)">
            <summary>
            设置从业务对象集合
            </summary>
            <param name="detail">从业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.FindDetail``2(Phenix.Business.Criterions)">
            <summary>
            检索从业务对象集合
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.IsLink(System.Object,System.String)">
            <summary>
            是否关联
            </summary>
            <param name="link">关联对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.CheckRule(System.String)">
            <summary>
            校验数据是否有效
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.SetForceUpdate(Csla.Core.IPropertyInfo[])">
            <summary>
            设置强制按照Update方式提交
            </summary>
            <param name="propertyInfos">需提交的属性信息, 当为null、空队列时提交全部属性</param>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.AllowReadProperty(System.String)">
            <summary>
            允许属性可读
            与Phenix.Services.Client.Security.ReadWriteAuthorization配套使用
            </summary>
            <param name="propertyName">属性名</param>
            <returns>属性可读</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.AllowWriteProperty(System.String)">
            <summary>
            允许属性可写
            与Phenix.Services.Client.Security.ReadWriteAuthorization配套使用
            </summary>
            <param name="propertyName">属性名</param>
            <returns>属性可写</returns>
        </member>
        <member name="M:Phenix.Business.IBusinessObject.FetchExecuteAction">
            <summary>
            检索执行动作
            </summary>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.IdValue">
            <summary>
            对象ID
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.Owner">
            <summary>
            所属业务对象集合
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.AllowSet">
            <summary>
            是否允许设置本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.AllowEdit">
            <summary>
            是否允许编辑本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.AllowDelete">
            <summary>
            是否允许删除本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.IsDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObject.SelfFetched">
            <summary>
            已经Fetch
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.NewPure">
            <summary>
            新增纯净对象
            除WatermarkField外字段不用被填充缺省值
            needFillBusinessCodeFieldValues = true
            needInitializeNew = false
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.NewPure(System.Boolean)">
            <summary>
            新增纯净对象
            除WatermarkField外字段不用被填充缺省值
            needInitializeNew = false
            </summary>
            <param name="needFillBusinessCodeFieldValues">是否需要填充业务码字段值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.NewPure(System.Boolean,System.Boolean)">
            <summary>
            新增纯净对象
            除WatermarkField外字段不用被填充缺省值
            </summary>
            <param name="needFillBusinessCodeFieldValues">是否需要填充业务码字段值</param>
            <param name="needInitializeNew">是否需要调用OnInitializeNew函数</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.New">
            <summary>
            新增对象
            用缺省值填充字段值
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.New(System.Boolean)">
            <summary>
            新增对象
            用缺省值填充字段值
            </summary>
            <param name="needFillBusinessCodeFieldValues">是否需要填充业务码字段值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.New(Phenix.Business.IBusinessCollection)">
            <summary>
            新增对象
            用缺省值填充字段值
            </summary>
            <param name="owner">所属业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.New(Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            新增对象
            按照数据源填充(指定属性, 属性名或映射的表字段需一致, 忽略对映到本类主键的属性)
            </summary>
            <param name="source">数据源</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.New(`0)">
            <summary>
            新增对象
            主键PrimaryKeyField字段(包括Details)重新生成
            </summary>
            <param name="cloneSource">Clone数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Object)">
            <summary>
            构建业务对象
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnFetchedSelf(System.Object)">
            <summary>
            构建本业务对象之后
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="itself">带主键/唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="itself">带主键/唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,System.Int64)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,System.String)">
            <summary>
            按照指定主键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,`0)">
            <summary>
            按照指定主键/唯一键值来获取对应的数据库记录构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="itself">带主键/唯一键值的业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(Phenix.Business.Criterions)">
            <summary>
            构建业务对象
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Fetch(Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            构建业务对象
            按照数据源填充(指定属性或映射的表字段需一致)
            </summary>
            <param name="source">数据源</param>
            <param name="propertyInfos">需匹配的属性信息, 当为null、空队列时匹配全部属性, 映射的表字段(或主外键)需一致</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchSelf(Phenix.Business.IBusinessObject,Phenix.Core.Mapping.IPropertyInfo[])">
            <summary>
            构建自己
            </summary>
        </member>
        <member name="F:Phenix.Business.BusinessBase`1.SelectedProperty">
            <summary>
            Selected的属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSelectedValueChanging">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSelectedValueChanged">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.AddCacheType(Phenix.Business.IBusiness)">
            <summary>
            添加缓存类型
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Clone(System.Boolean)">
            <summary>
            克隆
            </summary>
            <param name="isNew">全新的</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.PureClone">
            <summary>
            纯净克隆
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnInitializeNew">
            <summary>
            当新增初始化之后
            本函数仅通过业务类工厂函数New()或将新增业务对象添加到业务集合时才被调用
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MarkNew">
            <summary>
            标为 IsNew = true
            主键(包括Details)重新生成
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MarkOld">
            <summary>
            标为 IsNew = false 且 IsSelfDirty = false
            resetOldFieldValues = false
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MarkOld(System.Boolean)">
            <summary>
            标为 IsNew = false 且 IsSelfDirty = false
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MarkDirty">
            <summary>
            标为 IsSelfDirty = true
            suppressEvent = false
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MarkDirty(System.Boolean)">
            <summary>
            标为 IsSelfDirty = true
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ReplaceFrom(`0)">
            <summary>
            置换为与source相同内容的对象
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Refresh">
            <summary>
            刷新本地
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="info">属性信息</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(Csla.PropertyInfo{``0},System.Func{System.Object})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="info">属性信息</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(Csla.PropertyInfo{``0},System.Func{`0,System.Object})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="info">属性信息</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            注册属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            注册属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            注册属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            注册属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0,Csla.RelationshipTypes)">
            <summary>
            注册属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0,System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValue">缺省值</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{System.Object})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`0,System.Object})">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{System.Object},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`0,System.Object},System.String)">
            <summary>
            注册属性信息
            </summary>
            <typeparam name="P">属性类</typeparam>
            <param name="propertyLambdaExpression">属性表达式</param>
            <param name="defaultValueFunc">缺省值函数</param>
            <param name="friendlyName">友好名</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CanReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            属性可读
            </summary>
            <param name="property">属性信息</param>
            <returns>属性可读</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CanWriteProperty(Csla.Core.IPropertyInfo)">
            <summary>
            属性可写
            </summary>
            <param name="property">属性信息</param>
            <returns>属性可写</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnPropertyChanging(Csla.Core.IPropertyInfo)">
            <summary>
            属性发生更改时
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnPropertyChanged(Csla.Core.IPropertyInfo)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnPropertyChanged(System.String)">
            <summary>
            属性发生更改后
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ExecuteRules``1(Phenix.Core.Mapping.FieldMapInfo,``0@,``0)">
            <summary>
            执行业务规则
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.MoveTo(Phenix.Business.IBusinessCollection)">
            <summary>
            移动到新队列中
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearLinkCache">
            <summary>
            清除关联业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearLinkCache(System.String)">
            <summary>
            清除关联业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearLinkCache(System.Type)">
            <summary>
            清除关联业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearLinkCache``1">
            <summary>
            清除关联业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetLink``1(``0)">
            <summary>
            设置关联业务对象
            groupName = null
            </summary>
            <param name="linkBusiness">关联业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetLink``1(``0,System.String)">
            <summary>
            设置关联业务对象
            </summary>
            <param name="linkBusiness">关联业务对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Link``1">
            <summary>
            Link表达式
            groupName = null
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Link``1(System.String)">
            <summary>
            Link表达式
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.IsLink(System.Object)">
            <summary>
            是否关联
            throwIfNotFound = true
            groupName = null
            </summary>
            <param name="link">关联</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.IsLink(System.Object,System.String)">
            <summary>
            是否关联
            throwIfNotFound = true
            </summary>
            <param name="link">关联对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.IsLink(System.Object,System.String,System.Boolean)">
            <summary>
            是否关联
            </summary>
            <param name="link">关联对象</param>
            <param name="groupName">分组名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.LinkTo``1(``0)">
            <summary>
            关联
            groupName = null
            throwIfNotFound = true
            </summary>
            <param name="linkBusiness">关联业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.LinkTo``1(``0,System.String)">
            <summary>
            关联
            throwIfNotFound = true
            </summary>
            <param name="linkBusiness">关联业务对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.LinkTo(System.Object,System.String,System.Boolean)">
            <summary>
            关联
            </summary>
            <param name="link">关联对象</param>
            <param name="groupName">分组名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Unlink``1">
            <summary>
            解除关联
            groupName = null
            throwIfNotFound = true
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Unlink``1(System.String)">
            <summary>
            解除关联
            throwIfNotFound = true
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Unlink``1(``0,System.String)">
            <summary>
            解除关联
            throwIfNotFound = true
            </summary>
            <param name="linkBusiness">关联业务对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Unlink(System.Object,System.String,System.Boolean)">
            <summary>
            解除关联
            </summary>
            <param name="link">关联对象</param>
            <param name="groupName">分组名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.TryGetLink``1(``0@)">
            <summary>
            尝试检索关联业务对象
            groupName = null
            </summary>
            <param name="linkBusiness">关联业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.TryGetLink``1(System.String,``0@)">
            <summary>
            尝试检索关联业务对象
            </summary>
            <param name="groupName">分组名</param>
            <param name="linkBusiness">关联业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindLink``1">
            <summary>
            检索关联业务对象
            groupName = null
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindLink``1(System.String)">
            <summary>
            检索关联业务对象
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1">
            <summary>
            取关联业务对象
            groupName = null
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1(System.String)">
            <summary>
            取关联业务对象
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``2(``0)">
            <summary>
            取关联业务对象
            groupName = null
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``2(``0,System.String)">
            <summary>
            取关联业务对象
            </summary>
            <param name="source">数据源</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1(System.Data.Common.DbConnection)">
            <summary>
            取关联业务对象
            groupName = null
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1(System.Data.Common.DbConnection,System.String)">
            <summary>
            取关联业务对象
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1(System.Data.Common.DbTransaction)">
            <summary>
            取关联业务对象
            groupName = null
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetLink``1(System.Data.Common.DbTransaction,System.String)">
            <summary>
            取关联业务对象
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetParent(Csla.Core.IParent)">
            <summary>
            设置父对象
            </summary>
            <param name="parent">父对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearDetailCache">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearDetailCache(System.String)">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearDetailCache(System.Type)">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearDetailCache``1">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ClearDetailCache``2">
            <summary>
            清除从业务对象Cache
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetCompositionDetail(System.String,Phenix.Business.IBusiness)">
            <summary>
            设置从业务对象(组合关系)
            </summary>
            <param name="key">比对键值</param>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetAggregationDetail(System.String,Phenix.Business.IBusiness)">
            <summary>
            设置从业务对象(聚合关系)
            </summary>
            <param name="key">比对键值</param>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetDetail``1(``0)">
            <summary>
            设置从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetCompositionDetail``1(``0)">
            <summary>
            设置从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetAggregationDetail``1(``0)">
            <summary>
            设置从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetDetail``2(``0)">
            <summary>
            设置从业务对象集合
            </summary>
            <param name="detail">从业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetCompositionDetail``2(``0)">
            <summary>
            设置从业务对象集合(组合关系)
            </summary>
            <param name="detail">从业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetAggregationDetail``2(``0)">
            <summary>
            设置从业务对象集合(聚合关系)
            </summary>
            <param name="detail">从业务对象集合</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail(System.String)">
            <summary>
            检索从业务对象
            </summary>
            <param name="key">比对键值</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetailBusinesses``1">
            <summary>
            检索出从业务对象队列
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail``1(Phenix.Business.Criterions)">
            <summary>
            检索从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail``1">
            <summary>
            检索从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1">
            <summary>
            检索从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1">
            <summary>
            检索从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(System.String)">
            <summary>
            检索从业务对象(组合关系)
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(System.String)">
            <summary>
            检索从业务对象(聚合关系)
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            检索从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(Phenix.Core.Mapping.ICriteria)">
            <summary>
            检索从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(Phenix.Core.Mapping.ICriteria,System.String)">
            <summary>
            检索从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(Phenix.Core.Mapping.ICriteria,System.String)">
            <summary>
            检索从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            检索从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            检索从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(Phenix.Core.Mapping.CriteriaExpression,System.String)">
            <summary>
            检索从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(Phenix.Core.Mapping.CriteriaExpression,System.String)">
            <summary>
            检索从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            检索从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            检索从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            检索从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            检索从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail``2(Phenix.Business.Criterions)">
            <summary>
            检索从业务对象集合
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail``2">
            <summary>
            检索从业务对象集合
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(System.String)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(System.String)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(Phenix.Core.Mapping.ICriteria)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteria">从业务条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(Phenix.Core.Mapping.ICriteria)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteria">从业务条件对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(Phenix.Core.Mapping.ICriteria,System.String)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(Phenix.Core.Mapping.ICriteria,System.String)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(Phenix.Core.Mapping.CriteriaExpression)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String)">
            <summary>
            检索从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String)">
            <summary>
            检索从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(Phenix.Business.Criterions)">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            从业务对象与本业务对象是一对一的关系
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.String,System.Boolean,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,Phenix.Business.Criterions,System.Boolean)">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
            <param name="lazyFetch">是否惰性Fetch(</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.ICriteria,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteria">从业务条件对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,Phenix.Core.Mapping.CriteriaExpression,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            取从业务对象集合
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criteriaExpression">从业务条件表达式</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(``0)">
            <summary>
            取从业务对象集合
            </summary>
            <param name="source">过滤(克隆)数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(``0)">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="source">过滤(克隆)数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(``0)">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="source">过滤(克隆)数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(``0,System.String)">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(``0,System.String)">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            取从业务对象集合
            </summary>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},``0)">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="expression">条件表达式</param>
            <param name="source">过滤(克隆)数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},``0)">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="expression">条件表达式</param>
            <param name="source">过滤(克隆)数据源</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetCompositionDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},``0,System.String)">
            <summary>
            取从业务对象集合(组合关系)
            </summary>
            <param name="expression">条件表达式</param>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetAggregationDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},``0,System.String)">
            <summary>
            取从业务对象集合(聚合关系)
            </summary>
            <param name="expression">条件表达式</param>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.GetDetail``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            取从业务对象集合
            </summary>
            <param name="expression">条件表达式</param>
            <param name="source">过滤(克隆)数据源</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.BeginEdit">
            <summary>
            开始编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CancelEdit">
            <summary>
            取消编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ApplyEdit">
            <summary>
            接受编辑
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FillFieldValuesToDefault(System.Boolean)">
            <summary>
            填充字段值到缺省值
            </summary>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ComputeMasterAggregate">
            <summary>
            计算聚合字段
            property = null
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ComputeMasterAggregate(Phenix.Business.IPropertyInfo)">
            <summary>
            计算聚合字段
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ComputeMasterAggregate(System.String)">
            <summary>
            计算聚合字段
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.InitOldFieldValues(System.Boolean,System.Boolean)">
            <summary>
            初始化旧值
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#Save(System.Boolean,System.Nullable{System.Boolean},Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="onlySaveSelected">仅提交被勾选的业务对象</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save">
            <summary>
            保存
            </summary>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SaveForceUpdate">
            <summary>
            强制按照Update方式提交保存
            </summary>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Boolean,Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存
            </summary>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Data.Common.DbTransaction,Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Data.Common.DbTransaction,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#Save(System.Data.Common.DbTransaction,System.Boolean,Phenix.Business.IBusiness[],Phenix.Business.IBusiness[])">
            <summary>
            保存(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务, 如果为空则将重启新事务</param>
            <param name="needCheckDirty">校验数据库数据在下载到提交期间是否被更改过, 一旦发现将报错: CheckDirtyException; 如果ClassAttribute.AllowIgnoreCheckDirty = false本功能无效, 必定报错: CheckSaveException</param>
            <param name="firstTransactionData">参与事务处理前端的业务队列</param>
            <param name="lastTransactionData">参与事务处理末端的业务队列</param>
            <returns>成功提交的业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSavingSelf">
            <summary>
            保存本业务对象之前
            在执行Save()的程序域里被调用
            </summary>
            <returns>是否继续, 缺省为 true</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSavedSelf(System.Exception)">
            <summary>
            保存本业务对象之后
            在执行Save()的程序域里被调用
            </summary>
            <param name="ex">错误信息</param>
            <returns>发生错误时的友好提示信息, 缺省为 null 直接抛出原异常，否则会抛出SaveException并打包本信息及原异常</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.DoFetchSelf(System.Object)">
            <summary>
            自定义构建业务对象
            </summary>
            <param name="criteria">自定义条件</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.DataPortal_Insert">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.DataPortal_Update">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.DataPortal_DeleteSelf">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnFetchingSelf(System.Data.Common.DbConnection,System.Data.Common.DbCommand,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象之前(运行在持久层的程序域里)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="command">DbCommand</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnFetchingSelf(System.Data.Common.DbTransaction,System.Data.Common.DbCommand,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="command">DbCommand</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnFetchedSelf(System.Data.Common.DbConnection,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象之后(运行在持久层的程序域里)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnFetchedSelf(System.Data.Common.DbTransaction,Phenix.Business.Criterions)">
            <summary>
            构建本业务对象之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSavingSelf(System.Data.Common.DbTransaction)">
            <summary>
            保存(增删改)本业务对象之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnSavedSelf(System.Data.Common.DbTransaction)">
            <summary>
            保存(增删改)本业务对象之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnInsertingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            新增本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnInsertedSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnUpdatingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            更新本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnUpdatedSelf(System.Data.Common.DbTransaction)">
            <summary>
            更新本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnDeletingDetails(System.Data.Common.DbTransaction)">
            <summary>
            删除本从业务对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnDeletedDetails(System.Data.Common.DbTransaction)">
            <summary>
            删除本从业务对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnDeletingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            删除本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#OnDeletingSelf(System.Data.Common.DbTransaction,System.Collections.Generic.List{Phenix.Core.Mapping.CriteriaExpression}@)">
            <summary>
            删除本对象数据之前(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="limitingCriteriaExpressions">限制保存的条件(not exists 条件语句)</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.OnDeletedSelf(System.Data.Common.DbTransaction)">
            <summary>
            删除本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#OnDeletedSelf(System.Data.Common.DbTransaction)">
            <summary>
            删除本对象数据之后(运行在持久层的程序域里)
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckRepeated">
            <summary>
            校验是否存在重复数据
            </summary>
            <returns>重复的对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfRules">
            <summary>
            校验本业务对象是否有效
            onlyOldError = false
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfRules(System.Boolean)">
            <summary>
            校验本业务对象是否有效
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfRules(System.Boolean,System.Boolean)">
            <summary>
            校验本业务对象是否有效
            throwIfException = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfRules(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            校验本业务对象是否有效
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfObjectRules">
            <summary>
            校验本业务对象是否有效(仅ObjectRules)
            onlySelfDirty = false
            throwIfException = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfObjectRules(System.Boolean)">
            <summary>
            校验本业务对象是否有效(仅ObjectRules)
            throwIfException = false
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckSelfObjectRules(System.Boolean,System.Boolean)">
            <summary>
            校验本业务对象是否有效(仅ObjectRules)
            </summary>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <param name="throwIfException">如果为 true, 则当发现!IsSelfValid时抛出Csla.Rules.ValidationException异常</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckRules">
            <summary>
            校验本业务对象及其从业务对象集合中数据是否有效
            onlyOldError = false
            onlySelfDirty = false
            </summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckRules(System.Boolean)">
            <summary>
            校验本业务对象及其从业务对象集合中数据是否有效
            onlySelfDirty = false
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CheckRules(System.Boolean,System.Boolean)">
            <summary>
            校验本业务对象及其从业务对象集合中数据是否有效
            </summary>
            <param name="onlyOldError">仅检查原有错误</param>
            <param name="onlySelfDirty">仅检查脏数据</param>
            <returns>错误信息</returns>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.DataSourceKey">
            <summary>
            数据源键
            缺省为 Root.DataSourceKey
            缺省为 Criterions.DataSourceKey
            缺省为 T 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.FetchTimeout">
            <summary>
            等待Fetch执行的时间(秒数）, null 指示不限制
            缺省为 null
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.InitializedNew">
            <summary>
            完成新增初始化
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Owner">
            <summary>
            所属业务对象集合
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsRoot">
            <summary>
            是否是根对象
            仅允许从根对象上进行(级联)保存
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Root">
            <summary>
            根对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.RootBusiness">
            <summary>
            根业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.MasterBusiness">
            <summary>
            主业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Phenix#Core#Operate#ISelectable#Owner">
            <summary>
            所属对象勾选集合
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Selected">
            <summary>
            是否被勾选
            用于标记本对象
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.SelectedOption">
            <summary>
            是否被勾选
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.InSelectableList">
            <summary>
            在勾选项清单
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.NotUndoable">
            <summary>
            不参与多级撤销并阻断Detail对象的多级撤销
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.EditMode">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.EditModeOption">
            <summary>
            在编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.EditLevel">
            <summary>
            编辑层级
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.AllowEdit">
            <summary>
            是否允许被勾选
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.AllowDelete">
            <summary>
            是否允许删除本对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsDirty">
            <summary>
            是否本业务对象及其主、从业务对象集合中含有脏数据
            本属性不能用于判断是否处于编辑状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsValid">
            <summary>
            是否本业务对象及其主、从业务对象集合中数据具备有效性
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsSavable">
            <summary>
            是否可以保存数据
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.CascadingSave">
            <summary>
            是否级联Save?
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.CascadingDelete">
            <summary>
            是否级联Delete?
            CompositionDetail: CascadingDelete = true
            AggregationDetail: CascadingDelete = false
            如果 CascadingSave = false 则忽略本属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.FirstTransactionData">
            <summary>
            参与事务处理前端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.LastTransactionData">
            <summary>
            参与事务处理末端的业务队列
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.NeedSaveLinks">
            <summary>
            需要提交关联的业务对象到服务端
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.AutoSaveLinks">
            <summary>
            可自动保存关联的业务对象
            缺省为 NeedSaveLinks
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.EnsembleOnSaving">
            <summary>
            保留非脏对象以提交到服务端的代码使用
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.NeedRefreshSelf">
            <summary>
            提交数据后需要刷新本地自己
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.NeedRefresh">
            <summary>
            提交数据后需要刷新本地
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#DbConnection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.Phenix#Business#IBusiness#DbTransaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="E:Phenix.Business.BusinessBase`1.SelectedValueChanging">
            <summary>
            Selected属性值被更改前
            </summary>
        </member>
        <member name="E:Phenix.Business.BusinessBase`1.SelectedValueChanged">
            <summary>
            Selected属性值被更改后
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CascadingDeleteDetailInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CascadingDeleteDetailInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.CascadingDeleteDetailInfo.Owner">
            <summary>
            所属对象
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.CascadingDeleteDetailInfo.ItemType">
            <summary>
            业务对象类型
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.CascadingDeleteDetailInfo.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessObjectPage">
            <summary>
            业务对象分页接口
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessObjectPage.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessPageBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessPageBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessPageBase`1.SetParent(Csla.Core.IParent)">
            <summary>
            设置父对象
            </summary>
            <param name="parent">父对象</param>
        </member>
        <member name="P:Phenix.Business.BusinessPageBase`1.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="T:Phenix.Business.BusinessTreeBase`2">
            <summary>
            业务树基类
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessTree">
            <summary>
            业务树接口
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessTree.FilterParentNode(Phenix.Business.IBusinessTreeNode)">
            <summary>
            过滤出父节点业务对象
            </summary>
            <param name="childNode">子节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.IBusinessTree.FilterBrethren(Phenix.Business.IBusinessTreeNode)">
            <summary>
            过滤出兄弟节点业务对象集合
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.IBusinessTree.FilterChildren(Phenix.Business.IBusinessTreeNode)">
            <summary>
            过滤出子节点业务对象集合
            </summary>
            <param name="parentNode">父节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeBase`2.FilterParentNode(`1)">
            <summary>
            过滤出父节点业务对象
            </summary>
            <param name="childNode">子节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeBase`2.FilterBrethren(`1)">
            <summary>
            过滤出兄弟节点业务对象集合
            </summary>
            <param name="brotherNode">兄弟点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeBase`2.FilterChildren(`1)">
            <summary>
            过滤出子节点业务对象集合
            </summary>
            <param name="parentNode">父节点业务对象</param>
        </member>
        <member name="T:Phenix.Business.BusinessTreeNodeBase`1">
            <summary>
            业务树节点基类
            </summary>
        </member>
        <member name="T:Phenix.Business.IBusinessTreeNode">
            <summary>
            业务树节点接口
            </summary>
        </member>
        <member name="M:Phenix.Business.IBusinessTreeNode.AllowAddChild(Phenix.Business.IBusinessTreeNode)">
            <summary>
            是否允许添加孩子
            </summary>
            <param name="childNode">子节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.IBusinessTreeNode.AllowTogether(Phenix.Business.IBusinessTreeNode)">
            <summary>
            是否允许在一起
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.IBusinessTreeNode.IsBrother(Phenix.Business.IBusinessTreeNode,System.String)">
            <summary>
            是否兄弟
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="P:Phenix.Business.IBusinessTreeNode.ParentNode">
            <summary>
            父亲
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessTreeNode.Brethren">
            <summary>
            兄弟们
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessTreeNode.Children">
            <summary>
            孩子们
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusinessTreeNode.AllowMove">
            <summary>
            是否允许移动
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.AllowAddChild(`0)">
            <summary>
            是否允许添加孩子
            缺省为 Owner.AllowAddItem
            </summary>
            <param name="childNode">子节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.AllowTogether(`0)">
            <summary>
            是否允许在一起
            缺省为 Owner.AllowAddItem
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.IsBrother(`0)">
            <summary>
            是否兄弟
            groupName = null
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessTreeNodeBase`1.IsBrother(`0,System.String)">
            <summary>
            是否兄弟
            throwIfNotFound = true
            </summary>
            <param name="brotherNode">兄弟节点业务对象</param>
            <param name="groupName">分组名</param>
        </member>
        <member name="P:Phenix.Business.BusinessTreeNodeBase`1.ParentNode">
            <summary>
            父亲
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessTreeNodeBase`1.Brethren">
            <summary>
            兄弟们
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessTreeNodeBase`1.Children">
            <summary>
            孩子们
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessTreeNodeBase`1.AllowMove">
            <summary>
            是否允许移动
            缺省为 true
            </summary>
        </member>
        <member name="T:Phenix.Business.CommandBase`1">
            <summary>
            指令基类 
            在DataPortal_Execute()、DoExecute()函数(任选一处)中编写运行在服务端的指令处理代码
            消费者调用Execute()函数提交指令
            </summary>
        </member>
        <member name="T:Phenix.Business.Core.CommandBase`1">
            <summary>
            指令基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.CreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DynamicCreateInstance">
            <summary>
            构建实体
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.PropertyHasChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DataPortal_Execute">
            <summary>
            DataPortal_Execute
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoExecute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoUploadFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            </summary>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoUploadBigFile(Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            </summary>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoDownloadFile">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoDownloadFileBytes">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件字节串</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.DoDownloadBigFile(System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            </summary>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.PermanentLog">
            <summary>
            持久化执行动作日志
            </summary>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.FetchExecuteAction">
            <summary>
            检索执行动作
            </summary>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.FetchExecuteAction(System.DateTime,System.DateTime)">
            <summary>
            检索执行动作
            </summary>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.FetchExecuteAction(System.String,System.DateTime,System.DateTime)">
            <summary>
            检索执行动作
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
            <returns>执行动作信息队列</returns>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.ClearExecuteAction(Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除执行动作
            </summary>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="M:Phenix.Business.Core.CommandBase`1.ClearExecuteAction(System.String,Phenix.Core.Mapping.ExecuteAction,System.DateTime,System.DateTime)">
            <summary>
            清除执行动作
            </summary>
            <param name="userNumber">登录工号, null代表全部</param>
            <param name="action">执行动作</param>
            <param name="startTime">起始时间</param>
            <param name="finishTime">结束时间</param>
        </member>
        <member name="P:Phenix.Business.Core.CommandBase`1.DataSourceKey">
            <summary>
            数据源键
            缺省为 T 上的 ClassAttribute.DataSourceKey
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.CommandBase`1.Caption">
            <summary>
            标签
            缺省为 T 上的 ClassAttribute.FriendlyName
            用于提示信息等
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.CommandBase`1.PrimaryKey">
            <summary>
            主键值
            缺省为 Caption
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.CommandBase`1.AuthorizationRules">
            <summary>
            授权规则集合
            </summary>
        </member>
        <member name="P:Phenix.Business.Core.CommandBase`1.CanExecute">
            <summary>
            是否允许Execute
            </summary>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.ReplaceFrom(`0)">
            <summary>
            置换为与source相同内容的对象
            </summary>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute">
            <summary>
            执行指令
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute(`0)">
            <summary>
            执行指令
            </summary>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.UploadFiles(System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="fileNames">待上传的文件路径</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.UploadFiles(`0,System.String[])">
            <summary>
            上传文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileNames">待上传的文件路径</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.UploadBigFile(System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.UploadBigFile(`0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            上传大文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待上传的文件路径</param>
            <param name="doProgress">执行进度干预</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DownloadFile(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DownloadFile(`0,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待保存的文件路径</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DownloadBigFile(System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DownloadBigFile(`0,System.String,System.Func{System.Object,Phenix.Core.IO.FileChunkInfo,System.Boolean})">
            <summary>
            下载大文件
            </summary>
            <param name="inParam">输入参数对象</param>
            <param name="fileName">待保存的文件路径</param>
            <param name="doProgress">执行进度干预</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute(System.Data.Common.DbConnection)">
            <summary>
            执行指令
            </summary>
            <param name="connection">数据库连接</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute(System.Data.Common.DbConnection,`0)">
            <summary>
            执行指令
            </summary>
            <param name="connection">数据库连接</param>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute(System.Data.Common.DbTransaction)">
            <summary>
            执行指令
            </summary>
            <param name="transaction">数据库事务</param>
            <returns>this</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.Execute(System.Data.Common.DbTransaction,`0)">
            <summary>
            执行指令
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="inParam">输入参数对象</param>
            <returns>输出参数对象</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.OnExecuting">
            <summary>
            执行指令之前
            </summary>
            <returns>是否继续, 缺省为 true</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.OnExecuted(System.Exception)">
            <summary>
            执行指令之后
            </summary>
            <param name="ex">错误信息</param>
            <returns>发生错误时的友好提示信息, 缺省为 null</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoExecute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoExecute(System.Data.Common.DbConnection)">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoExecute()且未调用base.DoExecute()，则本函数将不会执行到
            如果重载了DataPortal_Execute()且未调用base.DataPortal_Execute()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoExecute(System.Data.Common.DbTransaction)">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoExecute()且未调用base.DoExecute()，则本函数将不会执行到
            如果重载了DataPortal_Execute()且未调用base.DataPortal_Execute()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            </summary>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadFiles(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadFiles()且未调用base.DoUploadFiles()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadFiles(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>
            处理上传文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadFiles()且未调用base.DoUploadFiles()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="fileStreams">待处理的文件流</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadBigFile(Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            </summary>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadBigFile(System.Data.Common.DbConnection,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadBigFile()且未调用base.DoUploadBigFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoUploadBigFile(System.Data.Common.DbTransaction,Phenix.Core.IO.FileChunkInfo)">
            <summary>
            处理上传大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoUploadBigFile()且未调用base.DoUploadBigFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="fileChunkInfo">待处理的文件块信息</param>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadFile">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            </summary>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadFile(System.Data.Common.DbConnection)">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadFile()且未调用base.DoDownloadFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadFile(System.Data.Common.DbTransaction)">
            <summary>
            获取下载文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadFile()且未调用base.DoDownloadFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <returns>文件流</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadBigFile(System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            </summary>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadBigFile(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadBigFile()且未调用base.DoDownloadBigFile()，则本函数将不会执行到
            </summary>
            <param name="connection">数据库连接</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Phenix.Business.CommandBase`1.DoDownloadBigFile(System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            获取下载大文件(运行在持久层的程序域里)
            请使用业务对象处理逻辑
            如直接操作数据也请用Phenix.Core.Data.DbCommandHelper与数据库交互以保证可移植性
            如果重载了DoDownloadBigFile()且未调用base.DoDownloadBigFile()，则本函数将不会执行到
            如果拦截了异常，请处理后继续抛出，以便交给基类执行Rollback()
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="chunkNumber">块号</param>
            <returns>文件块信息</returns>
        </member>
        <member name="P:Phenix.Business.CommandBase`1.ExecuteResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="T:Phenix.Business.Core.BusinessRuleRegisteringEventHandler">
            <summary>
            申明业务规则注册中事件处理函数
            </summary>
            <param name="businessRules">业务规则库</param>
        </member>
        <member name="T:Phenix.Business.Core.AuthorizationRuleRegisteringEventHandler">
            <summary>
            申明授权规则注册中事件处理函数
            </summary>
            <param name="authorizationRules">授权规则库</param>
        </member>
        <member name="T:Phenix.Business.CriteriaBase">
            <summary>
            条件基类 
            </summary>
        </member>
        <member name="T:Phenix.Business.Criterions">
            <summary>
            条件集
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = true
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = true
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Business.IBusinessObject)">
            <summary>
            初始化
            criteria = null
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = itselfBusiness == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="itselfBusiness">自业务对象</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="cacheEnabled">需要缓存对象?</param>
            <param name="includeDisabled">是否包含禁用记录?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,System.Boolean,System.Boolean,Phenix.Business.IBusinessObject)">
            <summary>
            初始化
            criteria = null
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            </summary>
            <param name="resultType">业务类</param>
            <param name="cacheEnabled">需要缓存对象?</param>
            <param name="includeDisabled">是否包含禁用记录?</param>
            <param name="itselfBusiness">自业务对象</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteria == null
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteria == null
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,System.Boolean,Phenix.Business.IBusinessObject)">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="itselfBusiness">自业务对象</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            criteria = null
            cacheEnabled = masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteria == null 且 masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.ICriteria,Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cacheEnabled = criteria == null 且 masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            itselfBusiness = null
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteria">条件对象</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteriaExpression == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,System.Boolean,Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteriaExpression == null
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="resultIsArray">返回对象是数组</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            masterBusiness = null
            groupName = null
            cascadingSave = true
            cascadingDelete = true
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">可以缓存对象?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cascadingSave = true
            cascadingDelete = true
            cacheEnabled = criteriaExpression == null 且 masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,Phenix.Business.IBusinessObject,System.String,System.Boolean,System.Boolean,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            初始化
            cacheEnabled = criteriaExpression == null 且 masterBusiness == null 且 String.IsNullOrEmpty(groupName)
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="masterBusiness">主业务对象</param>
            <param name="groupName">分组名</param>
            <param name="cascadingSave">是否级联保存?</param>
            <param name="cascadingDelete">是否级联删除?</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Criterions.#ctor(System.Type,Phenix.Core.Mapping.CriteriaExpression,System.Boolean,Phenix.Business.IBusinessObject)">
            <summary>
            初始化
            includeDisabled = false
            </summary>
            <param name="resultType">业务类</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cacheEnabled">是否需要缓存对象?</param>
            <param name="itselfBusiness">自业务对象</param>
        </member>
        <member name="M:Phenix.Business.Criterions.CheckRules(System.Boolean)">
            <summary>
            为Criteria检查业务规则
            </summary>
            <param name="throwIfException">如果为 true, 则抛出ValidationException异常</param>
        </member>
        <member name="M:Phenix.Business.Criterions.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Business.Criterions.CompareTo(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.CompareTo(Phenix.Business.Criterions)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.Compare(Phenix.Business.Criterions,Phenix.Business.Criterions)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.op_Equality(Phenix.Business.Criterions,Phenix.Business.Criterions)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.op_Inequality(Phenix.Business.Criterions,Phenix.Business.Criterions)">
            <summary>
            不等于
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.op_LessThan(Phenix.Business.Criterions,Phenix.Business.Criterions)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.op_GreaterThan(Phenix.Business.Criterions,Phenix.Business.Criterions)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Business.Criterions.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ResultTypeAssemblyQualifiedName">
            <summary>
            返回对象类型程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ResultType">
            <summary>
            返回对象类型
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ResultCoreType">
            <summary>
            返回对象核心类型
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ResultIsArray">
            <summary>
            返回对象是数组
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.Criteria">
            <summary>
            条件对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.MasterBusiness">
            <summary>
            主业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.GroupName">
            <summary>
            分组名
            用于区分子表中存在多组外键关联主表的情况
            null代表全部
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.CascadingSave">
            <summary>
            是否级联Save?
            缺省为 true
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.CascadingDelete">
            <summary>
            是否级联Delete?
            缺省为 true, 如果 CascadingSave = false 则忽略本属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.CacheEnabled">
            <summary>
            可以缓存对象?
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ExtremelyCacheEnabled">
            <summary>
            可以极端缓存对象?
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.SectionNames">
            <summary>
            切片名队列
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.IncludeDisabled">
            <summary>
            是否包含禁用记录
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.ItselfBusiness">
            <summary>
            自业务对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.NeedPage">
            <summary>
            需要分页
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.PageSize">
            <summary>
            分页大小
            缺省为 1000
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.PageNo">
            <summary>
            分页号
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.OrderByInfos">
            <summary>
            数据排列顺序队列
            </summary>
        </member>
        <member name="P:Phenix.Business.Criterions.Tag">
            <summary>
            附属物
            </summary>
        </member>
        <member name="T:Phenix.Business.EntityBase`1">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="T:Phenix.Business.EntityListBase`2">
            <summary>
            实体集合基类
            </summary>
        </member>
        <member name="T:Phenix.Business.CheckSaveException">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(System.String)">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(System.String,System.Exception)">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(Phenix.Business.IBusiness)">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(Phenix.Business.IBusiness,System.String)">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(Phenix.Business.IBusiness,System.Exception)">
            <summary>
            校验限制保存时异常
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Business.CheckSaveException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Business.CheckSaveException.Business">
            <summary>
            业务对象
            </summary>
        </member>
        <member name="T:Phenix.Business.ExecuteException">
            <summary>
            执行指令异常
            </summary>
        </member>
        <member name="M:Phenix.Business.ExecuteException.#ctor">
            <summary>
            执行指令异常
            </summary>
        </member>
        <member name="M:Phenix.Business.ExecuteException.#ctor(System.String)">
            <summary>
            执行指令异常
            </summary>
        </member>
        <member name="M:Phenix.Business.ExecuteException.#ctor(System.String,System.Exception)">
            <summary>
            执行指令异常
            </summary>
        </member>
        <member name="M:Phenix.Business.ExecuteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Business.SaveException">
            <summary>
            保存数据异常
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.#ctor">
            <summary>
            保存数据异常
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.#ctor(System.String)">
            <summary>
            保存数据异常
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.#ctor(System.String,System.Exception)">
            <summary>
            保存数据异常
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.#ctor(System.Collections.Generic.IList{Phenix.Core.ExceptionEventArgs})">
            <summary>
            保存数据异常
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Business.SaveException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Business.SaveException.SaveErrors">
            <summary>
            Save时发生的错误
            </summary>
        </member>
        <member name="T:Phenix.Business.IMethodInfo">
            <summary>
            方法信息接口
            </summary>
        </member>
        <member name="P:Phenix.Business.IMethodInfo.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="T:Phenix.Business.IPropertyInfo">
            <summary>
            属性信息接口
            </summary>
        </member>
        <member name="P:Phenix.Business.IPropertyInfo.Type">
            <summary>
            类
            </summary>
        </member>
        <member name="P:Phenix.Business.IPropertyInfo.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Business.IPropertyInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Business.IPropertyInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="T:Phenix.Business.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="M:Phenix.Business.MethodInfo.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Business.MethodInfo.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="P:Phenix.Business.MethodInfo.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Business.MethodInfo.FriendlyName">
            <summary>
            友好名
            </summary>
        </member>
        <member name="P:Phenix.Business.MethodInfo.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Business.MethodInfo.MethodMapInfo">
            <summary>
            数据映射方法信息
            </summary>
        </member>
        <member name="T:Phenix.Business.PropertyInfo`1">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Addition(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Addition(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Add
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Addition(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Add
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Subtraction(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Minus
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Subtraction(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Subtract
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Subtraction(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Subtract
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_UnaryNegation(Phenix.Business.PropertyInfo{`0})">
            <summary>
            Subtract
            </summary>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Multiply(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Multiply(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Multiply
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Multiply(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Multiply
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Division(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Division(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Divide
            </summary>
            <param name="leftNode">运算公式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Division(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Divide
            </summary>
            <param name="value">值</param>
            <param name="rightNode">运算公式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.ToLower">
            <summary>
            ToLower
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.ToUpper">
            <summary>
            ToUpper
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.TrimStart">
            <summary>
            TrimStart
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.TrimEnd">
            <summary>
            TrimEnd
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Trim">
            <summary>
            Trim
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Substring(System.Int32)">
            <summary>
            Substring
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Substring(System.Int32,System.Int32)">
            <summary>
            Substring
            </summary>
            <param name="startIndex">起始字符位置(从零开始)</param>
            <param name="length">截取字符数</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Equality(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Equality(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Equal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Equality(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Equal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThan(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThan(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Greater
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThan(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Greater
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThanOrEqual(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThanOrEqual(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_GreaterThanOrEqual(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            GreaterOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThan(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThan(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Lesser
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThan(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Lesser
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThanOrEqual(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThanOrEqual(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            LesserOrEqual
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_LessThanOrEqual(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            LesserOrEqual
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Inequality(Phenix.Business.PropertyInfo{`0},Phenix.Business.PropertyInfo{`0})">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="rightNode">运条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Inequality(Phenix.Business.PropertyInfo{`0},`0)">
            <summary>
            Unequal
            </summary>
            <param name="leftNode">条件操作表达式左</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.op_Inequality(`0,Phenix.Business.PropertyInfo{`0})">
            <summary>
            Unequal
            </summary>
            <param name="value">值</param>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Like(`0)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Like(`0,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.LikeIgnoreCase(`0)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Unlike(`0)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Unlike(`0,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="value">值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.UnlikeIgnoreCase(`0)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Like(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Like(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            Like
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.LikeIgnoreCase(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            LikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Unlike(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Unlike(Phenix.Core.Mapping.IPropertyInfo,System.Boolean)">
            <summary>
            Unlike
            </summary>
            <param name="rightNode">条件操作表达式右</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.UnlikeIgnoreCase(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            UnlikeIgnoreCase
            </summary>
            <param name="rightNode">条件操作表达式右</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.In(`0[])">
            <summary>
            In
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.NotIn(`0[])">
            <summary>
            NotIn
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Business.PropertyInfo`1.SetValue(`0)">
            <summary>
            SetValue
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.Length">
            <summary>
            ToLower
            </summary>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.IsNull">
            <summary>
            IsNull
            </summary>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.IsNotNull">
            <summary>
            IsNotNull
            </summary>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.DefaultValueFunc">
            <summary>
            缺省值函数
            </summary>
        </member>
        <member name="P:Phenix.Business.PropertyInfo`1.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.AuthorizationContext">
            <summary>
            授权上下文
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationContext.Rule">
            <summary>
            授权规则
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationContext.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationContext.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationContext.HasPermission">
            <summary>
            表明是否许可
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationContext.DenyMessage">
            <summary>
            被拒绝时消息
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.AuthorizationRules">
            <summary>
            授权规则集合
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.AuthorizationRules.AddRule(Phenix.Business.Rules.IAuthorizationRule)">
            <summary>
            注册授权规则
            </summary>
            <param name="rule">授权规则对象</param>
        </member>
        <member name="M:Phenix.Business.Rules.AuthorizationRules.HasPermission(Phenix.Business.Rules.IAuthorizationObject,Phenix.Core.Mapping.MethodAction,System.String,System.Nullable{System.Boolean},System.Boolean,System.Object[])">
            <summary>
            是否许可
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.AuthorizationRules.TargetType">
            <summary>
            目标类
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.ExecuteAuthorizationRule">
            <summary>
            方法授权规则基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.IAuthorizationRule">
            <summary>
            授权规则接口
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.IAuthorizationRule.Execute(Phenix.Business.Rules.AuthorizationContext)">
            <summary>
            执行
            </summary>
            <param name="context">授权上下文</param>
        </member>
        <member name="P:Phenix.Business.Rules.IAuthorizationRule.ElementName">
            <summary>
            元素(属性/方法)名称
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.IAuthorizationRule.Element">
            <summary>
            元素(属性/方法)
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.IAuthorizationRule.Action">
            <summary>
            授权活动
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.ExecuteAuthorizationRule.#ctor(Phenix.Core.Mapping.IMethodInfo)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.ExecuteAuthorizationRule.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            执行
            </summary>
            <param name="context">授权上下文</param>
        </member>
        <member name="M:Phenix.Business.Rules.ExecuteAuthorizationRule.Execute(Phenix.Business.Rules.AuthorizationContext)">
            <summary>
            执行
            </summary>
            <param name="context">授权上下文</param>
        </member>
        <member name="P:Phenix.Business.Rules.ExecuteAuthorizationRule.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.ExecuteAuthorizationRule.ElementName">
            <summary>
            元素(属性/方法)名称
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.ExecuteAuthorizationRule.Element">
            <summary>
            元素(属性/方法)
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.ExecuteAuthorizationRule.Action">
            <summary>
            授权活动
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.ExecuteAuthorizationRule.CacheResult">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.MaxLengthRule">
            <summary>
            最大长度规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.MaxLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Phenix.Business.Rules.MaxLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32,System.String)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="max">最大值</param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.MaxLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32,System.Func{System.String})">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="max">最大值</param>
            <param name="messageDelegate">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.MaxLengthRule.GetMessage">
            <summary>
            获取提示信息
            </summary>
            <value></value>
        </member>
        <member name="M:Phenix.Business.Rules.MaxLengthRule.Execute(Csla.Rules.RuleContext)">
            <summary>
             执行
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.MaxLengthRule.PrimaryProperty">
            <summary>
            执行业务规则的属性
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.MaxLengthRule.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.MinLengthRule">
            <summary>
            最小长度规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.MinLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="min">最小值</param>
        </member>
        <member name="M:Phenix.Business.Rules.MinLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32,System.String)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="min">最小值</param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.MinLengthRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Int32,System.Func{System.String})">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
            <param name="min">最小值</param>
            <param name="messageDelegate">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.MinLengthRule.GetMessage">
            <summary>
            获取提示信息
            </summary>
            <value></value>
        </member>
        <member name="M:Phenix.Business.Rules.MinLengthRule.Execute(Csla.Rules.RuleContext)">
            <summary>
             执行
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.MinLengthRule.PrimaryProperty">
            <summary>
            执行业务规则的属性
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.MinLengthRule.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.ObjectRule">
            <summary>
            对象级别的规则基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.PropertyAuthorizationRule">
            <summary>
            属性授权规则基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.PropertyAuthorizationRule.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            执行
            </summary>
            <param name="context">授权上下文</param>
        </member>
        <member name="M:Phenix.Business.Rules.PropertyAuthorizationRule.Execute(Phenix.Business.Rules.AuthorizationContext)">
            <summary>
            执行
            </summary>
            <param name="context">授权上下文</param>
        </member>
        <member name="P:Phenix.Business.Rules.PropertyAuthorizationRule.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.PropertyAuthorizationRule.ElementName">
            <summary>
            元素(属性/方法)名称
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.PropertyAuthorizationRule.Element">
            <summary>
            元素(属性/方法)
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.PropertyAuthorizationRule.Action">
            <summary>
            授权活动
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.PropertyAuthorizationRule.CacheResult">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.EditValidationRule">
            <summary>
            属性有效性规则基类 
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.EditValidationRule.#ctor(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            初始化
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="T:Phenix.Business.Rules.ReadAuthorizationRule">
            <summary>
            读属性授权规则基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.ReadAuthorizationRule.#ctor(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            初始化
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="T:Phenix.Business.Rules.RequiredRule">
            <summary>
            必输规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.RequiredRule.#ctor(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">主属性信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.RequiredRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.String)">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">应用规则的属性</param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.RequiredRule.#ctor(Phenix.Core.Mapping.IPropertyInfo,System.Func{System.String})">
            <summary>
            初始化
            </summary>
            <param name="primaryProperty">应用规则的属性</param>
            <param name="messageDelegate">提示信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.RequiredRule.GetMessage">
            <summary>
            获取提示信息
            </summary>
            <value></value>
        </member>
        <member name="M:Phenix.Business.Rules.RequiredRule.Execute(Csla.Rules.RuleContext)">
            <summary>
             执行
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.RequiredRule.PrimaryProperty">
            <summary>
            执行业务规则的属性
            </summary>
        </member>
        <member name="T:Phenix.Business.Rules.WriteAuthorizationRule">
            <summary>
            写属性授权规则基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.WriteAuthorizationRule.#ctor(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            初始化
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="T:Phenix.Business.Rules.CommonBusinessRule">
            <summary>
            公共业务规则基类
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.CommonBusinessRule.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.CommonBusinessRule.#ctor(Phenix.Core.Mapping.IPropertyInfo)">
            <summary>
            初始化
            </summary>
            <param name="primaryPropertyInfo">主属性信息</param>
        </member>
        <member name="T:Phenix.Business.Rules.RangeCompareRule`1">
            <summary>
             比较范围规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Rules.RangeCompareRule`1.#ctor(Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.IPropertyInfo)">
             <summary>
             初始化
             </summary>
            <param name="primaryPropertyInfo">主属性信息</param>
            <param name="minValuePropertyInfo">最小值属性信息</param>
            <param name="maxValuePropertyInfo">最大值属性信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.RangeCompareRule`1.Register(Csla.Rules.BusinessRules,Phenix.Core.Mapping.IPropertyInfo,Phenix.Core.Mapping.IPropertyInfo)">
             <summary>
             注册到业务规则库中
             </summary>
            <param name="businessRules">业务规则库</param>
            <param name="minValuePropertyInfo">最小值属性信息</param>
            <param name="maxValuePropertyInfo">最大值属性信息</param>
        </member>
        <member name="M:Phenix.Business.Rules.RangeCompareRule`1.Execute(Csla.Rules.RuleContext)">
            <summary>
             执行
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.RangeCompareRule`1.MinValuePropertyInfo">
            <summary>
            最小值属性信息
            </summary>
        </member>
        <member name="P:Phenix.Business.Rules.RangeCompareRule`1.MaxValuePropertyInfo">
            <summary>
            最大值属性信息
            </summary>
        </member>
        <member name="T:Phenix.Business.Security.UserPrincipal">
            <summary>
            用户对象
            </summary>
        </member>
        <member name="M:Phenix.Business.Security.UserPrincipal.#ctor(Phenix.Core.Security.UserIdentity)">
            <summary>
            初始化
            </summary>
            <param name="identity">用户身份</param>
        </member>
        <member name="M:Phenix.Business.Security.UserPrincipal.CreateTester">
            <summary>
            构建测试用户
            </summary>
        </member>
        <member name="M:Phenix.Business.Security.UserPrincipal.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
        </member>
        <member name="P:Phenix.Business.Security.UserPrincipal.Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Business.Security.UserPrincipal.Phenix#Core#Security#IPrincipal#Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Business.Security.UserPrincipal.System#Security#Principal#IPrincipal#Identity">
            <summary>
            特性
            </summary>
        </member>
        <member name="P:Phenix.Business.Security.UserPrincipal.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="T:Phenix.Business.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.CheckSavableException">
            <summary>
              查找类似 The submitted data {0} are not allowed to save 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.CheckSaveException">
            <summary>
              查找类似 The submitted data {0} do not conform to the conditions 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.DisabledRule">
            <summary>
              查找类似 {0}.{1} disabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.ExecuteException">
            <summary>
              查找类似 Failure to execute command 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.MethodExecuteNotAllowed">
            <summary>
              查找类似 {0}.{1} Method execution not allowed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.PropertyGetNotAllowed">
            <summary>
              查找类似 {0}.{1} Property get not allowed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.PropertySetNotAllowed">
            <summary>
              查找类似 {0}.{1} Property set not allowed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.RangeCompareRule">
            <summary>
              查找类似 {0} value &apos;{1}&apos; can not be exceed {2} value &apos;{3}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.RestoreDisabledException">
            <summary>
              查找类似 Disable data has been restored 的本地化字符串。
            </summary>
        </member>
        <member name="P:Phenix.Business.Properties.Resources.SaveException">
            <summary>
              查找类似 Failure to save data 的本地化字符串。
            </summary>
        </member>
        <member name="T:Phenix.Business.ServiceBase`1">
            <summary>
            服务基类
            </summary>
        </member>
        <member name="T:Phenix.Business.Tunnel.FastSaveCommand">
            <summary>
            快速提交业务对象，允许不检查业务规则
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor">
            <summary>
            初始化
            dataSourceKey = null
            aloneTransaction = false
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="aloneTransaction">是否Businesses各自使用独立事务</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.String)">
            <summary>
            初始化
            aloneTransaction = false
            </summary>
            <param name="dataSourceKey">数据源键</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.Boolean)">
            <summary>
            初始化
            dataSourceKey = null
            </summary>
            <param name="aloneTransaction">是否Businesses各自使用独立事务</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.Collections.Generic.IList{Phenix.Business.IBusiness})">
            <summary>
            初始化
            dataSourceKey = null
            aloneTransaction = false
            </summary>
            <param name="businesses">需提交后台的业务对象</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.String,System.Collections.Generic.IList{Phenix.Business.IBusiness})">
            <summary>
            初始化
            aloneTransaction = false
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="businesses">需提交后台的业务对象</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.Boolean,System.Collections.Generic.IList{Phenix.Business.IBusiness})">
            <summary>
            初始化
            dataSourceKey = null
            </summary>
            <param name="aloneTransaction">是否Businesses各自使用独立事务</param>
            <param name="businesses">需提交后台的业务对象</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.#ctor(System.String,System.Boolean,System.Collections.Generic.IList{Phenix.Business.IBusiness})">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="aloneTransaction">是否Businesses各自使用独立事务</param>
            <param name="businesses">需提交后台的业务对象</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.Execute">
            <summary>
            执行指令
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastSaveCommand.DataPortal_Execute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="P:Phenix.Business.Tunnel.FastSaveCommand.DataSourceKey">
            <summary>
            数据源键
            缺省为 null
            </summary>
        </member>
        <member name="P:Phenix.Business.Tunnel.FastSaveCommand.AloneTransaction">
            <summary>
            是否Businesses各自使用独立事务
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Business.Tunnel.FastSaveCommand.Businesses">
            <summary>
            需提交后台的业务对象
            </summary>
        </member>
        <member name="T:Phenix.Business.Tunnel.FastFetchCommand">
            <summary>
            快速下载业务对象，一次下载服务请求
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="dataSourceKey">数据源键</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``1(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            表中仅一条记录
            否则仅取表的第一条记录
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``1(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``1(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``1(Phenix.Business.Criterions)">
            <summary>
            构建业务对象
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``2(Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``2(Phenix.Core.Mapping.ICriteria,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            条件类的字段映射关系请用Phenix.Core.Mapping.CriteriaFieldAttribute标注
            </summary>
            <param name="criteria">条件对象</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``2(System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``2(Phenix.Core.Mapping.CriteriaExpression,Phenix.Core.Mapping.OrderByInfo[])">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderByInfos">数据排列顺序队列</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.AddFetch``2(Phenix.Business.Criterions)">
            <summary>
            构建业务对象集合
            </summary>
            <param name="criterions">条件集</param>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.Execute">
            <summary>
            执行指令
            </summary>
        </member>
        <member name="M:Phenix.Business.Tunnel.FastFetchCommand.DataPortal_Execute">
            <summary>
            处理执行指令(运行在持久层的程序域里)
            </summary>
        </member>
        <member name="P:Phenix.Business.Tunnel.FastFetchCommand.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="T:Phenix.Business.Workflow.StartCommandBase`1">
            <summary>
            启动工作流指令基类 
            </summary>
        </member>
        <member name="M:Phenix.Business.Workflow.StartCommandBase`1.Execute(Phenix.Core.Workflow.TaskContext)">
            <summary>
            执行指令
            </summary>
            <param name="taskContext">任务上下文</param>
        </member>
        <member name="M:Phenix.Business.Workflow.StartCommandBase`1.Execute(System.Data.Common.DbConnection,Phenix.Core.Workflow.TaskContext)">
            <summary>
            执行指令
            </summary>
            <param name="connection">数据库连接</param>
            <param name="taskContext">任务上下文</param>
        </member>
        <member name="M:Phenix.Business.Workflow.StartCommandBase`1.Execute(System.Data.Common.DbTransaction,Phenix.Core.Workflow.TaskContext)">
            <summary>
            执行指令
            </summary>
            <param name="transaction">数据库事务</param>
            <param name="taskContext">任务上下文</param>
        </member>
        <member name="M:Phenix.Business.Workflow.StartCommandBase`1.DoExecute">
            <summary>
            DoExecute
            </summary>
        </member>
        <member name="P:Phenix.Business.Workflow.StartCommandBase`1.TaskContext">
            <summary>
            任务上下文
            </summary>
        </member>
        <member name="T:Phenix.Business.EntityPageBase`1">
            <summary>
            实体分页基类
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityPageBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityPageBase`1.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="T:Phenix.Business.EntityListPageBase`2">
            <summary>
            实体集合分页基类
            </summary>
        </member>
    </members>
</doc>
